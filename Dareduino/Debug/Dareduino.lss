
Dareduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000f92  00001026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800162  00800162  00001088  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123b  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac5  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f5  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000634  00000000  00000000  00004017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000464b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <rTask>:

void rTask()
{
	while (1)
	{
		printf("rTask\n");
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 0b 05 	call	0xa16	; 0xa16 <puts>
  ae:	fb cf       	rjmp	.-10     	; 0xa6 <rTask>

000000b0 <qTask>:

void qTask()
{
	while (1)
	{
		printf("qTask\n");
  b0:	8a e1       	ldi	r24, 0x1A	; 26
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 0b 05 	call	0xa16	; 0xa16 <puts>
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <qTask>

000000ba <onTask>:

void onTask(void)
{
	while (1)
	{	
		printf("onTask\n");
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 0b 05 	call	0xa16	; 0xa16 <puts>
		pinWrite(13,1);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <pinWrite>
  ce:	f5 cf       	rjmp	.-22     	; 0xba <onTask>

000000d0 <offTask>:

void offTask(void)
{
	while (1)
	{	
		printf("offTask\n");
  d0:	87 e2       	ldi	r24, 0x27	; 39
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 0b 05 	call	0xa16	; 0xa16 <puts>
		pinWrite(13,0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <pinWrite>
  e4:	f5 cf       	rjmp	.-22     	; 0xd0 <offTask>

000000e6 <main>:
void rTask(void);
void qTask(void);

int main (void)
{
	consoleDisplay();
  e6:	0e 94 83 03 	call	0x706	; 0x706 <consoleDisplay>
	pinConfig(13,OUTPUT);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 a7 00 	call	0x14e	; 0x14e <pinConfig>
	
	OSinit();
  f6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <OSinit>
	
	createTask(&onTask, 20, 50, "onTask");
  fa:	20 e2       	ldi	r18, 0x20	; 32
  fc:	31 e0       	ldi	r19, 0x01	; 1
  fe:	42 e3       	ldi	r20, 0x32	; 50
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	64 e1       	ldi	r22, 0x14	; 20
 104:	8d e5       	ldi	r24, 0x5D	; 93
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 24 02 	call	0x448	; 0x448 <createTask>
	createTask(&rTask, 1, 50, "rTask");
 10c:	24 e1       	ldi	r18, 0x14	; 20
 10e:	31 e0       	ldi	r19, 0x01	; 1
 110:	42 e3       	ldi	r20, 0x32	; 50
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	83 e5       	ldi	r24, 0x53	; 83
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 24 02 	call	0x448	; 0x448 <createTask>
	createTask(&qTask, 12, 50, "qTask");
 11e:	2a e1       	ldi	r18, 0x1A	; 26
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	42 e3       	ldi	r20, 0x32	; 50
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	6c e0       	ldi	r22, 0x0C	; 12
 128:	88 e5       	ldi	r24, 0x58	; 88
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 24 02 	call	0x448	; 0x448 <createTask>
	createTask(&offTask, 2, 50, "offTask");
 130:	27 e2       	ldi	r18, 0x27	; 39
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	42 e3       	ldi	r20, 0x32	; 50
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	88 e6       	ldi	r24, 0x68	; 104
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 24 02 	call	0x448	; 0x448 <createTask>

	OSlaunch(PRIORITYBASED);
 142:	82 e5       	ldi	r24, 0x52	; 82
 144:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <OSlaunch>

	return 0;
}
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	08 95       	ret

0000014e <pinConfig>:
#include "gpio.h"

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	91 05       	cpc	r25, r1
 152:	00 f5       	brcc	.+64     	; 0x194 <pinConfig+0x46>
	{
		if(io == OUTPUT)
 154:	61 30       	cpi	r22, 0x01	; 1
 156:	71 05       	cpc	r23, r1
 158:	69 f4       	brne	.+26     	; 0x174 <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
 15a:	4a b1       	in	r20, 0x0a	; 10
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <pinConfig+0x1a>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	8a 95       	dec	r24
 16a:	e2 f7       	brpl	.-8      	; 0x164 <pinConfig+0x16>
 16c:	cb 01       	movw	r24, r22
 16e:	84 2b       	or	r24, r20
 170:	8a b9       	out	0x0a, r24	; 10
 172:	08 95       	ret
		}
		
		if(io == INPUT)
 174:	67 2b       	or	r22, r23
 176:	a9 f5       	brne	.+106    	; 0x1e2 <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
 178:	4a b1       	in	r20, 0x0a	; 10
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <pinConfig+0x38>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <pinConfig+0x34>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	8a b9       	out	0x0a, r24	; 10
 192:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
 194:	9c 01       	movw	r18, r24
 196:	28 50       	subi	r18, 0x08	; 8
 198:	31 09       	sbc	r19, r1
 19a:	26 30       	cpi	r18, 0x06	; 6
 19c:	31 05       	cpc	r19, r1
 19e:	08 f5       	brcc	.+66     	; 0x1e2 <pinConfig+0x94>
	{
		if(io == OUTPUT)
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	71 f4       	brne	.+28     	; 0x1c2 <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
 1a6:	44 b1       	in	r20, 0x04	; 4
 1a8:	c9 01       	movw	r24, r18
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <pinConfig+0x68>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <pinConfig+0x64>
 1ba:	cb 01       	movw	r24, r22
 1bc:	84 2b       	or	r24, r20
 1be:	84 b9       	out	0x04, r24	; 4
 1c0:	08 95       	ret
		}
		
		if(io == INPUT)
 1c2:	67 2b       	or	r22, r23
 1c4:	71 f4       	brne	.+28     	; 0x1e2 <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
 1c6:	44 b1       	in	r20, 0x04	; 4
 1c8:	08 97       	sbiw	r24, 0x08	; 8
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <pinConfig+0x88>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <pinConfig+0x84>
 1da:	cb 01       	movw	r24, r22
 1dc:	80 95       	com	r24
 1de:	84 23       	and	r24, r20
 1e0:	84 b9       	out	0x04, r24	; 4
 1e2:	08 95       	ret

000001e4 <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
 1e4:	88 30       	cpi	r24, 0x08	; 8
 1e6:	91 05       	cpc	r25, r1
 1e8:	20 f5       	brcc	.+72     	; 0x232 <pinWrite+0x4e>
	{
		if (val > 0)
 1ea:	16 16       	cp	r1, r22
 1ec:	17 06       	cpc	r1, r23
 1ee:	5c f4       	brge	.+22     	; 0x206 <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
 1f0:	4b b1       	in	r20, 0x0b	; 11
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	08 2e       	mov	r0, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <pinWrite+0x1a>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <pinWrite+0x16>
 202:	24 2b       	or	r18, r20
 204:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
 206:	61 15       	cp	r22, r1
 208:	71 05       	cpc	r23, r1
 20a:	99 f4       	brne	.+38     	; 0x232 <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
 20c:	4b b1       	in	r20, 0x0b	; 11
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	08 2e       	mov	r0, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <pinWrite+0x36>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <pinWrite+0x32>
 21e:	20 95       	com	r18
 220:	24 23       	and	r18, r20
 222:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
 224:	9c 01       	movw	r18, r24
 226:	28 50       	subi	r18, 0x08	; 8
 228:	31 09       	sbc	r19, r1
 22a:	26 30       	cpi	r18, 0x06	; 6
 22c:	31 05       	cpc	r19, r1
 22e:	b8 f0       	brcs	.+46     	; 0x25e <pinWrite+0x7a>
 230:	08 95       	ret
 232:	9c 01       	movw	r18, r24
 234:	28 50       	subi	r18, 0x08	; 8
 236:	31 09       	sbc	r19, r1
 238:	26 30       	cpi	r18, 0x06	; 6
 23a:	31 05       	cpc	r19, r1
 23c:	f0 f4       	brcc	.+60     	; 0x27a <pinWrite+0x96>
	{
		if (val > 0)
 23e:	16 16       	cp	r1, r22
 240:	17 06       	cpc	r1, r23
 242:	5c f4       	brge	.+22     	; 0x25a <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
 244:	45 b1       	in	r20, 0x05	; 5
 246:	f9 01       	movw	r30, r18
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <pinWrite+0x6e>
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	ea 95       	dec	r30
 254:	e2 f7       	brpl	.-8      	; 0x24e <pinWrite+0x6a>
 256:	24 2b       	or	r18, r20
 258:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
 25a:	67 2b       	or	r22, r23
 25c:	71 f4       	brne	.+28     	; 0x27a <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
 25e:	45 b1       	in	r20, 0x05	; 5
 260:	08 97       	sbiw	r24, 0x08	; 8
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <pinWrite+0x8a>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <pinWrite+0x86>
 272:	cb 01       	movw	r24, r22
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	85 b9       	out	0x05, r24	; 5
 27a:	08 95       	ret

0000027c <swapNodes>:

void TIMER1_COMPA_vect (void) __attribute__ ((signal,naked));
void taskScheduler(void) __attribute__((naked));

void swapNodes(taskTCB *a, taskTCB *b)
{	
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	dc 01       	movw	r26, r24
 282:	fb 01       	movw	r30, r22
	t->fnPtr = a->fnPtr;
 284:	c0 91 64 01 	lds	r28, 0x0164	; 0x800164 <t>
 288:	d0 91 65 01 	lds	r29, 0x0165	; 0x800165 <t+0x1>
 28c:	8d 91       	ld	r24, X+
 28e:	9c 91       	ld	r25, X
 290:	11 97       	sbiw	r26, 0x01	; 1
 292:	99 83       	std	Y+1, r25	; 0x01
 294:	88 83       	st	Y, r24
	t->id = a->id;
 296:	c0 91 64 01 	lds	r28, 0x0164	; 0x800164 <t>
 29a:	d0 91 65 01 	lds	r29, 0x0165	; 0x800165 <t+0x1>
 29e:	18 96       	adiw	r26, 0x08	; 8
 2a0:	8d 91       	ld	r24, X+
 2a2:	9c 91       	ld	r25, X
 2a4:	19 97       	sbiw	r26, 0x09	; 9
 2a6:	99 87       	std	Y+9, r25	; 0x09
 2a8:	88 87       	std	Y+8, r24	; 0x08
	t->neverRun = a->neverRun;
 2aa:	15 96       	adiw	r26, 0x05	; 5
 2ac:	8c 91       	ld	r24, X
 2ae:	15 97       	sbiw	r26, 0x05	; 5
 2b0:	8d 83       	std	Y+5, r24	; 0x05
	t->priority = a->priority;
 2b2:	14 96       	adiw	r26, 0x04	; 4
 2b4:	8c 91       	ld	r24, X
 2b6:	14 97       	sbiw	r26, 0x04	; 4
 2b8:	8c 83       	std	Y+4, r24	; 0x04
	t->sP = a->sP;
 2ba:	12 96       	adiw	r26, 0x02	; 2
 2bc:	8d 91       	ld	r24, X+
 2be:	9c 91       	ld	r25, X
 2c0:	13 97       	sbiw	r26, 0x03	; 3
 2c2:	9b 83       	std	Y+3, r25	; 0x03
 2c4:	8a 83       	std	Y+2, r24	; 0x02
	t->status = a->status;
 2c6:	1a 96       	adiw	r26, 0x0a	; 10
 2c8:	8c 91       	ld	r24, X
 2ca:	1a 97       	sbiw	r26, 0x0a	; 10
 2cc:	8a 87       	std	Y+10, r24	; 0x0a
	
	a->fnPtr = b->fnPtr;
 2ce:	80 81       	ld	r24, Z
 2d0:	91 81       	ldd	r25, Z+1	; 0x01
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	9c 93       	st	X, r25
 2d6:	8e 93       	st	-X, r24
	a->id = b->id;
 2d8:	80 85       	ldd	r24, Z+8	; 0x08
 2da:	91 85       	ldd	r25, Z+9	; 0x09
 2dc:	19 96       	adiw	r26, 0x09	; 9
 2de:	9c 93       	st	X, r25
 2e0:	8e 93       	st	-X, r24
 2e2:	18 97       	sbiw	r26, 0x08	; 8
	a->neverRun = b->neverRun;
 2e4:	85 81       	ldd	r24, Z+5	; 0x05
 2e6:	15 96       	adiw	r26, 0x05	; 5
 2e8:	8c 93       	st	X, r24
 2ea:	15 97       	sbiw	r26, 0x05	; 5
	a->priority = b->priority;
 2ec:	84 81       	ldd	r24, Z+4	; 0x04
 2ee:	14 96       	adiw	r26, 0x04	; 4
 2f0:	8c 93       	st	X, r24
 2f2:	14 97       	sbiw	r26, 0x04	; 4
	a->sP = b->sP;
 2f4:	82 81       	ldd	r24, Z+2	; 0x02
 2f6:	93 81       	ldd	r25, Z+3	; 0x03
 2f8:	13 96       	adiw	r26, 0x03	; 3
 2fa:	9c 93       	st	X, r25
 2fc:	8e 93       	st	-X, r24
 2fe:	12 97       	sbiw	r26, 0x02	; 2
	a->status = b->status;
 300:	82 85       	ldd	r24, Z+10	; 0x0a
 302:	1a 96       	adiw	r26, 0x0a	; 10
 304:	8c 93       	st	X, r24
	
	b->fnPtr = t->fnPtr;
 306:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <t>
 30a:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <t+0x1>
 30e:	8d 91       	ld	r24, X+
 310:	9c 91       	ld	r25, X
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
	b->id = t->id;
 316:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <t>
 31a:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <t+0x1>
 31e:	18 96       	adiw	r26, 0x08	; 8
 320:	8d 91       	ld	r24, X+
 322:	9c 91       	ld	r25, X
 324:	19 97       	sbiw	r26, 0x09	; 9
 326:	91 87       	std	Z+9, r25	; 0x09
 328:	80 87       	std	Z+8, r24	; 0x08
	b->neverRun = t->neverRun;
 32a:	15 96       	adiw	r26, 0x05	; 5
 32c:	8c 91       	ld	r24, X
 32e:	15 97       	sbiw	r26, 0x05	; 5
 330:	85 83       	std	Z+5, r24	; 0x05
	b->priority = t->priority;
 332:	14 96       	adiw	r26, 0x04	; 4
 334:	8c 91       	ld	r24, X
 336:	14 97       	sbiw	r26, 0x04	; 4
 338:	84 83       	std	Z+4, r24	; 0x04
	b->sP = t->sP;
 33a:	12 96       	adiw	r26, 0x02	; 2
 33c:	8d 91       	ld	r24, X+
 33e:	9c 91       	ld	r25, X
 340:	13 97       	sbiw	r26, 0x03	; 3
 342:	93 83       	std	Z+3, r25	; 0x03
 344:	82 83       	std	Z+2, r24	; 0x02
	b->status = t->status;	
 346:	1a 96       	adiw	r26, 0x0a	; 10
 348:	8c 91       	ld	r24, X
 34a:	82 87       	std	Z+10, r24	; 0x0a
	
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <sortTaskList>:

void sortTaskList()
{
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	taskTCB *temp1;
	taskTCB *temp2;

	for(temp1=head->next; temp1!=NULL; temp1=temp1->next)
 35a:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <head>
 35e:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <head+0x1>
 362:	06 81       	ldd	r16, Z+6	; 0x06
 364:	17 81       	ldd	r17, Z+7	; 0x07
 366:	01 15       	cp	r16, r1
 368:	11 05       	cpc	r17, r1
 36a:	c9 f0       	breq	.+50     	; 0x39e <sortTaskList+0x4c>
	{
		for(temp2=temp1->next; temp2!=NULL; temp2=temp2->next)
 36c:	f8 01       	movw	r30, r16
 36e:	c6 81       	ldd	r28, Z+6	; 0x06
 370:	d7 81       	ldd	r29, Z+7	; 0x07
 372:	20 97       	sbiw	r28, 0x00	; 0
 374:	a1 f0       	breq	.+40     	; 0x39e <sortTaskList+0x4c>
		{
			if(temp2->priority < temp1->priority)
 376:	9c 81       	ldd	r25, Y+4	; 0x04
 378:	f8 01       	movw	r30, r16
 37a:	84 81       	ldd	r24, Z+4	; 0x04
 37c:	98 17       	cp	r25, r24
 37e:	20 f4       	brcc	.+8      	; 0x388 <sortTaskList+0x36>
			{
				swapNodes(temp1, temp2);
 380:	be 01       	movw	r22, r28
 382:	c8 01       	movw	r24, r16
 384:	0e 94 3e 01 	call	0x27c	; 0x27c <swapNodes>
	taskTCB *temp1;
	taskTCB *temp2;

	for(temp1=head->next; temp1!=NULL; temp1=temp1->next)
	{
		for(temp2=temp1->next; temp2!=NULL; temp2=temp2->next)
 388:	0e 80       	ldd	r0, Y+6	; 0x06
 38a:	df 81       	ldd	r29, Y+7	; 0x07
 38c:	c0 2d       	mov	r28, r0
 38e:	20 97       	sbiw	r28, 0x00	; 0
 390:	91 f7       	brne	.-28     	; 0x376 <sortTaskList+0x24>
void sortTaskList()
{
	taskTCB *temp1;
	taskTCB *temp2;

	for(temp1=head->next; temp1!=NULL; temp1=temp1->next)
 392:	f8 01       	movw	r30, r16
 394:	06 81       	ldd	r16, Z+6	; 0x06
 396:	17 81       	ldd	r17, Z+7	; 0x07
 398:	01 15       	cp	r16, r1
 39a:	11 05       	cpc	r17, r1
 39c:	39 f7       	brne	.-50     	; 0x36c <sortTaskList+0x1a>
			{
				swapNodes(temp1, temp2);
			}
		}
	}
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <timerInit>:

void timerInit(void) 
{
    TCCR1B |= (1<<WGM12) | (1<<CS12);
 3a8:	e1 e8       	ldi	r30, 0x81	; 129
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8c 60       	ori	r24, 0x0C	; 12
 3b0:	80 83       	st	Z, r24
    TIMSK1 |= ( 1 << OCIE1A );
 3b2:	ef e6       	ldi	r30, 0x6F	; 111
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	80 83       	st	Z, r24
	OCR1A = 61500;   
 3bc:	8c e3       	ldi	r24, 0x3C	; 60
 3be:	90 ef       	ldi	r25, 0xF0	; 240
 3c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 3c8:	08 95       	ret

000003ca <OSinit>:
  }
}

void OSinit(void)
{
	cli();
 3ca:	f8 94       	cli
	timerInit();
 3cc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <timerInit>
	head->next = NULL;
 3d0:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <head>
 3d4:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <head+0x1>
 3d8:	17 82       	std	Z+7, r1	; 0x07
 3da:	16 82       	std	Z+6, r1	; 0x06
	head->status = HEAD;
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	82 87       	std	Z+10, r24	; 0x0a
	runPt = head;
 3e0:	f0 93 6b 01 	sts	0x016B, r31	; 0x80016b <runPt+0x1>
 3e4:	e0 93 6a 01 	sts	0x016A, r30	; 0x80016a <runPt>
	stackUsed = 0;
 3e8:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <stackUsed+0x1>
 3ec:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <stackUsed>
	tasksCreated = 0;
 3f0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tasksCreated>
 3f4:	08 95       	ret

000003f6 <OSlaunch>:
}

void OSlaunch(uint8_t schType)
{
  currSp = &mainSp;
 3f6:	24 e7       	ldi	r18, 0x74	; 116
 3f8:	31 e0       	ldi	r19, 0x01	; 1
 3fa:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
 3fe:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
  schedulerType = schType;
 402:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <schedulerType>
  if(schType == PRIORITYBASED)
 406:	82 35       	cpi	r24, 0x52	; 82
 408:	11 f4       	brne	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	sortTaskList();
 40a:	0e 94 a9 01 	call	0x352	; 0x352 <sortTaskList>
  printf("Starting scheduler with %d tasks", tasksCreated);
 40e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <tasksCreated>
 412:	1f 92       	push	r1
 414:	8f 93       	push	r24
 416:	8f e2       	ldi	r24, 0x2F	; 47
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	2f e7       	ldi	r18, 0x7F	; 127
 424:	8a e1       	ldi	r24, 0x1A	; 26
 426:	96 e0       	ldi	r25, 0x06	; 6
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
  _delay_ms(2000);
  sei();
 434:	78 94       	sei
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
  while(1)
  {
	  printf("Scheduler running\n");
 43e:	80 e5       	ldi	r24, 0x50	; 80
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 0b 05 	call	0xa16	; 0xa16 <puts>
 446:	fb cf       	rjmp	.-10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

00000448 <createTask>:
  }
}

void createTask(void(*fPtr)(void), uint8_t priority, uint16_t stack_size, char *name)
{ 
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	6c 01       	movw	r12, r24
 458:	f6 2e       	mov	r15, r22
 45a:	ea 01       	movw	r28, r20
 45c:	89 01       	movw	r16, r18
  tasksCreated += 1;
 45e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <tasksCreated>
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <tasksCreated>
  newTask = (taskTCB *)malloc(sizeof(taskTCB));
 468:	8b e0       	ldi	r24, 0x0B	; 11
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 98 03 	call	0x730	; 0x730 <malloc>
 470:	fc 01       	movw	r30, r24
 472:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <newTask+0x1>
 476:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <newTask>
  newTask->fnPtr = fPtr;
 47a:	d1 82       	std	Z+1, r13	; 0x01
 47c:	c0 82       	st	Z, r12
  newTask->priority = priority;
 47e:	f4 82       	std	Z+4, r15	; 0x04
  newTask->neverRun = TRUE;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	85 83       	std	Z+5, r24	; 0x05
  newTask->status = READY;
 484:	12 86       	std	Z+10, r1	; 0x0a
  newTask->sP = USER_STACK_SPACE - stackUsed;
 486:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <stackUsed>
 48a:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <stackUsed+0x1>
 48e:	8b e9       	ldi	r24, 0x9B	; 155
 490:	98 e0       	ldi	r25, 0x08	; 8
 492:	82 1b       	sub	r24, r18
 494:	93 0b       	sbc	r25, r19
 496:	93 83       	std	Z+3, r25	; 0x03
 498:	82 83       	std	Z+2, r24	; 0x02
  stackUsed += stack_size;
 49a:	c2 0f       	add	r28, r18
 49c:	d3 1f       	adc	r29, r19
 49e:	d0 93 71 01 	sts	0x0171, r29	; 0x800171 <stackUsed+0x1>
 4a2:	c0 93 70 01 	sts	0x0170, r28	; 0x800170 <stackUsed>
  newTask->id = name;
 4a6:	11 87       	std	Z+9, r17	; 0x09
 4a8:	00 87       	std	Z+8, r16	; 0x08
  
  newTask->next = head->next;
 4aa:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <head>
 4ae:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <head+0x1>
 4b2:	16 96       	adiw	r26, 0x06	; 6
 4b4:	8d 91       	ld	r24, X+
 4b6:	9c 91       	ld	r25, X
 4b8:	17 97       	sbiw	r26, 0x07	; 7
 4ba:	97 83       	std	Z+7, r25	; 0x07
 4bc:	86 83       	std	Z+6, r24	; 0x06
  head->next = newTask;
 4be:	17 96       	adiw	r26, 0x07	; 7
 4c0:	fc 93       	st	X, r31
 4c2:	ee 93       	st	-X, r30
 4c4:	16 97       	sbiw	r26, 0x06	; 6
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	08 95       	ret

000004d6 <taskScheduler>:

void taskScheduler(void)
{
	if(runPt->status == HEAD)
 4d6:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <runPt>
 4da:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <runPt+0x1>
 4de:	82 85       	ldd	r24, Z+10	; 0x0a
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	39 f4       	brne	.+14     	; 0x4f2 <taskScheduler+0x1c>
	{
		runPt = runPt->next;
 4e4:	86 81       	ldd	r24, Z+6	; 0x06
 4e6:	97 81       	ldd	r25, Z+7	; 0x07
 4e8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <runPt+0x1>
 4ec:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <runPt>
 4f0:	13 c0       	rjmp	.+38     	; 0x518 <taskScheduler+0x42>
	}
	else if(runPt->next == NULL)
 4f2:	86 81       	ldd	r24, Z+6	; 0x06
 4f4:	97 81       	ldd	r25, Z+7	; 0x07
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	59 f4       	brne	.+22     	; 0x510 <taskScheduler+0x3a>
    {
		runPt = head->next;
 4fa:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <head>
 4fe:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <head+0x1>
 502:	86 81       	ldd	r24, Z+6	; 0x06
 504:	97 81       	ldd	r25, Z+7	; 0x07
 506:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <runPt+0x1>
 50a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <runPt>
 50e:	04 c0       	rjmp	.+8      	; 0x518 <taskScheduler+0x42>
	}
	else
	{
		runPt = runPt->next;
 510:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <runPt+0x1>
 514:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <runPt>
	}

    asm volatile("ret");	
 518:	08 95       	ret

0000051a <__vector_11>:
	OCR1A = 61500;   
}

void TIMER1_COMPA_vect ( void )
{
  saveContext();
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	0f 92       	push	r0
 522:	1f 92       	push	r1
 524:	2f 92       	push	r2
 526:	3f 92       	push	r3
 528:	4f 92       	push	r4
 52a:	5f 92       	push	r5
 52c:	6f 92       	push	r6
 52e:	7f 92       	push	r7
 530:	8f 92       	push	r8
 532:	9f 92       	push	r9
 534:	af 92       	push	r10
 536:	bf 92       	push	r11
 538:	cf 92       	push	r12
 53a:	df 92       	push	r13
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
 560:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <__data_end>
 564:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <__data_end+0x1>
 568:	0d b6       	in	r0, 0x3d	; 61
 56a:	0d 92       	st	X+, r0
 56c:	0e b6       	in	r0, 0x3e	; 62
 56e:	0d 92       	st	X+, r0
  taskScheduler();	
 570:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <taskScheduler>
  currSp = &(runPt->sP);
 574:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <runPt>
 578:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <runPt+0x1>
 57c:	cf 01       	movw	r24, r30
 57e:	02 96       	adiw	r24, 0x02	; 2
 580:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
 584:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
  loadStackPointer();
 588:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <__data_end>
 58c:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <__data_end+0x1>
 590:	cd 91       	ld	r28, X+
 592:	cd bf       	out	0x3d, r28	; 61
 594:	dd 91       	ld	r29, X+
 596:	de bf       	out	0x3e, r29	; 62
		  
  if(runPt->neverRun == TRUE)
 598:	85 81       	ldd	r24, Z+5	; 0x05
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	59 f4       	brne	.+22     	; 0x5b4 <__vector_11+0x9a>
  {
	sei();
 59e:	78 94       	sei
	runPt->neverRun = FALSE;
 5a0:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <runPt>
 5a4:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <runPt+0x1>
 5a8:	15 82       	std	Z+5, r1	; 0x05
	runPt->fnPtr();
 5aa:	01 90       	ld	r0, Z+
 5ac:	f0 81       	ld	r31, Z
 5ae:	e0 2d       	mov	r30, r0
 5b0:	09 95       	icall
 5b2:	2b c0       	rjmp	.+86     	; 0x60a <uart_putch>
  } 
  else 
  {	  
	restoreContext();
 5b4:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <__data_end>
 5b8:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <__data_end+0x1>
 5bc:	cd 91       	ld	r28, X+
 5be:	cd bf       	out	0x3d, r28	; 61
 5c0:	dd 91       	ld	r29, X+
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	df 90       	pop	r13
 5ea:	cf 90       	pop	r12
 5ec:	bf 90       	pop	r11
 5ee:	af 90       	pop	r10
 5f0:	9f 90       	pop	r9
 5f2:	8f 90       	pop	r8
 5f4:	7f 90       	pop	r7
 5f6:	6f 90       	pop	r6
 5f8:	5f 90       	pop	r5
 5fa:	4f 90       	pop	r4
 5fc:	3f 90       	pop	r3
 5fe:	2f 90       	pop	r2
 600:	1f 90       	pop	r1
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
	asm volatile ("reti");			  
 608:	18 95       	reti

0000060a <uart_putch>:
	while (UCSR0A & (1<<RXC0))
	dummy =  UDR0;
}

int uart_putch ( char ch, FILE *stream )
{
 60a:	cf 93       	push	r28
 60c:	c8 2f       	mov	r28, r24
	if(ch == '\n')
 60e:	8a 30       	cpi	r24, 0x0A	; 10
 610:	19 f4       	brne	.+6      	; 0x618 <uart_putch+0xe>
	uart_putch('\r', stream);
 612:	8d e0       	ldi	r24, 0x0D	; 13
 614:	0e 94 05 03 	call	0x60a	; 0x60a <uart_putch>
	while(!(UCSR0A & (1<<UDRE0)));
 618:	e0 ec       	ldi	r30, 0xC0	; 192
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	85 ff       	sbrs	r24, 5
 620:	fd cf       	rjmp	.-6      	; 0x61c <uart_putch+0x12>
	UDR0 = ch;
 622:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <uart_getch>:

int uart_getch(FILE *stream)
{
	unsigned char ch = '\0';
	while (!(UCSR0A & (1<<RXC0)));
 62e:	e0 ec       	ldi	r30, 0xC0	; 192
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	88 23       	and	r24, r24
 636:	ec f7       	brge	.-6      	; 0x632 <uart_getch+0x4>
	ch = UDR0;
 638:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	return ch;
}
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 95       	ret

00000640 <uart_init>:

FILE uart_str = FDEV_SETUP_STREAM (uart_putch, uart_getch, _FDEV_SETUP_RW);

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD)/16)-1)>>8;
 640:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (((F_CPU/BAUD)/16)-1);
 644:	87 e6       	ldi	r24, 0x67	; 103
 646:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 64a:	88 e1       	ldi	r24, 0x18	; 24
 64c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 650:	86 e0       	ldi	r24, 0x06	; 6
 652:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 656:	08 95       	ret

00000658 <ansi_clear_screen>:
}

void ansi_clear_screen ( void )
{
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
	putchar(27);
 65c:	ca e7       	ldi	r28, 0x7A	; 122
 65e:	d1 e0       	ldi	r29, 0x01	; 1
 660:	6a 81       	ldd	r22, Y+2	; 0x02
 662:	7b 81       	ldd	r23, Y+3	; 0x03
 664:	8b e1       	ldi	r24, 0x1B	; 27
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('[');
 66c:	6a 81       	ldd	r22, Y+2	; 0x02
 66e:	7b 81       	ldd	r23, Y+3	; 0x03
 670:	8b e5       	ldi	r24, 0x5B	; 91
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('H');
 678:	6a 81       	ldd	r22, Y+2	; 0x02
 67a:	7b 81       	ldd	r23, Y+3	; 0x03
 67c:	88 e4       	ldi	r24, 0x48	; 72
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar(27);
 684:	6a 81       	ldd	r22, Y+2	; 0x02
 686:	7b 81       	ldd	r23, Y+3	; 0x03
 688:	8b e1       	ldi	r24, 0x1B	; 27
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('[');
 690:	6a 81       	ldd	r22, Y+2	; 0x02
 692:	7b 81       	ldd	r23, Y+3	; 0x03
 694:	8b e5       	ldi	r24, 0x5B	; 91
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('J');
 69c:	6a 81       	ldd	r22, Y+2	; 0x02
 69e:	7b 81       	ldd	r23, Y+3	; 0x03
 6a0:	8a e4       	ldi	r24, 0x4A	; 74
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
}
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <ansi_me>:

void ansi_me(void)
{
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
	putchar(27);
 6b2:	ca e7       	ldi	r28, 0x7A	; 122
 6b4:	d1 e0       	ldi	r29, 0x01	; 1
 6b6:	6a 81       	ldd	r22, Y+2	; 0x02
 6b8:	7b 81       	ldd	r23, Y+3	; 0x03
 6ba:	8b e1       	ldi	r24, 0x1B	; 27
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('[');
 6c2:	6a 81       	ldd	r22, Y+2	; 0x02
 6c4:	7b 81       	ldd	r23, Y+3	; 0x03
 6c6:	8b e5       	ldi	r24, 0x5B	; 91
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('0');
 6ce:	6a 81       	ldd	r22, Y+2	; 0x02
 6d0:	7b 81       	ldd	r23, Y+3	; 0x03
 6d2:	80 e3       	ldi	r24, 0x30	; 48
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
	putchar('m');
 6da:	6a 81       	ldd	r22, Y+2	; 0x02
 6dc:	7b 81       	ldd	r23, Y+3	; 0x03
 6de:	8d e6       	ldi	r24, 0x6D	; 109
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <uart_flush>:

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
 6ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 6f0:	88 23       	and	r24, r24
 6f2:	44 f4       	brge	.+16     	; 0x704 <uart_flush+0x18>
	dummy =  UDR0;
 6f4:	a6 ec       	ldi	r26, 0xC6	; 198
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
 6f8:	e0 ec       	ldi	r30, 0xC0	; 192
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
	dummy =  UDR0;
 6fc:	8c 91       	ld	r24, X
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
 6fe:	80 81       	ld	r24, Z
 700:	88 23       	and	r24, r24
 702:	e4 f3       	brlt	.-8      	; 0x6fc <uart_flush+0x10>
 704:	08 95       	ret

00000706 <consoleDisplay>:
	return ch;
}

void consoleDisplay(void)
{
	stdout = stdin = &uart_str;
 706:	ea e7       	ldi	r30, 0x7A	; 122
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	86 e0       	ldi	r24, 0x06	; 6
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	91 83       	std	Z+1, r25	; 0x01
 710:	80 83       	st	Z, r24
 712:	93 83       	std	Z+3, r25	; 0x03
 714:	82 83       	std	Z+2, r24	; 0x02
	uart_init();
 716:	0e 94 20 03 	call	0x640	; 0x640 <uart_init>
	ansi_me();
 71a:	0e 94 57 03 	call	0x6ae	; 0x6ae <ansi_me>
	ansi_clear_screen();
 71e:	0e 94 2c 03 	call	0x658	; 0x658 <ansi_clear_screen>
	ansi_me();
 722:	0e 94 57 03 	call	0x6ae	; 0x6ae <ansi_me>
	ansi_clear_screen();
 726:	0e 94 2c 03 	call	0x658	; 0x658 <ansi_clear_screen>
	uart_flush();
 72a:	0e 94 76 03 	call	0x6ec	; 0x6ec <uart_flush>
 72e:	08 95       	ret

00000730 <malloc>:
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 05       	cpc	r25, r1
 73c:	10 f4       	brcc	.+4      	; 0x742 <malloc+0x12>
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <__flp>
 746:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <__flp+0x1>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	a0 e0       	ldi	r26, 0x00	; 0
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	30 97       	sbiw	r30, 0x00	; 0
 754:	19 f1       	breq	.+70     	; 0x79c <malloc+0x6c>
 756:	40 81       	ld	r20, Z
 758:	51 81       	ldd	r21, Z+1	; 0x01
 75a:	02 81       	ldd	r16, Z+2	; 0x02
 75c:	13 81       	ldd	r17, Z+3	; 0x03
 75e:	48 17       	cp	r20, r24
 760:	59 07       	cpc	r21, r25
 762:	c8 f0       	brcs	.+50     	; 0x796 <malloc+0x66>
 764:	84 17       	cp	r24, r20
 766:	95 07       	cpc	r25, r21
 768:	69 f4       	brne	.+26     	; 0x784 <malloc+0x54>
 76a:	10 97       	sbiw	r26, 0x00	; 0
 76c:	31 f0       	breq	.+12     	; 0x77a <malloc+0x4a>
 76e:	12 96       	adiw	r26, 0x02	; 2
 770:	0c 93       	st	X, r16
 772:	12 97       	sbiw	r26, 0x02	; 2
 774:	13 96       	adiw	r26, 0x03	; 3
 776:	1c 93       	st	X, r17
 778:	27 c0       	rjmp	.+78     	; 0x7c8 <malloc+0x98>
 77a:	00 93 78 01 	sts	0x0178, r16	; 0x800178 <__flp>
 77e:	10 93 79 01 	sts	0x0179, r17	; 0x800179 <__flp+0x1>
 782:	22 c0       	rjmp	.+68     	; 0x7c8 <malloc+0x98>
 784:	21 15       	cp	r18, r1
 786:	31 05       	cpc	r19, r1
 788:	19 f0       	breq	.+6      	; 0x790 <malloc+0x60>
 78a:	42 17       	cp	r20, r18
 78c:	53 07       	cpc	r21, r19
 78e:	18 f4       	brcc	.+6      	; 0x796 <malloc+0x66>
 790:	9a 01       	movw	r18, r20
 792:	bd 01       	movw	r22, r26
 794:	ef 01       	movw	r28, r30
 796:	df 01       	movw	r26, r30
 798:	f8 01       	movw	r30, r16
 79a:	db cf       	rjmp	.-74     	; 0x752 <malloc+0x22>
 79c:	21 15       	cp	r18, r1
 79e:	31 05       	cpc	r19, r1
 7a0:	f9 f0       	breq	.+62     	; 0x7e0 <malloc+0xb0>
 7a2:	28 1b       	sub	r18, r24
 7a4:	39 0b       	sbc	r19, r25
 7a6:	24 30       	cpi	r18, 0x04	; 4
 7a8:	31 05       	cpc	r19, r1
 7aa:	80 f4       	brcc	.+32     	; 0x7cc <malloc+0x9c>
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	9b 81       	ldd	r25, Y+3	; 0x03
 7b0:	61 15       	cp	r22, r1
 7b2:	71 05       	cpc	r23, r1
 7b4:	21 f0       	breq	.+8      	; 0x7be <malloc+0x8e>
 7b6:	fb 01       	movw	r30, r22
 7b8:	93 83       	std	Z+3, r25	; 0x03
 7ba:	82 83       	std	Z+2, r24	; 0x02
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <malloc+0x96>
 7be:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <__flp+0x1>
 7c2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__flp>
 7c6:	fe 01       	movw	r30, r28
 7c8:	32 96       	adiw	r30, 0x02	; 2
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <malloc+0x124>
 7cc:	fe 01       	movw	r30, r28
 7ce:	e2 0f       	add	r30, r18
 7d0:	f3 1f       	adc	r31, r19
 7d2:	81 93       	st	Z+, r24
 7d4:	91 93       	st	Z+, r25
 7d6:	22 50       	subi	r18, 0x02	; 2
 7d8:	31 09       	sbc	r19, r1
 7da:	39 83       	std	Y+1, r19	; 0x01
 7dc:	28 83       	st	Y, r18
 7de:	3a c0       	rjmp	.+116    	; 0x854 <malloc+0x124>
 7e0:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <__brkval>
 7e4:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <__brkval+0x1>
 7e8:	23 2b       	or	r18, r19
 7ea:	41 f4       	brne	.+16     	; 0x7fc <malloc+0xcc>
 7ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7f4:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <__brkval+0x1>
 7f8:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <__brkval>
 7fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 800:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 804:	21 15       	cp	r18, r1
 806:	31 05       	cpc	r19, r1
 808:	41 f4       	brne	.+16     	; 0x81a <malloc+0xea>
 80a:	2d b7       	in	r18, 0x3d	; 61
 80c:	3e b7       	in	r19, 0x3e	; 62
 80e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 812:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 816:	24 1b       	sub	r18, r20
 818:	35 0b       	sbc	r19, r21
 81a:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__brkval>
 81e:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__brkval+0x1>
 822:	e2 17       	cp	r30, r18
 824:	f3 07       	cpc	r31, r19
 826:	a0 f4       	brcc	.+40     	; 0x850 <malloc+0x120>
 828:	2e 1b       	sub	r18, r30
 82a:	3f 0b       	sbc	r19, r31
 82c:	28 17       	cp	r18, r24
 82e:	39 07       	cpc	r19, r25
 830:	78 f0       	brcs	.+30     	; 0x850 <malloc+0x120>
 832:	ac 01       	movw	r20, r24
 834:	4e 5f       	subi	r20, 0xFE	; 254
 836:	5f 4f       	sbci	r21, 0xFF	; 255
 838:	24 17       	cp	r18, r20
 83a:	35 07       	cpc	r19, r21
 83c:	48 f0       	brcs	.+18     	; 0x850 <malloc+0x120>
 83e:	4e 0f       	add	r20, r30
 840:	5f 1f       	adc	r21, r31
 842:	50 93 77 01 	sts	0x0177, r21	; 0x800177 <__brkval+0x1>
 846:	40 93 76 01 	sts	0x0176, r20	; 0x800176 <__brkval>
 84a:	81 93       	st	Z+, r24
 84c:	91 93       	st	Z+, r25
 84e:	02 c0       	rjmp	.+4      	; 0x854 <malloc+0x124>
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	cf 01       	movw	r24, r30
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <free>:
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <free+0xa>
 868:	81 c0       	rjmp	.+258    	; 0x96c <__stack+0x6d>
 86a:	fc 01       	movw	r30, r24
 86c:	32 97       	sbiw	r30, 0x02	; 2
 86e:	13 82       	std	Z+3, r1	; 0x03
 870:	12 82       	std	Z+2, r1	; 0x02
 872:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <__flp>
 876:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <__flp+0x1>
 87a:	10 97       	sbiw	r26, 0x00	; 0
 87c:	81 f4       	brne	.+32     	; 0x89e <free+0x3e>
 87e:	20 81       	ld	r18, Z
 880:	31 81       	ldd	r19, Z+1	; 0x01
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <__brkval>
 88a:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <__brkval+0x1>
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	51 f5       	brne	.+84     	; 0x8e8 <free+0x88>
 894:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <__brkval+0x1>
 898:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <__brkval>
 89c:	67 c0       	rjmp	.+206    	; 0x96c <__stack+0x6d>
 89e:	ed 01       	movw	r28, r26
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	ce 17       	cp	r28, r30
 8a6:	df 07       	cpc	r29, r31
 8a8:	40 f4       	brcc	.+16     	; 0x8ba <free+0x5a>
 8aa:	4a 81       	ldd	r20, Y+2	; 0x02
 8ac:	5b 81       	ldd	r21, Y+3	; 0x03
 8ae:	9e 01       	movw	r18, r28
 8b0:	41 15       	cp	r20, r1
 8b2:	51 05       	cpc	r21, r1
 8b4:	f1 f0       	breq	.+60     	; 0x8f2 <free+0x92>
 8b6:	ea 01       	movw	r28, r20
 8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <free+0x44>
 8ba:	d3 83       	std	Z+3, r29	; 0x03
 8bc:	c2 83       	std	Z+2, r28	; 0x02
 8be:	40 81       	ld	r20, Z
 8c0:	51 81       	ldd	r21, Z+1	; 0x01
 8c2:	84 0f       	add	r24, r20
 8c4:	95 1f       	adc	r25, r21
 8c6:	c8 17       	cp	r28, r24
 8c8:	d9 07       	cpc	r29, r25
 8ca:	59 f4       	brne	.+22     	; 0x8e2 <free+0x82>
 8cc:	88 81       	ld	r24, Y
 8ce:	99 81       	ldd	r25, Y+1	; 0x01
 8d0:	84 0f       	add	r24, r20
 8d2:	95 1f       	adc	r25, r21
 8d4:	02 96       	adiw	r24, 0x02	; 2
 8d6:	91 83       	std	Z+1, r25	; 0x01
 8d8:	80 83       	st	Z, r24
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	9b 81       	ldd	r25, Y+3	; 0x03
 8de:	93 83       	std	Z+3, r25	; 0x03
 8e0:	82 83       	std	Z+2, r24	; 0x02
 8e2:	21 15       	cp	r18, r1
 8e4:	31 05       	cpc	r19, r1
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <free+0x92>
 8e8:	f0 93 79 01 	sts	0x0179, r31	; 0x800179 <__flp+0x1>
 8ec:	e0 93 78 01 	sts	0x0178, r30	; 0x800178 <__flp>
 8f0:	3d c0       	rjmp	.+122    	; 0x96c <__stack+0x6d>
 8f2:	e9 01       	movw	r28, r18
 8f4:	fb 83       	std	Y+3, r31	; 0x03
 8f6:	ea 83       	std	Y+2, r30	; 0x02
 8f8:	49 91       	ld	r20, Y+
 8fa:	59 91       	ld	r21, Y+
 8fc:	c4 0f       	add	r28, r20
 8fe:	d5 1f       	adc	r29, r21
 900:	ec 17       	cp	r30, r28
 902:	fd 07       	cpc	r31, r29
 904:	61 f4       	brne	.+24     	; 0x91e <__stack+0x1f>
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	84 0f       	add	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	02 96       	adiw	r24, 0x02	; 2
 910:	e9 01       	movw	r28, r18
 912:	99 83       	std	Y+1, r25	; 0x01
 914:	88 83       	st	Y, r24
 916:	82 81       	ldd	r24, Z+2	; 0x02
 918:	93 81       	ldd	r25, Z+3	; 0x03
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
 91e:	e0 e0       	ldi	r30, 0x00	; 0
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	12 96       	adiw	r26, 0x02	; 2
 924:	8d 91       	ld	r24, X+
 926:	9c 91       	ld	r25, X
 928:	13 97       	sbiw	r26, 0x03	; 3
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	19 f0       	breq	.+6      	; 0x934 <__stack+0x35>
 92e:	fd 01       	movw	r30, r26
 930:	dc 01       	movw	r26, r24
 932:	f7 cf       	rjmp	.-18     	; 0x922 <__stack+0x23>
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	9d 01       	movw	r18, r26
 93c:	2e 5f       	subi	r18, 0xFE	; 254
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	82 0f       	add	r24, r18
 942:	93 1f       	adc	r25, r19
 944:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <__brkval>
 948:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <__brkval+0x1>
 94c:	28 17       	cp	r18, r24
 94e:	39 07       	cpc	r19, r25
 950:	69 f4       	brne	.+26     	; 0x96c <__stack+0x6d>
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	29 f4       	brne	.+10     	; 0x960 <__stack+0x61>
 956:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <__flp+0x1>
 95a:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__flp>
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
 960:	13 82       	std	Z+3, r1	; 0x03
 962:	12 82       	std	Z+2, r1	; 0x02
 964:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <__brkval+0x1>
 968:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <__brkval>
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	08 95       	ret

00000972 <fputc>:
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	fb 01       	movw	r30, r22
 97c:	23 81       	ldd	r18, Z+3	; 0x03
 97e:	21 fd       	sbrc	r18, 1
 980:	03 c0       	rjmp	.+6      	; 0x988 <fputc+0x16>
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	9f ef       	ldi	r25, 0xFF	; 255
 986:	2c c0       	rjmp	.+88     	; 0x9e0 <fputc+0x6e>
 988:	22 ff       	sbrs	r18, 2
 98a:	16 c0       	rjmp	.+44     	; 0x9b8 <fputc+0x46>
 98c:	46 81       	ldd	r20, Z+6	; 0x06
 98e:	57 81       	ldd	r21, Z+7	; 0x07
 990:	24 81       	ldd	r18, Z+4	; 0x04
 992:	35 81       	ldd	r19, Z+5	; 0x05
 994:	42 17       	cp	r20, r18
 996:	53 07       	cpc	r21, r19
 998:	44 f4       	brge	.+16     	; 0x9aa <fputc+0x38>
 99a:	a0 81       	ld	r26, Z
 99c:	b1 81       	ldd	r27, Z+1	; 0x01
 99e:	9d 01       	movw	r18, r26
 9a0:	2f 5f       	subi	r18, 0xFF	; 255
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	31 83       	std	Z+1, r19	; 0x01
 9a6:	20 83       	st	Z, r18
 9a8:	8c 93       	st	X, r24
 9aa:	26 81       	ldd	r18, Z+6	; 0x06
 9ac:	37 81       	ldd	r19, Z+7	; 0x07
 9ae:	2f 5f       	subi	r18, 0xFF	; 255
 9b0:	3f 4f       	sbci	r19, 0xFF	; 255
 9b2:	37 83       	std	Z+7, r19	; 0x07
 9b4:	26 83       	std	Z+6, r18	; 0x06
 9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <fputc+0x6e>
 9b8:	8b 01       	movw	r16, r22
 9ba:	ec 01       	movw	r28, r24
 9bc:	fb 01       	movw	r30, r22
 9be:	00 84       	ldd	r0, Z+8	; 0x08
 9c0:	f1 85       	ldd	r31, Z+9	; 0x09
 9c2:	e0 2d       	mov	r30, r0
 9c4:	09 95       	icall
 9c6:	89 2b       	or	r24, r25
 9c8:	e1 f6       	brne	.-72     	; 0x982 <fputc+0x10>
 9ca:	d8 01       	movw	r26, r16
 9cc:	16 96       	adiw	r26, 0x06	; 6
 9ce:	8d 91       	ld	r24, X+
 9d0:	9c 91       	ld	r25, X
 9d2:	17 97       	sbiw	r26, 0x07	; 7
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	17 96       	adiw	r26, 0x07	; 7
 9d8:	9c 93       	st	X, r25
 9da:	8e 93       	st	-X, r24
 9dc:	16 97       	sbiw	r26, 0x06	; 6
 9de:	ce 01       	movw	r24, r28
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	1f 91       	pop	r17
 9e6:	0f 91       	pop	r16
 9e8:	08 95       	ret

000009ea <printf>:
 9ea:	a0 e0       	ldi	r26, 0x00	; 0
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	eb ef       	ldi	r30, 0xFB	; 251
 9f0:	f4 e0       	ldi	r31, 0x04	; 4
 9f2:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__prologue_saves__+0x20>
 9f6:	ae 01       	movw	r20, r28
 9f8:	4b 5f       	subi	r20, 0xFB	; 251
 9fa:	5f 4f       	sbci	r21, 0xFF	; 255
 9fc:	fa 01       	movw	r30, r20
 9fe:	61 91       	ld	r22, Z+
 a00:	71 91       	ld	r23, Z+
 a02:	af 01       	movw	r20, r30
 a04:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__iob+0x2>
 a08:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__iob+0x3>
 a0c:	0e 94 3b 05 	call	0xa76	; 0xa76 <vfprintf>
 a10:	e2 e0       	ldi	r30, 0x02	; 2
 a12:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__epilogue_restores__+0x20>

00000a16 <puts>:
 a16:	0f 93       	push	r16
 a18:	1f 93       	push	r17
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <__iob+0x2>
 a22:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <__iob+0x3>
 a26:	23 81       	ldd	r18, Z+3	; 0x03
 a28:	21 ff       	sbrs	r18, 1
 a2a:	1b c0       	rjmp	.+54     	; 0xa62 <puts+0x4c>
 a2c:	8c 01       	movw	r16, r24
 a2e:	d0 e0       	ldi	r29, 0x00	; 0
 a30:	c0 e0       	ldi	r28, 0x00	; 0
 a32:	f8 01       	movw	r30, r16
 a34:	81 91       	ld	r24, Z+
 a36:	8f 01       	movw	r16, r30
 a38:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <__iob+0x2>
 a3c:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <__iob+0x3>
 a40:	db 01       	movw	r26, r22
 a42:	18 96       	adiw	r26, 0x08	; 8
 a44:	ed 91       	ld	r30, X+
 a46:	fc 91       	ld	r31, X
 a48:	19 97       	sbiw	r26, 0x09	; 9
 a4a:	88 23       	and	r24, r24
 a4c:	31 f0       	breq	.+12     	; 0xa5a <puts+0x44>
 a4e:	09 95       	icall
 a50:	89 2b       	or	r24, r25
 a52:	79 f3       	breq	.-34     	; 0xa32 <puts+0x1c>
 a54:	df ef       	ldi	r29, 0xFF	; 255
 a56:	cf ef       	ldi	r28, 0xFF	; 255
 a58:	ec cf       	rjmp	.-40     	; 0xa32 <puts+0x1c>
 a5a:	8a e0       	ldi	r24, 0x0A	; 10
 a5c:	09 95       	icall
 a5e:	89 2b       	or	r24, r25
 a60:	19 f0       	breq	.+6      	; 0xa68 <puts+0x52>
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <puts+0x56>
 a68:	8d 2f       	mov	r24, r29
 a6a:	9c 2f       	mov	r25, r28
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	1f 91       	pop	r17
 a72:	0f 91       	pop	r16
 a74:	08 95       	ret

00000a76 <vfprintf>:
 a76:	ab e0       	ldi	r26, 0x0B	; 11
 a78:	b0 e0       	ldi	r27, 0x00	; 0
 a7a:	e1 e4       	ldi	r30, 0x41	; 65
 a7c:	f5 e0       	ldi	r31, 0x05	; 5
 a7e:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__prologue_saves__>
 a82:	6c 01       	movw	r12, r24
 a84:	7b 01       	movw	r14, r22
 a86:	8a 01       	movw	r16, r20
 a88:	fc 01       	movw	r30, r24
 a8a:	17 82       	std	Z+7, r1	; 0x07
 a8c:	16 82       	std	Z+6, r1	; 0x06
 a8e:	83 81       	ldd	r24, Z+3	; 0x03
 a90:	81 ff       	sbrs	r24, 1
 a92:	cc c1       	rjmp	.+920    	; 0xe2c <vfprintf+0x3b6>
 a94:	ce 01       	movw	r24, r28
 a96:	01 96       	adiw	r24, 0x01	; 1
 a98:	3c 01       	movw	r6, r24
 a9a:	f6 01       	movw	r30, r12
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	f7 01       	movw	r30, r14
 aa0:	93 fd       	sbrc	r25, 3
 aa2:	85 91       	lpm	r24, Z+
 aa4:	93 ff       	sbrs	r25, 3
 aa6:	81 91       	ld	r24, Z+
 aa8:	7f 01       	movw	r14, r30
 aaa:	88 23       	and	r24, r24
 aac:	09 f4       	brne	.+2      	; 0xab0 <vfprintf+0x3a>
 aae:	ba c1       	rjmp	.+884    	; 0xe24 <vfprintf+0x3ae>
 ab0:	85 32       	cpi	r24, 0x25	; 37
 ab2:	39 f4       	brne	.+14     	; 0xac2 <vfprintf+0x4c>
 ab4:	93 fd       	sbrc	r25, 3
 ab6:	85 91       	lpm	r24, Z+
 ab8:	93 ff       	sbrs	r25, 3
 aba:	81 91       	ld	r24, Z+
 abc:	7f 01       	movw	r14, r30
 abe:	85 32       	cpi	r24, 0x25	; 37
 ac0:	29 f4       	brne	.+10     	; 0xacc <vfprintf+0x56>
 ac2:	b6 01       	movw	r22, r12
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 aca:	e7 cf       	rjmp	.-50     	; 0xa9a <vfprintf+0x24>
 acc:	91 2c       	mov	r9, r1
 ace:	21 2c       	mov	r2, r1
 ad0:	31 2c       	mov	r3, r1
 ad2:	ff e1       	ldi	r31, 0x1F	; 31
 ad4:	f3 15       	cp	r31, r3
 ad6:	d8 f0       	brcs	.+54     	; 0xb0e <vfprintf+0x98>
 ad8:	8b 32       	cpi	r24, 0x2B	; 43
 ada:	79 f0       	breq	.+30     	; 0xafa <vfprintf+0x84>
 adc:	38 f4       	brcc	.+14     	; 0xaec <vfprintf+0x76>
 ade:	80 32       	cpi	r24, 0x20	; 32
 ae0:	79 f0       	breq	.+30     	; 0xb00 <vfprintf+0x8a>
 ae2:	83 32       	cpi	r24, 0x23	; 35
 ae4:	a1 f4       	brne	.+40     	; 0xb0e <vfprintf+0x98>
 ae6:	23 2d       	mov	r18, r3
 ae8:	20 61       	ori	r18, 0x10	; 16
 aea:	1d c0       	rjmp	.+58     	; 0xb26 <vfprintf+0xb0>
 aec:	8d 32       	cpi	r24, 0x2D	; 45
 aee:	61 f0       	breq	.+24     	; 0xb08 <vfprintf+0x92>
 af0:	80 33       	cpi	r24, 0x30	; 48
 af2:	69 f4       	brne	.+26     	; 0xb0e <vfprintf+0x98>
 af4:	23 2d       	mov	r18, r3
 af6:	21 60       	ori	r18, 0x01	; 1
 af8:	16 c0       	rjmp	.+44     	; 0xb26 <vfprintf+0xb0>
 afa:	83 2d       	mov	r24, r3
 afc:	82 60       	ori	r24, 0x02	; 2
 afe:	38 2e       	mov	r3, r24
 b00:	e3 2d       	mov	r30, r3
 b02:	e4 60       	ori	r30, 0x04	; 4
 b04:	3e 2e       	mov	r3, r30
 b06:	2a c0       	rjmp	.+84     	; 0xb5c <vfprintf+0xe6>
 b08:	f3 2d       	mov	r31, r3
 b0a:	f8 60       	ori	r31, 0x08	; 8
 b0c:	1d c0       	rjmp	.+58     	; 0xb48 <vfprintf+0xd2>
 b0e:	37 fc       	sbrc	r3, 7
 b10:	2d c0       	rjmp	.+90     	; 0xb6c <vfprintf+0xf6>
 b12:	20 ed       	ldi	r18, 0xD0	; 208
 b14:	28 0f       	add	r18, r24
 b16:	2a 30       	cpi	r18, 0x0A	; 10
 b18:	40 f0       	brcs	.+16     	; 0xb2a <vfprintf+0xb4>
 b1a:	8e 32       	cpi	r24, 0x2E	; 46
 b1c:	b9 f4       	brne	.+46     	; 0xb4c <vfprintf+0xd6>
 b1e:	36 fc       	sbrc	r3, 6
 b20:	81 c1       	rjmp	.+770    	; 0xe24 <vfprintf+0x3ae>
 b22:	23 2d       	mov	r18, r3
 b24:	20 64       	ori	r18, 0x40	; 64
 b26:	32 2e       	mov	r3, r18
 b28:	19 c0       	rjmp	.+50     	; 0xb5c <vfprintf+0xe6>
 b2a:	36 fe       	sbrs	r3, 6
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <vfprintf+0xc4>
 b2e:	8a e0       	ldi	r24, 0x0A	; 10
 b30:	98 9e       	mul	r9, r24
 b32:	20 0d       	add	r18, r0
 b34:	11 24       	eor	r1, r1
 b36:	92 2e       	mov	r9, r18
 b38:	11 c0       	rjmp	.+34     	; 0xb5c <vfprintf+0xe6>
 b3a:	ea e0       	ldi	r30, 0x0A	; 10
 b3c:	2e 9e       	mul	r2, r30
 b3e:	20 0d       	add	r18, r0
 b40:	11 24       	eor	r1, r1
 b42:	22 2e       	mov	r2, r18
 b44:	f3 2d       	mov	r31, r3
 b46:	f0 62       	ori	r31, 0x20	; 32
 b48:	3f 2e       	mov	r3, r31
 b4a:	08 c0       	rjmp	.+16     	; 0xb5c <vfprintf+0xe6>
 b4c:	8c 36       	cpi	r24, 0x6C	; 108
 b4e:	21 f4       	brne	.+8      	; 0xb58 <vfprintf+0xe2>
 b50:	83 2d       	mov	r24, r3
 b52:	80 68       	ori	r24, 0x80	; 128
 b54:	38 2e       	mov	r3, r24
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <vfprintf+0xe6>
 b58:	88 36       	cpi	r24, 0x68	; 104
 b5a:	41 f4       	brne	.+16     	; 0xb6c <vfprintf+0xf6>
 b5c:	f7 01       	movw	r30, r14
 b5e:	93 fd       	sbrc	r25, 3
 b60:	85 91       	lpm	r24, Z+
 b62:	93 ff       	sbrs	r25, 3
 b64:	81 91       	ld	r24, Z+
 b66:	7f 01       	movw	r14, r30
 b68:	81 11       	cpse	r24, r1
 b6a:	b3 cf       	rjmp	.-154    	; 0xad2 <vfprintf+0x5c>
 b6c:	98 2f       	mov	r25, r24
 b6e:	9f 7d       	andi	r25, 0xDF	; 223
 b70:	95 54       	subi	r25, 0x45	; 69
 b72:	93 30       	cpi	r25, 0x03	; 3
 b74:	28 f4       	brcc	.+10     	; 0xb80 <vfprintf+0x10a>
 b76:	0c 5f       	subi	r16, 0xFC	; 252
 b78:	1f 4f       	sbci	r17, 0xFF	; 255
 b7a:	9f e3       	ldi	r25, 0x3F	; 63
 b7c:	99 83       	std	Y+1, r25	; 0x01
 b7e:	0d c0       	rjmp	.+26     	; 0xb9a <vfprintf+0x124>
 b80:	83 36       	cpi	r24, 0x63	; 99
 b82:	31 f0       	breq	.+12     	; 0xb90 <vfprintf+0x11a>
 b84:	83 37       	cpi	r24, 0x73	; 115
 b86:	71 f0       	breq	.+28     	; 0xba4 <vfprintf+0x12e>
 b88:	83 35       	cpi	r24, 0x53	; 83
 b8a:	09 f0       	breq	.+2      	; 0xb8e <vfprintf+0x118>
 b8c:	59 c0       	rjmp	.+178    	; 0xc40 <vfprintf+0x1ca>
 b8e:	21 c0       	rjmp	.+66     	; 0xbd2 <vfprintf+0x15c>
 b90:	f8 01       	movw	r30, r16
 b92:	80 81       	ld	r24, Z
 b94:	89 83       	std	Y+1, r24	; 0x01
 b96:	0e 5f       	subi	r16, 0xFE	; 254
 b98:	1f 4f       	sbci	r17, 0xFF	; 255
 b9a:	88 24       	eor	r8, r8
 b9c:	83 94       	inc	r8
 b9e:	91 2c       	mov	r9, r1
 ba0:	53 01       	movw	r10, r6
 ba2:	13 c0       	rjmp	.+38     	; 0xbca <vfprintf+0x154>
 ba4:	28 01       	movw	r4, r16
 ba6:	f2 e0       	ldi	r31, 0x02	; 2
 ba8:	4f 0e       	add	r4, r31
 baa:	51 1c       	adc	r5, r1
 bac:	f8 01       	movw	r30, r16
 bae:	a0 80       	ld	r10, Z
 bb0:	b1 80       	ldd	r11, Z+1	; 0x01
 bb2:	36 fe       	sbrs	r3, 6
 bb4:	03 c0       	rjmp	.+6      	; 0xbbc <vfprintf+0x146>
 bb6:	69 2d       	mov	r22, r9
 bb8:	70 e0       	ldi	r23, 0x00	; 0
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <vfprintf+0x14a>
 bbc:	6f ef       	ldi	r22, 0xFF	; 255
 bbe:	7f ef       	ldi	r23, 0xFF	; 255
 bc0:	c5 01       	movw	r24, r10
 bc2:	0e 94 27 07 	call	0xe4e	; 0xe4e <strnlen>
 bc6:	4c 01       	movw	r8, r24
 bc8:	82 01       	movw	r16, r4
 bca:	f3 2d       	mov	r31, r3
 bcc:	ff 77       	andi	r31, 0x7F	; 127
 bce:	3f 2e       	mov	r3, r31
 bd0:	16 c0       	rjmp	.+44     	; 0xbfe <vfprintf+0x188>
 bd2:	28 01       	movw	r4, r16
 bd4:	22 e0       	ldi	r18, 0x02	; 2
 bd6:	42 0e       	add	r4, r18
 bd8:	51 1c       	adc	r5, r1
 bda:	f8 01       	movw	r30, r16
 bdc:	a0 80       	ld	r10, Z
 bde:	b1 80       	ldd	r11, Z+1	; 0x01
 be0:	36 fe       	sbrs	r3, 6
 be2:	03 c0       	rjmp	.+6      	; 0xbea <vfprintf+0x174>
 be4:	69 2d       	mov	r22, r9
 be6:	70 e0       	ldi	r23, 0x00	; 0
 be8:	02 c0       	rjmp	.+4      	; 0xbee <vfprintf+0x178>
 bea:	6f ef       	ldi	r22, 0xFF	; 255
 bec:	7f ef       	ldi	r23, 0xFF	; 255
 bee:	c5 01       	movw	r24, r10
 bf0:	0e 94 1c 07 	call	0xe38	; 0xe38 <strnlen_P>
 bf4:	4c 01       	movw	r8, r24
 bf6:	f3 2d       	mov	r31, r3
 bf8:	f0 68       	ori	r31, 0x80	; 128
 bfa:	3f 2e       	mov	r3, r31
 bfc:	82 01       	movw	r16, r4
 bfe:	33 fc       	sbrc	r3, 3
 c00:	1b c0       	rjmp	.+54     	; 0xc38 <vfprintf+0x1c2>
 c02:	82 2d       	mov	r24, r2
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	88 16       	cp	r8, r24
 c08:	99 06       	cpc	r9, r25
 c0a:	b0 f4       	brcc	.+44     	; 0xc38 <vfprintf+0x1c2>
 c0c:	b6 01       	movw	r22, r12
 c0e:	80 e2       	ldi	r24, 0x20	; 32
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 c16:	2a 94       	dec	r2
 c18:	f4 cf       	rjmp	.-24     	; 0xc02 <vfprintf+0x18c>
 c1a:	f5 01       	movw	r30, r10
 c1c:	37 fc       	sbrc	r3, 7
 c1e:	85 91       	lpm	r24, Z+
 c20:	37 fe       	sbrs	r3, 7
 c22:	81 91       	ld	r24, Z+
 c24:	5f 01       	movw	r10, r30
 c26:	b6 01       	movw	r22, r12
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 c2e:	21 10       	cpse	r2, r1
 c30:	2a 94       	dec	r2
 c32:	21 e0       	ldi	r18, 0x01	; 1
 c34:	82 1a       	sub	r8, r18
 c36:	91 08       	sbc	r9, r1
 c38:	81 14       	cp	r8, r1
 c3a:	91 04       	cpc	r9, r1
 c3c:	71 f7       	brne	.-36     	; 0xc1a <vfprintf+0x1a4>
 c3e:	e8 c0       	rjmp	.+464    	; 0xe10 <vfprintf+0x39a>
 c40:	84 36       	cpi	r24, 0x64	; 100
 c42:	11 f0       	breq	.+4      	; 0xc48 <vfprintf+0x1d2>
 c44:	89 36       	cpi	r24, 0x69	; 105
 c46:	41 f5       	brne	.+80     	; 0xc98 <vfprintf+0x222>
 c48:	f8 01       	movw	r30, r16
 c4a:	37 fe       	sbrs	r3, 7
 c4c:	07 c0       	rjmp	.+14     	; 0xc5c <vfprintf+0x1e6>
 c4e:	60 81       	ld	r22, Z
 c50:	71 81       	ldd	r23, Z+1	; 0x01
 c52:	82 81       	ldd	r24, Z+2	; 0x02
 c54:	93 81       	ldd	r25, Z+3	; 0x03
 c56:	0c 5f       	subi	r16, 0xFC	; 252
 c58:	1f 4f       	sbci	r17, 0xFF	; 255
 c5a:	08 c0       	rjmp	.+16     	; 0xc6c <vfprintf+0x1f6>
 c5c:	60 81       	ld	r22, Z
 c5e:	71 81       	ldd	r23, Z+1	; 0x01
 c60:	07 2e       	mov	r0, r23
 c62:	00 0c       	add	r0, r0
 c64:	88 0b       	sbc	r24, r24
 c66:	99 0b       	sbc	r25, r25
 c68:	0e 5f       	subi	r16, 0xFE	; 254
 c6a:	1f 4f       	sbci	r17, 0xFF	; 255
 c6c:	f3 2d       	mov	r31, r3
 c6e:	ff 76       	andi	r31, 0x6F	; 111
 c70:	3f 2e       	mov	r3, r31
 c72:	97 ff       	sbrs	r25, 7
 c74:	09 c0       	rjmp	.+18     	; 0xc88 <vfprintf+0x212>
 c76:	90 95       	com	r25
 c78:	80 95       	com	r24
 c7a:	70 95       	com	r23
 c7c:	61 95       	neg	r22
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	f0 68       	ori	r31, 0x80	; 128
 c86:	3f 2e       	mov	r3, r31
 c88:	2a e0       	ldi	r18, 0x0A	; 10
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	a3 01       	movw	r20, r6
 c8e:	0e 94 32 07 	call	0xe64	; 0xe64 <__ultoa_invert>
 c92:	88 2e       	mov	r8, r24
 c94:	86 18       	sub	r8, r6
 c96:	45 c0       	rjmp	.+138    	; 0xd22 <vfprintf+0x2ac>
 c98:	85 37       	cpi	r24, 0x75	; 117
 c9a:	31 f4       	brne	.+12     	; 0xca8 <vfprintf+0x232>
 c9c:	23 2d       	mov	r18, r3
 c9e:	2f 7e       	andi	r18, 0xEF	; 239
 ca0:	b2 2e       	mov	r11, r18
 ca2:	2a e0       	ldi	r18, 0x0A	; 10
 ca4:	30 e0       	ldi	r19, 0x00	; 0
 ca6:	25 c0       	rjmp	.+74     	; 0xcf2 <vfprintf+0x27c>
 ca8:	93 2d       	mov	r25, r3
 caa:	99 7f       	andi	r25, 0xF9	; 249
 cac:	b9 2e       	mov	r11, r25
 cae:	8f 36       	cpi	r24, 0x6F	; 111
 cb0:	c1 f0       	breq	.+48     	; 0xce2 <vfprintf+0x26c>
 cb2:	18 f4       	brcc	.+6      	; 0xcba <vfprintf+0x244>
 cb4:	88 35       	cpi	r24, 0x58	; 88
 cb6:	79 f0       	breq	.+30     	; 0xcd6 <vfprintf+0x260>
 cb8:	b5 c0       	rjmp	.+362    	; 0xe24 <vfprintf+0x3ae>
 cba:	80 37       	cpi	r24, 0x70	; 112
 cbc:	19 f0       	breq	.+6      	; 0xcc4 <vfprintf+0x24e>
 cbe:	88 37       	cpi	r24, 0x78	; 120
 cc0:	21 f0       	breq	.+8      	; 0xcca <vfprintf+0x254>
 cc2:	b0 c0       	rjmp	.+352    	; 0xe24 <vfprintf+0x3ae>
 cc4:	e9 2f       	mov	r30, r25
 cc6:	e0 61       	ori	r30, 0x10	; 16
 cc8:	be 2e       	mov	r11, r30
 cca:	b4 fe       	sbrs	r11, 4
 ccc:	0d c0       	rjmp	.+26     	; 0xce8 <vfprintf+0x272>
 cce:	fb 2d       	mov	r31, r11
 cd0:	f4 60       	ori	r31, 0x04	; 4
 cd2:	bf 2e       	mov	r11, r31
 cd4:	09 c0       	rjmp	.+18     	; 0xce8 <vfprintf+0x272>
 cd6:	34 fe       	sbrs	r3, 4
 cd8:	0a c0       	rjmp	.+20     	; 0xcee <vfprintf+0x278>
 cda:	29 2f       	mov	r18, r25
 cdc:	26 60       	ori	r18, 0x06	; 6
 cde:	b2 2e       	mov	r11, r18
 ce0:	06 c0       	rjmp	.+12     	; 0xcee <vfprintf+0x278>
 ce2:	28 e0       	ldi	r18, 0x08	; 8
 ce4:	30 e0       	ldi	r19, 0x00	; 0
 ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <vfprintf+0x27c>
 ce8:	20 e1       	ldi	r18, 0x10	; 16
 cea:	30 e0       	ldi	r19, 0x00	; 0
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <vfprintf+0x27c>
 cee:	20 e1       	ldi	r18, 0x10	; 16
 cf0:	32 e0       	ldi	r19, 0x02	; 2
 cf2:	f8 01       	movw	r30, r16
 cf4:	b7 fe       	sbrs	r11, 7
 cf6:	07 c0       	rjmp	.+14     	; 0xd06 <vfprintf+0x290>
 cf8:	60 81       	ld	r22, Z
 cfa:	71 81       	ldd	r23, Z+1	; 0x01
 cfc:	82 81       	ldd	r24, Z+2	; 0x02
 cfe:	93 81       	ldd	r25, Z+3	; 0x03
 d00:	0c 5f       	subi	r16, 0xFC	; 252
 d02:	1f 4f       	sbci	r17, 0xFF	; 255
 d04:	06 c0       	rjmp	.+12     	; 0xd12 <vfprintf+0x29c>
 d06:	60 81       	ld	r22, Z
 d08:	71 81       	ldd	r23, Z+1	; 0x01
 d0a:	80 e0       	ldi	r24, 0x00	; 0
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	0e 5f       	subi	r16, 0xFE	; 254
 d10:	1f 4f       	sbci	r17, 0xFF	; 255
 d12:	a3 01       	movw	r20, r6
 d14:	0e 94 32 07 	call	0xe64	; 0xe64 <__ultoa_invert>
 d18:	88 2e       	mov	r8, r24
 d1a:	86 18       	sub	r8, r6
 d1c:	fb 2d       	mov	r31, r11
 d1e:	ff 77       	andi	r31, 0x7F	; 127
 d20:	3f 2e       	mov	r3, r31
 d22:	36 fe       	sbrs	r3, 6
 d24:	0d c0       	rjmp	.+26     	; 0xd40 <vfprintf+0x2ca>
 d26:	23 2d       	mov	r18, r3
 d28:	2e 7f       	andi	r18, 0xFE	; 254
 d2a:	a2 2e       	mov	r10, r18
 d2c:	89 14       	cp	r8, r9
 d2e:	58 f4       	brcc	.+22     	; 0xd46 <vfprintf+0x2d0>
 d30:	34 fe       	sbrs	r3, 4
 d32:	0b c0       	rjmp	.+22     	; 0xd4a <vfprintf+0x2d4>
 d34:	32 fc       	sbrc	r3, 2
 d36:	09 c0       	rjmp	.+18     	; 0xd4a <vfprintf+0x2d4>
 d38:	83 2d       	mov	r24, r3
 d3a:	8e 7e       	andi	r24, 0xEE	; 238
 d3c:	a8 2e       	mov	r10, r24
 d3e:	05 c0       	rjmp	.+10     	; 0xd4a <vfprintf+0x2d4>
 d40:	b8 2c       	mov	r11, r8
 d42:	a3 2c       	mov	r10, r3
 d44:	03 c0       	rjmp	.+6      	; 0xd4c <vfprintf+0x2d6>
 d46:	b8 2c       	mov	r11, r8
 d48:	01 c0       	rjmp	.+2      	; 0xd4c <vfprintf+0x2d6>
 d4a:	b9 2c       	mov	r11, r9
 d4c:	a4 fe       	sbrs	r10, 4
 d4e:	0f c0       	rjmp	.+30     	; 0xd6e <vfprintf+0x2f8>
 d50:	fe 01       	movw	r30, r28
 d52:	e8 0d       	add	r30, r8
 d54:	f1 1d       	adc	r31, r1
 d56:	80 81       	ld	r24, Z
 d58:	80 33       	cpi	r24, 0x30	; 48
 d5a:	21 f4       	brne	.+8      	; 0xd64 <vfprintf+0x2ee>
 d5c:	9a 2d       	mov	r25, r10
 d5e:	99 7e       	andi	r25, 0xE9	; 233
 d60:	a9 2e       	mov	r10, r25
 d62:	09 c0       	rjmp	.+18     	; 0xd76 <vfprintf+0x300>
 d64:	a2 fe       	sbrs	r10, 2
 d66:	06 c0       	rjmp	.+12     	; 0xd74 <vfprintf+0x2fe>
 d68:	b3 94       	inc	r11
 d6a:	b3 94       	inc	r11
 d6c:	04 c0       	rjmp	.+8      	; 0xd76 <vfprintf+0x300>
 d6e:	8a 2d       	mov	r24, r10
 d70:	86 78       	andi	r24, 0x86	; 134
 d72:	09 f0       	breq	.+2      	; 0xd76 <vfprintf+0x300>
 d74:	b3 94       	inc	r11
 d76:	a3 fc       	sbrc	r10, 3
 d78:	11 c0       	rjmp	.+34     	; 0xd9c <vfprintf+0x326>
 d7a:	a0 fe       	sbrs	r10, 0
 d7c:	06 c0       	rjmp	.+12     	; 0xd8a <vfprintf+0x314>
 d7e:	b2 14       	cp	r11, r2
 d80:	88 f4       	brcc	.+34     	; 0xda4 <vfprintf+0x32e>
 d82:	28 0c       	add	r2, r8
 d84:	92 2c       	mov	r9, r2
 d86:	9b 18       	sub	r9, r11
 d88:	0e c0       	rjmp	.+28     	; 0xda6 <vfprintf+0x330>
 d8a:	b2 14       	cp	r11, r2
 d8c:	60 f4       	brcc	.+24     	; 0xda6 <vfprintf+0x330>
 d8e:	b6 01       	movw	r22, r12
 d90:	80 e2       	ldi	r24, 0x20	; 32
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 d98:	b3 94       	inc	r11
 d9a:	f7 cf       	rjmp	.-18     	; 0xd8a <vfprintf+0x314>
 d9c:	b2 14       	cp	r11, r2
 d9e:	18 f4       	brcc	.+6      	; 0xda6 <vfprintf+0x330>
 da0:	2b 18       	sub	r2, r11
 da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0x332>
 da4:	98 2c       	mov	r9, r8
 da6:	21 2c       	mov	r2, r1
 da8:	a4 fe       	sbrs	r10, 4
 daa:	10 c0       	rjmp	.+32     	; 0xdcc <vfprintf+0x356>
 dac:	b6 01       	movw	r22, r12
 dae:	80 e3       	ldi	r24, 0x30	; 48
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 db6:	a2 fe       	sbrs	r10, 2
 db8:	17 c0       	rjmp	.+46     	; 0xde8 <vfprintf+0x372>
 dba:	a1 fc       	sbrc	r10, 1
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <vfprintf+0x34e>
 dbe:	88 e7       	ldi	r24, 0x78	; 120
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x352>
 dc4:	88 e5       	ldi	r24, 0x58	; 88
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	b6 01       	movw	r22, r12
 dca:	0c c0       	rjmp	.+24     	; 0xde4 <vfprintf+0x36e>
 dcc:	8a 2d       	mov	r24, r10
 dce:	86 78       	andi	r24, 0x86	; 134
 dd0:	59 f0       	breq	.+22     	; 0xde8 <vfprintf+0x372>
 dd2:	a1 fe       	sbrs	r10, 1
 dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x364>
 dd6:	8b e2       	ldi	r24, 0x2B	; 43
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <vfprintf+0x366>
 dda:	80 e2       	ldi	r24, 0x20	; 32
 ddc:	a7 fc       	sbrc	r10, 7
 dde:	8d e2       	ldi	r24, 0x2D	; 45
 de0:	b6 01       	movw	r22, r12
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 de8:	89 14       	cp	r8, r9
 dea:	38 f4       	brcc	.+14     	; 0xdfa <vfprintf+0x384>
 dec:	b6 01       	movw	r22, r12
 dee:	80 e3       	ldi	r24, 0x30	; 48
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 df6:	9a 94       	dec	r9
 df8:	f7 cf       	rjmp	.-18     	; 0xde8 <vfprintf+0x372>
 dfa:	8a 94       	dec	r8
 dfc:	f3 01       	movw	r30, r6
 dfe:	e8 0d       	add	r30, r8
 e00:	f1 1d       	adc	r31, r1
 e02:	80 81       	ld	r24, Z
 e04:	b6 01       	movw	r22, r12
 e06:	90 e0       	ldi	r25, 0x00	; 0
 e08:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 e0c:	81 10       	cpse	r8, r1
 e0e:	f5 cf       	rjmp	.-22     	; 0xdfa <vfprintf+0x384>
 e10:	22 20       	and	r2, r2
 e12:	09 f4       	brne	.+2      	; 0xe16 <vfprintf+0x3a0>
 e14:	42 ce       	rjmp	.-892    	; 0xa9a <vfprintf+0x24>
 e16:	b6 01       	movw	r22, r12
 e18:	80 e2       	ldi	r24, 0x20	; 32
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 e20:	2a 94       	dec	r2
 e22:	f6 cf       	rjmp	.-20     	; 0xe10 <vfprintf+0x39a>
 e24:	f6 01       	movw	r30, r12
 e26:	86 81       	ldd	r24, Z+6	; 0x06
 e28:	97 81       	ldd	r25, Z+7	; 0x07
 e2a:	02 c0       	rjmp	.+4      	; 0xe30 <vfprintf+0x3ba>
 e2c:	8f ef       	ldi	r24, 0xFF	; 255
 e2e:	9f ef       	ldi	r25, 0xFF	; 255
 e30:	2b 96       	adiw	r28, 0x0b	; 11
 e32:	e2 e1       	ldi	r30, 0x12	; 18
 e34:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__epilogue_restores__>

00000e38 <strnlen_P>:
 e38:	fc 01       	movw	r30, r24
 e3a:	05 90       	lpm	r0, Z+
 e3c:	61 50       	subi	r22, 0x01	; 1
 e3e:	70 40       	sbci	r23, 0x00	; 0
 e40:	01 10       	cpse	r0, r1
 e42:	d8 f7       	brcc	.-10     	; 0xe3a <strnlen_P+0x2>
 e44:	80 95       	com	r24
 e46:	90 95       	com	r25
 e48:	8e 0f       	add	r24, r30
 e4a:	9f 1f       	adc	r25, r31
 e4c:	08 95       	ret

00000e4e <strnlen>:
 e4e:	fc 01       	movw	r30, r24
 e50:	61 50       	subi	r22, 0x01	; 1
 e52:	70 40       	sbci	r23, 0x00	; 0
 e54:	01 90       	ld	r0, Z+
 e56:	01 10       	cpse	r0, r1
 e58:	d8 f7       	brcc	.-10     	; 0xe50 <strnlen+0x2>
 e5a:	80 95       	com	r24
 e5c:	90 95       	com	r25
 e5e:	8e 0f       	add	r24, r30
 e60:	9f 1f       	adc	r25, r31
 e62:	08 95       	ret

00000e64 <__ultoa_invert>:
 e64:	fa 01       	movw	r30, r20
 e66:	aa 27       	eor	r26, r26
 e68:	28 30       	cpi	r18, 0x08	; 8
 e6a:	51 f1       	breq	.+84     	; 0xec0 <__ultoa_invert+0x5c>
 e6c:	20 31       	cpi	r18, 0x10	; 16
 e6e:	81 f1       	breq	.+96     	; 0xed0 <__ultoa_invert+0x6c>
 e70:	e8 94       	clt
 e72:	6f 93       	push	r22
 e74:	6e 7f       	andi	r22, 0xFE	; 254
 e76:	6e 5f       	subi	r22, 0xFE	; 254
 e78:	7f 4f       	sbci	r23, 0xFF	; 255
 e7a:	8f 4f       	sbci	r24, 0xFF	; 255
 e7c:	9f 4f       	sbci	r25, 0xFF	; 255
 e7e:	af 4f       	sbci	r26, 0xFF	; 255
 e80:	b1 e0       	ldi	r27, 0x01	; 1
 e82:	3e d0       	rcall	.+124    	; 0xf00 <__ultoa_invert+0x9c>
 e84:	b4 e0       	ldi	r27, 0x04	; 4
 e86:	3c d0       	rcall	.+120    	; 0xf00 <__ultoa_invert+0x9c>
 e88:	67 0f       	add	r22, r23
 e8a:	78 1f       	adc	r23, r24
 e8c:	89 1f       	adc	r24, r25
 e8e:	9a 1f       	adc	r25, r26
 e90:	a1 1d       	adc	r26, r1
 e92:	68 0f       	add	r22, r24
 e94:	79 1f       	adc	r23, r25
 e96:	8a 1f       	adc	r24, r26
 e98:	91 1d       	adc	r25, r1
 e9a:	a1 1d       	adc	r26, r1
 e9c:	6a 0f       	add	r22, r26
 e9e:	71 1d       	adc	r23, r1
 ea0:	81 1d       	adc	r24, r1
 ea2:	91 1d       	adc	r25, r1
 ea4:	a1 1d       	adc	r26, r1
 ea6:	20 d0       	rcall	.+64     	; 0xee8 <__ultoa_invert+0x84>
 ea8:	09 f4       	brne	.+2      	; 0xeac <__ultoa_invert+0x48>
 eaa:	68 94       	set
 eac:	3f 91       	pop	r19
 eae:	2a e0       	ldi	r18, 0x0A	; 10
 eb0:	26 9f       	mul	r18, r22
 eb2:	11 24       	eor	r1, r1
 eb4:	30 19       	sub	r19, r0
 eb6:	30 5d       	subi	r19, 0xD0	; 208
 eb8:	31 93       	st	Z+, r19
 eba:	de f6       	brtc	.-74     	; 0xe72 <__ultoa_invert+0xe>
 ebc:	cf 01       	movw	r24, r30
 ebe:	08 95       	ret
 ec0:	46 2f       	mov	r20, r22
 ec2:	47 70       	andi	r20, 0x07	; 7
 ec4:	40 5d       	subi	r20, 0xD0	; 208
 ec6:	41 93       	st	Z+, r20
 ec8:	b3 e0       	ldi	r27, 0x03	; 3
 eca:	0f d0       	rcall	.+30     	; 0xeea <__ultoa_invert+0x86>
 ecc:	c9 f7       	brne	.-14     	; 0xec0 <__ultoa_invert+0x5c>
 ece:	f6 cf       	rjmp	.-20     	; 0xebc <__ultoa_invert+0x58>
 ed0:	46 2f       	mov	r20, r22
 ed2:	4f 70       	andi	r20, 0x0F	; 15
 ed4:	40 5d       	subi	r20, 0xD0	; 208
 ed6:	4a 33       	cpi	r20, 0x3A	; 58
 ed8:	18 f0       	brcs	.+6      	; 0xee0 <__ultoa_invert+0x7c>
 eda:	49 5d       	subi	r20, 0xD9	; 217
 edc:	31 fd       	sbrc	r19, 1
 ede:	40 52       	subi	r20, 0x20	; 32
 ee0:	41 93       	st	Z+, r20
 ee2:	02 d0       	rcall	.+4      	; 0xee8 <__ultoa_invert+0x84>
 ee4:	a9 f7       	brne	.-22     	; 0xed0 <__ultoa_invert+0x6c>
 ee6:	ea cf       	rjmp	.-44     	; 0xebc <__ultoa_invert+0x58>
 ee8:	b4 e0       	ldi	r27, 0x04	; 4
 eea:	a6 95       	lsr	r26
 eec:	97 95       	ror	r25
 eee:	87 95       	ror	r24
 ef0:	77 95       	ror	r23
 ef2:	67 95       	ror	r22
 ef4:	ba 95       	dec	r27
 ef6:	c9 f7       	brne	.-14     	; 0xeea <__ultoa_invert+0x86>
 ef8:	00 97       	sbiw	r24, 0x00	; 0
 efa:	61 05       	cpc	r22, r1
 efc:	71 05       	cpc	r23, r1
 efe:	08 95       	ret
 f00:	9b 01       	movw	r18, r22
 f02:	ac 01       	movw	r20, r24
 f04:	0a 2e       	mov	r0, r26
 f06:	06 94       	lsr	r0
 f08:	57 95       	ror	r21
 f0a:	47 95       	ror	r20
 f0c:	37 95       	ror	r19
 f0e:	27 95       	ror	r18
 f10:	ba 95       	dec	r27
 f12:	c9 f7       	brne	.-14     	; 0xf06 <__ultoa_invert+0xa2>
 f14:	62 0f       	add	r22, r18
 f16:	73 1f       	adc	r23, r19
 f18:	84 1f       	adc	r24, r20
 f1a:	95 1f       	adc	r25, r21
 f1c:	a0 1d       	adc	r26, r0
 f1e:	08 95       	ret

00000f20 <__prologue_saves__>:
 f20:	2f 92       	push	r2
 f22:	3f 92       	push	r3
 f24:	4f 92       	push	r4
 f26:	5f 92       	push	r5
 f28:	6f 92       	push	r6
 f2a:	7f 92       	push	r7
 f2c:	8f 92       	push	r8
 f2e:	9f 92       	push	r9
 f30:	af 92       	push	r10
 f32:	bf 92       	push	r11
 f34:	cf 92       	push	r12
 f36:	df 92       	push	r13
 f38:	ef 92       	push	r14
 f3a:	ff 92       	push	r15
 f3c:	0f 93       	push	r16
 f3e:	1f 93       	push	r17
 f40:	cf 93       	push	r28
 f42:	df 93       	push	r29
 f44:	cd b7       	in	r28, 0x3d	; 61
 f46:	de b7       	in	r29, 0x3e	; 62
 f48:	ca 1b       	sub	r28, r26
 f4a:	db 0b       	sbc	r29, r27
 f4c:	0f b6       	in	r0, 0x3f	; 63
 f4e:	f8 94       	cli
 f50:	de bf       	out	0x3e, r29	; 62
 f52:	0f be       	out	0x3f, r0	; 63
 f54:	cd bf       	out	0x3d, r28	; 61
 f56:	09 94       	ijmp

00000f58 <__epilogue_restores__>:
 f58:	2a 88       	ldd	r2, Y+18	; 0x12
 f5a:	39 88       	ldd	r3, Y+17	; 0x11
 f5c:	48 88       	ldd	r4, Y+16	; 0x10
 f5e:	5f 84       	ldd	r5, Y+15	; 0x0f
 f60:	6e 84       	ldd	r6, Y+14	; 0x0e
 f62:	7d 84       	ldd	r7, Y+13	; 0x0d
 f64:	8c 84       	ldd	r8, Y+12	; 0x0c
 f66:	9b 84       	ldd	r9, Y+11	; 0x0b
 f68:	aa 84       	ldd	r10, Y+10	; 0x0a
 f6a:	b9 84       	ldd	r11, Y+9	; 0x09
 f6c:	c8 84       	ldd	r12, Y+8	; 0x08
 f6e:	df 80       	ldd	r13, Y+7	; 0x07
 f70:	ee 80       	ldd	r14, Y+6	; 0x06
 f72:	fd 80       	ldd	r15, Y+5	; 0x05
 f74:	0c 81       	ldd	r16, Y+4	; 0x04
 f76:	1b 81       	ldd	r17, Y+3	; 0x03
 f78:	aa 81       	ldd	r26, Y+2	; 0x02
 f7a:	b9 81       	ldd	r27, Y+1	; 0x01
 f7c:	ce 0f       	add	r28, r30
 f7e:	d1 1d       	adc	r29, r1
 f80:	0f b6       	in	r0, 0x3f	; 63
 f82:	f8 94       	cli
 f84:	de bf       	out	0x3e, r29	; 62
 f86:	0f be       	out	0x3f, r0	; 63
 f88:	cd bf       	out	0x3d, r28	; 61
 f8a:	ed 01       	movw	r28, r26
 f8c:	08 95       	ret

00000f8e <_exit>:
 f8e:	f8 94       	cli

00000f90 <__stop_program>:
 f90:	ff cf       	rjmp	.-2      	; 0xf90 <__stop_program>
