
Dareduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000088a  0000091e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800136  00800136  00000954  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f8c  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1f  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075b  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000447  00000000  00000000  00003276  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000036bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  9e:	0c 94 43 04 	jmp	0x886	; 0x886 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <onTask>:

void onTask(void)
{
	while (1)
	{	
		printf("onTask\n");
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 13 04 	call	0x826	; 0x826 <puts>
		pinWrite(13,1);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinWrite>
  ba:	f5 cf       	rjmp	.-22     	; 0xa6 <onTask>

000000bc <offTask>:

void offTask(void)
{
	while (1)
	{	
		printf("offTask\n");
  bc:	8b e1       	ldi	r24, 0x1B	; 27
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 13 04 	call	0x826	; 0x826 <puts>
		pinWrite(13,0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pinWrite>
  d0:	f5 cf       	rjmp	.-22     	; 0xbc <offTask>

000000d2 <main>:
void onTask(void);
void offTask(void);

int main (void)
{
	init_print ();
  d2:	0e 94 a1 02 	call	0x542	; 0x542 <init_print>
	pinConfig(13,OUTPUT);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 86 00 	call	0x10c	; 0x10c <pinConfig>
	
	OSinit();
  e2:	0e 94 2e 01 	call	0x25c	; 0x25c <OSinit>
	
	createTask(&onTask, 1, 50);
  e6:	42 e3       	ldi	r20, 0x32	; 50
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	83 e5       	ldi	r24, 0x53	; 83
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 4e 01 	call	0x29c	; 0x29c <createTask>
	createTask(&offTask, 2, 50);
  f4:	42 e3       	ldi	r20, 0x32	; 50
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	8e e5       	ldi	r24, 0x5E	; 94
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 4e 01 	call	0x29c	; 0x29c <createTask>

	OSlaunch();
 102:	0e 94 42 01 	call	0x284	; 0x284 <OSlaunch>
	
	return 0;
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret

0000010c <pinConfig>:
#include "gpio.h"

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	91 05       	cpc	r25, r1
 110:	00 f5       	brcc	.+64     	; 0x152 <pinConfig+0x46>
	{
		if(io == OUTPUT)
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	71 05       	cpc	r23, r1
 116:	69 f4       	brne	.+26     	; 0x132 <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
 118:	4a b1       	in	r20, 0x0a	; 10
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <pinConfig+0x1a>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	8a 95       	dec	r24
 128:	e2 f7       	brpl	.-8      	; 0x122 <pinConfig+0x16>
 12a:	cb 01       	movw	r24, r22
 12c:	84 2b       	or	r24, r20
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	08 95       	ret
		}
		
		if(io == INPUT)
 132:	67 2b       	or	r22, r23
 134:	a9 f5       	brne	.+106    	; 0x1a0 <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
 136:	4a b1       	in	r20, 0x0a	; 10
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <pinConfig+0x38>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <pinConfig+0x34>
 148:	cb 01       	movw	r24, r22
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
 152:	9c 01       	movw	r18, r24
 154:	28 50       	subi	r18, 0x08	; 8
 156:	31 09       	sbc	r19, r1
 158:	26 30       	cpi	r18, 0x06	; 6
 15a:	31 05       	cpc	r19, r1
 15c:	08 f5       	brcc	.+66     	; 0x1a0 <pinConfig+0x94>
	{
		if(io == OUTPUT)
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	71 05       	cpc	r23, r1
 162:	71 f4       	brne	.+28     	; 0x180 <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
 164:	44 b1       	in	r20, 0x04	; 4
 166:	c9 01       	movw	r24, r18
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	b9 01       	movw	r22, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <pinConfig+0x68>
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	8a 95       	dec	r24
 176:	e2 f7       	brpl	.-8      	; 0x170 <pinConfig+0x64>
 178:	cb 01       	movw	r24, r22
 17a:	84 2b       	or	r24, r20
 17c:	84 b9       	out	0x04, r24	; 4
 17e:	08 95       	ret
		}
		
		if(io == INPUT)
 180:	67 2b       	or	r22, r23
 182:	71 f4       	brne	.+28     	; 0x1a0 <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
 184:	44 b1       	in	r20, 0x04	; 4
 186:	08 97       	sbiw	r24, 0x08	; 8
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	b9 01       	movw	r22, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <pinConfig+0x88>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	8a 95       	dec	r24
 196:	e2 f7       	brpl	.-8      	; 0x190 <pinConfig+0x84>
 198:	cb 01       	movw	r24, r22
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	84 b9       	out	0x04, r24	; 4
 1a0:	08 95       	ret

000001a2 <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	91 05       	cpc	r25, r1
 1a6:	20 f5       	brcc	.+72     	; 0x1f0 <pinWrite+0x4e>
	{
		if (val > 0)
 1a8:	16 16       	cp	r1, r22
 1aa:	17 06       	cpc	r1, r23
 1ac:	5c f4       	brge	.+22     	; 0x1c4 <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
 1ae:	4b b1       	in	r20, 0x0b	; 11
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	08 2e       	mov	r0, r24
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <pinWrite+0x1a>
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <pinWrite+0x16>
 1c0:	24 2b       	or	r18, r20
 1c2:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	99 f4       	brne	.+38     	; 0x1f0 <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
 1ca:	4b b1       	in	r20, 0x0b	; 11
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	08 2e       	mov	r0, r24
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <pinWrite+0x36>
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <pinWrite+0x32>
 1dc:	20 95       	com	r18
 1de:	24 23       	and	r18, r20
 1e0:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
 1e2:	9c 01       	movw	r18, r24
 1e4:	28 50       	subi	r18, 0x08	; 8
 1e6:	31 09       	sbc	r19, r1
 1e8:	26 30       	cpi	r18, 0x06	; 6
 1ea:	31 05       	cpc	r19, r1
 1ec:	b8 f0       	brcs	.+46     	; 0x21c <pinWrite+0x7a>
 1ee:	08 95       	ret
 1f0:	9c 01       	movw	r18, r24
 1f2:	28 50       	subi	r18, 0x08	; 8
 1f4:	31 09       	sbc	r19, r1
 1f6:	26 30       	cpi	r18, 0x06	; 6
 1f8:	31 05       	cpc	r19, r1
 1fa:	f0 f4       	brcc	.+60     	; 0x238 <pinWrite+0x96>
	{
		if (val > 0)
 1fc:	16 16       	cp	r1, r22
 1fe:	17 06       	cpc	r1, r23
 200:	5c f4       	brge	.+22     	; 0x218 <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
 202:	45 b1       	in	r20, 0x05	; 5
 204:	f9 01       	movw	r30, r18
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <pinWrite+0x6e>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	ea 95       	dec	r30
 212:	e2 f7       	brpl	.-8      	; 0x20c <pinWrite+0x6a>
 214:	24 2b       	or	r18, r20
 216:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
 218:	67 2b       	or	r22, r23
 21a:	71 f4       	brne	.+28     	; 0x238 <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
 21c:	45 b1       	in	r20, 0x05	; 5
 21e:	08 97       	sbiw	r24, 0x08	; 8
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <pinWrite+0x8a>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <pinWrite+0x86>
 230:	cb 01       	movw	r24, r22
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	85 b9       	out	0x05, r24	; 5
 238:	08 95       	ret

0000023a <timerInit>:
void TIMER1_COMPA_vect (void) __attribute__ ((signal,naked));
void taskScheduler(void) __attribute__((naked));

void timerInit(void) 
{
    TCCR1B |= (1<<WGM12) | (1<<CS12);
 23a:	e1 e8       	ldi	r30, 0x81	; 129
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	8c 60       	ori	r24, 0x0C	; 12
 242:	80 83       	st	Z, r24
    TIMSK1 |= ( 1 << OCIE1A );
 244:	ef e6       	ldi	r30, 0x6F	; 111
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
	OCR1A = 61500;   
 24e:	8c e3       	ldi	r24, 0x3C	; 60
 250:	90 ef       	ldi	r25, 0xF0	; 240
 252:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 25a:	08 95       	ret

0000025c <OSinit>:
  }
}

void OSinit(void)
{
	cli();
 25c:	f8 94       	cli
	timerInit();
 25e:	0e 94 1d 01 	call	0x23a	; 0x23a <timerInit>
	head->next = NULL;
 262:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <head>
 266:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <head+0x1>
 26a:	17 82       	std	Z+7, r1	; 0x07
 26c:	16 82       	std	Z+6, r1	; 0x06
	head->status = HEAD;
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	82 87       	std	Z+10, r24	; 0x0a
	runPt = head;
 272:	f0 93 39 01 	sts	0x0139, r31	; 0x800139 <runPt+0x1>
 276:	e0 93 38 01 	sts	0x0138, r30	; 0x800138 <runPt>
	stackUsed = 0;
 27a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <stackUsed+0x1>
 27e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <stackUsed>
 282:	08 95       	ret

00000284 <OSlaunch>:
}

void OSlaunch(void)
{
  currSp = &mainSp;
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 28c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
  sei();
 290:	78 94       	sei
  while(1)
  {
	  printf("Scheduler running\n");
 292:	83 e2       	ldi	r24, 0x23	; 35
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 13 04 	call	0x826	; 0x826 <puts>
 29a:	fb cf       	rjmp	.-10     	; 0x292 <OSlaunch+0xe>

0000029c <createTask>:
  }
}

void createTask(void(*fPtr)(void), uint8_t priority, uint16_t stack_size)
{ 
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	7c 01       	movw	r14, r24
 2a8:	16 2f       	mov	r17, r22
 2aa:	ea 01       	movw	r28, r20
  newTask = (taskTCB *)malloc(sizeof(taskTCB));
 2ac:	8b e0       	ldi	r24, 0x0B	; 11
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 b6 02 	call	0x56c	; 0x56c <malloc>
 2b4:	fc 01       	movw	r30, r24
 2b6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <newTask+0x1>
 2ba:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <newTask>
  newTask->fnPtr = fPtr;
 2be:	f1 82       	std	Z+1, r15	; 0x01
 2c0:	e0 82       	st	Z, r14
  newTask->priority = priority;
 2c2:	14 83       	std	Z+4, r17	; 0x04
  newTask->neverRun = TRUE;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	85 83       	std	Z+5, r24	; 0x05
  newTask->status = RUN;
 2c8:	12 86       	std	Z+10, r1	; 0x0a
  newTask->sP = USER_STACK_SPACE - stackUsed;
 2ca:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <stackUsed>
 2ce:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <stackUsed+0x1>
 2d2:	8b e9       	ldi	r24, 0x9B	; 155
 2d4:	98 e0       	ldi	r25, 0x08	; 8
 2d6:	82 1b       	sub	r24, r18
 2d8:	93 0b       	sbc	r25, r19
 2da:	93 83       	std	Z+3, r25	; 0x03
 2dc:	82 83       	std	Z+2, r24	; 0x02
  stackUsed += stack_size;
 2de:	c2 0f       	add	r28, r18
 2e0:	d3 1f       	adc	r29, r19
 2e2:	d0 93 3f 01 	sts	0x013F, r29	; 0x80013f <stackUsed+0x1>
 2e6:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <stackUsed>
  
  newTask->next = head->next;
 2ea:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <head>
 2ee:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <head+0x1>
 2f2:	16 96       	adiw	r26, 0x06	; 6
 2f4:	8d 91       	ld	r24, X+
 2f6:	9c 91       	ld	r25, X
 2f8:	17 97       	sbiw	r26, 0x07	; 7
 2fa:	97 83       	std	Z+7, r25	; 0x07
 2fc:	86 83       	std	Z+6, r24	; 0x06
  head->next = newTask;
 2fe:	17 96       	adiw	r26, 0x07	; 7
 300:	fc 93       	st	X, r31
 302:	ee 93       	st	-X, r30
 304:	16 97       	sbiw	r26, 0x06	; 6
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	08 95       	ret

00000312 <taskScheduler>:

void taskScheduler(void)
{
  if(runPt->status == HEAD)
 312:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <runPt>
 316:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <runPt+0x1>
 31a:	82 85       	ldd	r24, Z+10	; 0x0a
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	39 f4       	brne	.+14     	; 0x32e <taskScheduler+0x1c>
  {
	  runPt = runPt->next;
 320:	86 81       	ldd	r24, Z+6	; 0x06
 322:	97 81       	ldd	r25, Z+7	; 0x07
 324:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <runPt+0x1>
 328:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <runPt>
 32c:	13 c0       	rjmp	.+38     	; 0x354 <taskScheduler+0x42>
  }
  else if(runPt->next == NULL)
 32e:	86 81       	ldd	r24, Z+6	; 0x06
 330:	97 81       	ldd	r25, Z+7	; 0x07
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	59 f4       	brne	.+22     	; 0x34c <taskScheduler+0x3a>
  {
	  runPt = head->next;
 336:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <head>
 33a:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <head+0x1>
 33e:	86 81       	ldd	r24, Z+6	; 0x06
 340:	97 81       	ldd	r25, Z+7	; 0x07
 342:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <runPt+0x1>
 346:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <runPt>
 34a:	04 c0       	rjmp	.+8      	; 0x354 <taskScheduler+0x42>
  }
  else
  {
	  runPt = runPt->next;
 34c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <runPt+0x1>
 350:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <runPt>
  }
  asm volatile("ret");	
 354:	08 95       	ret

00000356 <__vector_11>:
	OCR1A = 61500;   
}

void TIMER1_COMPA_vect ( void )
{
  saveContext();
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	0f 92       	push	r0
 35e:	1f 92       	push	r1
 360:	2f 92       	push	r2
 362:	3f 92       	push	r3
 364:	4f 92       	push	r4
 366:	5f 92       	push	r5
 368:	6f 92       	push	r6
 36a:	7f 92       	push	r7
 36c:	8f 92       	push	r8
 36e:	9f 92       	push	r9
 370:	af 92       	push	r10
 372:	bf 92       	push	r11
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
 39c:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <__data_end>
 3a0:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <__data_end+0x1>
 3a4:	0d b6       	in	r0, 0x3d	; 61
 3a6:	0d 92       	st	X+, r0
 3a8:	0e b6       	in	r0, 0x3e	; 62
 3aa:	0d 92       	st	X+, r0
  taskScheduler();	
 3ac:	0e 94 89 01 	call	0x312	; 0x312 <taskScheduler>
  currSp = &(runPt->sP);
 3b0:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <runPt>
 3b4:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <runPt+0x1>
 3b8:	cf 01       	movw	r24, r30
 3ba:	02 96       	adiw	r24, 0x02	; 2
 3bc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 3c0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
  loadStackPointer();
 3c4:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <__data_end>
 3c8:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <__data_end+0x1>
 3cc:	cd 91       	ld	r28, X+
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	dd 91       	ld	r29, X+
 3d2:	de bf       	out	0x3e, r29	; 62
		  
  if(runPt->neverRun == TRUE)
 3d4:	85 81       	ldd	r24, Z+5	; 0x05
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	59 f4       	brne	.+22     	; 0x3f0 <__vector_11+0x9a>
  {
	sei();
 3da:	78 94       	sei
	runPt->neverRun = FALSE;
 3dc:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <runPt>
 3e0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <runPt+0x1>
 3e4:	15 82       	std	Z+5, r1	; 0x05
	runPt->fnPtr();
 3e6:	01 90       	ld	r0, Z+
 3e8:	f0 81       	ld	r31, Z
 3ea:	e0 2d       	mov	r30, r0
 3ec:	09 95       	icall
 3ee:	2b c0       	rjmp	.+86     	; 0x446 <uart_putch>
  } 
  else 
  {	  
	restoreContext();
 3f0:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <__data_end>
 3f4:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <__data_end+0x1>
 3f8:	cd 91       	ld	r28, X+
 3fa:	cd bf       	out	0x3d, r28	; 61
 3fc:	dd 91       	ld	r29, X+
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	7f 90       	pop	r7
 432:	6f 90       	pop	r6
 434:	5f 90       	pop	r5
 436:	4f 90       	pop	r4
 438:	3f 90       	pop	r3
 43a:	2f 90       	pop	r2
 43c:	1f 90       	pop	r1
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
	asm volatile ("reti");			  
 444:	18 95       	reti

00000446 <uart_putch>:
	while ( UCSR0A & (1<<RXC0) )
	dummy =  UDR0;
}

int uart_putch ( char ch, FILE *stream )
{
 446:	cf 93       	push	r28
 448:	c8 2f       	mov	r28, r24
	if ( ch == '\n' )
 44a:	8a 30       	cpi	r24, 0x0A	; 10
 44c:	19 f4       	brne	.+6      	; 0x454 <uart_putch+0xe>
	uart_putch ( '\r', stream );
 44e:	8d e0       	ldi	r24, 0x0D	; 13
 450:	0e 94 23 02 	call	0x446	; 0x446 <uart_putch>
	while (!(UCSR0A & (1<<UDRE0)));
 454:	e0 ec       	ldi	r30, 0xC0	; 192
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	85 ff       	sbrs	r24, 5
 45c:	fd cf       	rjmp	.-6      	; 0x458 <uart_putch+0x12>
	UDR0=ch;
 45e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <uart_getch>:

int uart_getch ( FILE *stream )
{
	unsigned char ch = '\0';
	while ( !(UCSR0A & (1<<RXC0)));
 46a:	e0 ec       	ldi	r30, 0xC0	; 192
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	88 23       	and	r24, r24
 472:	ec f7       	brge	.-6      	; 0x46e <uart_getch+0x4>
	ch = UDR0;
 474:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	return ch;
}
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	08 95       	ret

0000047c <uart_init>:

FILE uart_str = FDEV_SETUP_STREAM ( uart_putch, uart_getch, _FDEV_SETUP_RW );

void uart_init ( void )
{
	UBRR0H = (((F_CPU/BAUD)/16)-1)>>8;
 47c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (((F_CPU/BAUD)/16)-1);
 480:	89 e1       	ldi	r24, 0x19	; 25
 482:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 486:	88 e1       	ldi	r24, 0x18	; 24
 488:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 492:	08 95       	ret

00000494 <ansi_clear_screen>:
}

void ansi_clear_screen ( void )
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
	putchar(27);
 498:	c6 e4       	ldi	r28, 0x46	; 70
 49a:	d1 e0       	ldi	r29, 0x01	; 1
 49c:	6a 81       	ldd	r22, Y+2	; 0x02
 49e:	7b 81       	ldd	r23, Y+3	; 0x03
 4a0:	8b e1       	ldi	r24, 0x1B	; 27
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('[');
 4a8:	6a 81       	ldd	r22, Y+2	; 0x02
 4aa:	7b 81       	ldd	r23, Y+3	; 0x03
 4ac:	8b e5       	ldi	r24, 0x5B	; 91
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('H');
 4b4:	6a 81       	ldd	r22, Y+2	; 0x02
 4b6:	7b 81       	ldd	r23, Y+3	; 0x03
 4b8:	88 e4       	ldi	r24, 0x48	; 72
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar(27);
 4c0:	6a 81       	ldd	r22, Y+2	; 0x02
 4c2:	7b 81       	ldd	r23, Y+3	; 0x03
 4c4:	8b e1       	ldi	r24, 0x1B	; 27
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('[');
 4cc:	6a 81       	ldd	r22, Y+2	; 0x02
 4ce:	7b 81       	ldd	r23, Y+3	; 0x03
 4d0:	8b e5       	ldi	r24, 0x5B	; 91
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('J');
 4d8:	6a 81       	ldd	r22, Y+2	; 0x02
 4da:	7b 81       	ldd	r23, Y+3	; 0x03
 4dc:	8a e4       	ldi	r24, 0x4A	; 74
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <ansi_me>:

void ansi_me(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
	putchar(27);
 4ee:	c6 e4       	ldi	r28, 0x46	; 70
 4f0:	d1 e0       	ldi	r29, 0x01	; 1
 4f2:	6a 81       	ldd	r22, Y+2	; 0x02
 4f4:	7b 81       	ldd	r23, Y+3	; 0x03
 4f6:	8b e1       	ldi	r24, 0x1B	; 27
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('[');
 4fe:	6a 81       	ldd	r22, Y+2	; 0x02
 500:	7b 81       	ldd	r23, Y+3	; 0x03
 502:	8b e5       	ldi	r24, 0x5B	; 91
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('0');
 50a:	6a 81       	ldd	r22, Y+2	; 0x02
 50c:	7b 81       	ldd	r23, Y+3	; 0x03
 50e:	80 e3       	ldi	r24, 0x30	; 48
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
	putchar('m');
 516:	6a 81       	ldd	r22, Y+2	; 0x02
 518:	7b 81       	ldd	r23, Y+3	; 0x03
 51a:	8d e6       	ldi	r24, 0x6D	; 109
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fputc>
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <uart_flush>:

void uart_flush ( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) )
 528:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 52c:	88 23       	and	r24, r24
 52e:	44 f4       	brge	.+16     	; 0x540 <uart_flush+0x18>
	dummy =  UDR0;
 530:	a6 ec       	ldi	r26, 0xC6	; 198
 532:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush ( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) )
 534:	e0 ec       	ldi	r30, 0xC0	; 192
 536:	f0 e0       	ldi	r31, 0x00	; 0
	dummy =  UDR0;
 538:	8c 91       	ld	r24, X
}

void uart_flush ( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) )
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	e4 f3       	brlt	.-8      	; 0x538 <uart_flush+0x10>
 540:	08 95       	ret

00000542 <init_print>:
	return ch;
}

void init_print ( void )
{
	stdout = stdin = &uart_str;
 542:	e6 e4       	ldi	r30, 0x46	; 70
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	91 83       	std	Z+1, r25	; 0x01
 54c:	80 83       	st	Z, r24
 54e:	93 83       	std	Z+3, r25	; 0x03
 550:	82 83       	std	Z+2, r24	; 0x02
	uart_init ();
 552:	0e 94 3e 02 	call	0x47c	; 0x47c <uart_init>
	ansi_me ();
 556:	0e 94 75 02 	call	0x4ea	; 0x4ea <ansi_me>
	ansi_clear_screen ();
 55a:	0e 94 4a 02 	call	0x494	; 0x494 <ansi_clear_screen>
	ansi_me ();
 55e:	0e 94 75 02 	call	0x4ea	; 0x4ea <ansi_me>
	ansi_clear_screen ();
 562:	0e 94 4a 02 	call	0x494	; 0x494 <ansi_clear_screen>
	uart_flush ();
 566:	0e 94 94 02 	call	0x528	; 0x528 <uart_flush>
 56a:	08 95       	ret

0000056c <malloc>:
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	91 05       	cpc	r25, r1
 578:	10 f4       	brcc	.+4      	; 0x57e <malloc+0x12>
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__flp>
 582:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__flp+0x1>
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	a0 e0       	ldi	r26, 0x00	; 0
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	30 97       	sbiw	r30, 0x00	; 0
 590:	19 f1       	breq	.+70     	; 0x5d8 <malloc+0x6c>
 592:	40 81       	ld	r20, Z
 594:	51 81       	ldd	r21, Z+1	; 0x01
 596:	02 81       	ldd	r16, Z+2	; 0x02
 598:	13 81       	ldd	r17, Z+3	; 0x03
 59a:	48 17       	cp	r20, r24
 59c:	59 07       	cpc	r21, r25
 59e:	c8 f0       	brcs	.+50     	; 0x5d2 <malloc+0x66>
 5a0:	84 17       	cp	r24, r20
 5a2:	95 07       	cpc	r25, r21
 5a4:	69 f4       	brne	.+26     	; 0x5c0 <malloc+0x54>
 5a6:	10 97       	sbiw	r26, 0x00	; 0
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <malloc+0x4a>
 5aa:	12 96       	adiw	r26, 0x02	; 2
 5ac:	0c 93       	st	X, r16
 5ae:	12 97       	sbiw	r26, 0x02	; 2
 5b0:	13 96       	adiw	r26, 0x03	; 3
 5b2:	1c 93       	st	X, r17
 5b4:	27 c0       	rjmp	.+78     	; 0x604 <malloc+0x98>
 5b6:	00 93 44 01 	sts	0x0144, r16	; 0x800144 <__flp>
 5ba:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <__flp+0x1>
 5be:	22 c0       	rjmp	.+68     	; 0x604 <malloc+0x98>
 5c0:	21 15       	cp	r18, r1
 5c2:	31 05       	cpc	r19, r1
 5c4:	19 f0       	breq	.+6      	; 0x5cc <malloc+0x60>
 5c6:	42 17       	cp	r20, r18
 5c8:	53 07       	cpc	r21, r19
 5ca:	18 f4       	brcc	.+6      	; 0x5d2 <malloc+0x66>
 5cc:	9a 01       	movw	r18, r20
 5ce:	bd 01       	movw	r22, r26
 5d0:	ef 01       	movw	r28, r30
 5d2:	df 01       	movw	r26, r30
 5d4:	f8 01       	movw	r30, r16
 5d6:	db cf       	rjmp	.-74     	; 0x58e <malloc+0x22>
 5d8:	21 15       	cp	r18, r1
 5da:	31 05       	cpc	r19, r1
 5dc:	f9 f0       	breq	.+62     	; 0x61c <malloc+0xb0>
 5de:	28 1b       	sub	r18, r24
 5e0:	39 0b       	sbc	r19, r25
 5e2:	24 30       	cpi	r18, 0x04	; 4
 5e4:	31 05       	cpc	r19, r1
 5e6:	80 f4       	brcc	.+32     	; 0x608 <malloc+0x9c>
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	9b 81       	ldd	r25, Y+3	; 0x03
 5ec:	61 15       	cp	r22, r1
 5ee:	71 05       	cpc	r23, r1
 5f0:	21 f0       	breq	.+8      	; 0x5fa <malloc+0x8e>
 5f2:	fb 01       	movw	r30, r22
 5f4:	93 83       	std	Z+3, r25	; 0x03
 5f6:	82 83       	std	Z+2, r24	; 0x02
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <malloc+0x96>
 5fa:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__flp+0x1>
 5fe:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__flp>
 602:	fe 01       	movw	r30, r28
 604:	32 96       	adiw	r30, 0x02	; 2
 606:	44 c0       	rjmp	.+136    	; 0x690 <malloc+0x124>
 608:	fe 01       	movw	r30, r28
 60a:	e2 0f       	add	r30, r18
 60c:	f3 1f       	adc	r31, r19
 60e:	81 93       	st	Z+, r24
 610:	91 93       	st	Z+, r25
 612:	22 50       	subi	r18, 0x02	; 2
 614:	31 09       	sbc	r19, r1
 616:	39 83       	std	Y+1, r19	; 0x01
 618:	28 83       	st	Y, r18
 61a:	3a c0       	rjmp	.+116    	; 0x690 <malloc+0x124>
 61c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__brkval>
 620:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__brkval+0x1>
 624:	23 2b       	or	r18, r19
 626:	41 f4       	brne	.+16     	; 0x638 <malloc+0xcc>
 628:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 62c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 630:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__brkval+0x1>
 634:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__brkval>
 638:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 63c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 640:	21 15       	cp	r18, r1
 642:	31 05       	cpc	r19, r1
 644:	41 f4       	brne	.+16     	; 0x656 <malloc+0xea>
 646:	2d b7       	in	r18, 0x3d	; 61
 648:	3e b7       	in	r19, 0x3e	; 62
 64a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 64e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 652:	24 1b       	sub	r18, r20
 654:	35 0b       	sbc	r19, r21
 656:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__brkval>
 65a:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__brkval+0x1>
 65e:	e2 17       	cp	r30, r18
 660:	f3 07       	cpc	r31, r19
 662:	a0 f4       	brcc	.+40     	; 0x68c <malloc+0x120>
 664:	2e 1b       	sub	r18, r30
 666:	3f 0b       	sbc	r19, r31
 668:	28 17       	cp	r18, r24
 66a:	39 07       	cpc	r19, r25
 66c:	78 f0       	brcs	.+30     	; 0x68c <malloc+0x120>
 66e:	ac 01       	movw	r20, r24
 670:	4e 5f       	subi	r20, 0xFE	; 254
 672:	5f 4f       	sbci	r21, 0xFF	; 255
 674:	24 17       	cp	r18, r20
 676:	35 07       	cpc	r19, r21
 678:	48 f0       	brcs	.+18     	; 0x68c <malloc+0x120>
 67a:	4e 0f       	add	r20, r30
 67c:	5f 1f       	adc	r21, r31
 67e:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <__brkval+0x1>
 682:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__brkval>
 686:	81 93       	st	Z+, r24
 688:	91 93       	st	Z+, r25
 68a:	02 c0       	rjmp	.+4      	; 0x690 <malloc+0x124>
 68c:	e0 e0       	ldi	r30, 0x00	; 0
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	cf 01       	movw	r24, r30
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	08 95       	ret

0000069c <free>:
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <free+0xa>
 6a4:	81 c0       	rjmp	.+258    	; 0x7a8 <free+0x10c>
 6a6:	fc 01       	movw	r30, r24
 6a8:	32 97       	sbiw	r30, 0x02	; 2
 6aa:	13 82       	std	Z+3, r1	; 0x03
 6ac:	12 82       	std	Z+2, r1	; 0x02
 6ae:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <__flp>
 6b2:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <__flp+0x1>
 6b6:	10 97       	sbiw	r26, 0x00	; 0
 6b8:	81 f4       	brne	.+32     	; 0x6da <free+0x3e>
 6ba:	20 81       	ld	r18, Z
 6bc:	31 81       	ldd	r19, Z+1	; 0x01
 6be:	82 0f       	add	r24, r18
 6c0:	93 1f       	adc	r25, r19
 6c2:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__brkval>
 6c6:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__brkval+0x1>
 6ca:	28 17       	cp	r18, r24
 6cc:	39 07       	cpc	r19, r25
 6ce:	51 f5       	brne	.+84     	; 0x724 <free+0x88>
 6d0:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <__brkval+0x1>
 6d4:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <__brkval>
 6d8:	67 c0       	rjmp	.+206    	; 0x7a8 <free+0x10c>
 6da:	ed 01       	movw	r28, r26
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	ce 17       	cp	r28, r30
 6e2:	df 07       	cpc	r29, r31
 6e4:	40 f4       	brcc	.+16     	; 0x6f6 <free+0x5a>
 6e6:	4a 81       	ldd	r20, Y+2	; 0x02
 6e8:	5b 81       	ldd	r21, Y+3	; 0x03
 6ea:	9e 01       	movw	r18, r28
 6ec:	41 15       	cp	r20, r1
 6ee:	51 05       	cpc	r21, r1
 6f0:	f1 f0       	breq	.+60     	; 0x72e <free+0x92>
 6f2:	ea 01       	movw	r28, r20
 6f4:	f5 cf       	rjmp	.-22     	; 0x6e0 <free+0x44>
 6f6:	d3 83       	std	Z+3, r29	; 0x03
 6f8:	c2 83       	std	Z+2, r28	; 0x02
 6fa:	40 81       	ld	r20, Z
 6fc:	51 81       	ldd	r21, Z+1	; 0x01
 6fe:	84 0f       	add	r24, r20
 700:	95 1f       	adc	r25, r21
 702:	c8 17       	cp	r28, r24
 704:	d9 07       	cpc	r29, r25
 706:	59 f4       	brne	.+22     	; 0x71e <free+0x82>
 708:	88 81       	ld	r24, Y
 70a:	99 81       	ldd	r25, Y+1	; 0x01
 70c:	84 0f       	add	r24, r20
 70e:	95 1f       	adc	r25, r21
 710:	02 96       	adiw	r24, 0x02	; 2
 712:	91 83       	std	Z+1, r25	; 0x01
 714:	80 83       	st	Z, r24
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	9b 81       	ldd	r25, Y+3	; 0x03
 71a:	93 83       	std	Z+3, r25	; 0x03
 71c:	82 83       	std	Z+2, r24	; 0x02
 71e:	21 15       	cp	r18, r1
 720:	31 05       	cpc	r19, r1
 722:	29 f4       	brne	.+10     	; 0x72e <free+0x92>
 724:	f0 93 45 01 	sts	0x0145, r31	; 0x800145 <__flp+0x1>
 728:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <__flp>
 72c:	3d c0       	rjmp	.+122    	; 0x7a8 <free+0x10c>
 72e:	e9 01       	movw	r28, r18
 730:	fb 83       	std	Y+3, r31	; 0x03
 732:	ea 83       	std	Y+2, r30	; 0x02
 734:	49 91       	ld	r20, Y+
 736:	59 91       	ld	r21, Y+
 738:	c4 0f       	add	r28, r20
 73a:	d5 1f       	adc	r29, r21
 73c:	ec 17       	cp	r30, r28
 73e:	fd 07       	cpc	r31, r29
 740:	61 f4       	brne	.+24     	; 0x75a <free+0xbe>
 742:	80 81       	ld	r24, Z
 744:	91 81       	ldd	r25, Z+1	; 0x01
 746:	84 0f       	add	r24, r20
 748:	95 1f       	adc	r25, r21
 74a:	02 96       	adiw	r24, 0x02	; 2
 74c:	e9 01       	movw	r28, r18
 74e:	99 83       	std	Y+1, r25	; 0x01
 750:	88 83       	st	Y, r24
 752:	82 81       	ldd	r24, Z+2	; 0x02
 754:	93 81       	ldd	r25, Z+3	; 0x03
 756:	9b 83       	std	Y+3, r25	; 0x03
 758:	8a 83       	std	Y+2, r24	; 0x02
 75a:	e0 e0       	ldi	r30, 0x00	; 0
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	12 96       	adiw	r26, 0x02	; 2
 760:	8d 91       	ld	r24, X+
 762:	9c 91       	ld	r25, X
 764:	13 97       	sbiw	r26, 0x03	; 3
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	19 f0       	breq	.+6      	; 0x770 <free+0xd4>
 76a:	fd 01       	movw	r30, r26
 76c:	dc 01       	movw	r26, r24
 76e:	f7 cf       	rjmp	.-18     	; 0x75e <free+0xc2>
 770:	8d 91       	ld	r24, X+
 772:	9c 91       	ld	r25, X
 774:	11 97       	sbiw	r26, 0x01	; 1
 776:	9d 01       	movw	r18, r26
 778:	2e 5f       	subi	r18, 0xFE	; 254
 77a:	3f 4f       	sbci	r19, 0xFF	; 255
 77c:	82 0f       	add	r24, r18
 77e:	93 1f       	adc	r25, r19
 780:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__brkval>
 784:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__brkval+0x1>
 788:	28 17       	cp	r18, r24
 78a:	39 07       	cpc	r19, r25
 78c:	69 f4       	brne	.+26     	; 0x7a8 <free+0x10c>
 78e:	30 97       	sbiw	r30, 0x00	; 0
 790:	29 f4       	brne	.+10     	; 0x79c <free+0x100>
 792:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__flp+0x1>
 796:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__flp>
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <free+0x104>
 79c:	13 82       	std	Z+3, r1	; 0x03
 79e:	12 82       	std	Z+2, r1	; 0x02
 7a0:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <__brkval+0x1>
 7a4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <__brkval>
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <fputc>:
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	fb 01       	movw	r30, r22
 7b8:	23 81       	ldd	r18, Z+3	; 0x03
 7ba:	21 fd       	sbrc	r18, 1
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <fputc+0x16>
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	9f ef       	ldi	r25, 0xFF	; 255
 7c2:	2c c0       	rjmp	.+88     	; 0x81c <fputc+0x6e>
 7c4:	22 ff       	sbrs	r18, 2
 7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <fputc+0x46>
 7c8:	46 81       	ldd	r20, Z+6	; 0x06
 7ca:	57 81       	ldd	r21, Z+7	; 0x07
 7cc:	24 81       	ldd	r18, Z+4	; 0x04
 7ce:	35 81       	ldd	r19, Z+5	; 0x05
 7d0:	42 17       	cp	r20, r18
 7d2:	53 07       	cpc	r21, r19
 7d4:	44 f4       	brge	.+16     	; 0x7e6 <fputc+0x38>
 7d6:	a0 81       	ld	r26, Z
 7d8:	b1 81       	ldd	r27, Z+1	; 0x01
 7da:	9d 01       	movw	r18, r26
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	31 83       	std	Z+1, r19	; 0x01
 7e2:	20 83       	st	Z, r18
 7e4:	8c 93       	st	X, r24
 7e6:	26 81       	ldd	r18, Z+6	; 0x06
 7e8:	37 81       	ldd	r19, Z+7	; 0x07
 7ea:	2f 5f       	subi	r18, 0xFF	; 255
 7ec:	3f 4f       	sbci	r19, 0xFF	; 255
 7ee:	37 83       	std	Z+7, r19	; 0x07
 7f0:	26 83       	std	Z+6, r18	; 0x06
 7f2:	14 c0       	rjmp	.+40     	; 0x81c <fputc+0x6e>
 7f4:	8b 01       	movw	r16, r22
 7f6:	ec 01       	movw	r28, r24
 7f8:	fb 01       	movw	r30, r22
 7fa:	00 84       	ldd	r0, Z+8	; 0x08
 7fc:	f1 85       	ldd	r31, Z+9	; 0x09
 7fe:	e0 2d       	mov	r30, r0
 800:	09 95       	icall
 802:	89 2b       	or	r24, r25
 804:	e1 f6       	brne	.-72     	; 0x7be <fputc+0x10>
 806:	d8 01       	movw	r26, r16
 808:	16 96       	adiw	r26, 0x06	; 6
 80a:	8d 91       	ld	r24, X+
 80c:	9c 91       	ld	r25, X
 80e:	17 97       	sbiw	r26, 0x07	; 7
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	17 96       	adiw	r26, 0x07	; 7
 814:	9c 93       	st	X, r25
 816:	8e 93       	st	-X, r24
 818:	16 97       	sbiw	r26, 0x06	; 6
 81a:	ce 01       	movw	r24, r28
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	08 95       	ret

00000826 <puts>:
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <__iob+0x2>
 832:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <__iob+0x3>
 836:	23 81       	ldd	r18, Z+3	; 0x03
 838:	21 ff       	sbrs	r18, 1
 83a:	1b c0       	rjmp	.+54     	; 0x872 <puts+0x4c>
 83c:	8c 01       	movw	r16, r24
 83e:	d0 e0       	ldi	r29, 0x00	; 0
 840:	c0 e0       	ldi	r28, 0x00	; 0
 842:	f8 01       	movw	r30, r16
 844:	81 91       	ld	r24, Z+
 846:	8f 01       	movw	r16, r30
 848:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <__iob+0x2>
 84c:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <__iob+0x3>
 850:	db 01       	movw	r26, r22
 852:	18 96       	adiw	r26, 0x08	; 8
 854:	ed 91       	ld	r30, X+
 856:	fc 91       	ld	r31, X
 858:	19 97       	sbiw	r26, 0x09	; 9
 85a:	88 23       	and	r24, r24
 85c:	31 f0       	breq	.+12     	; 0x86a <puts+0x44>
 85e:	09 95       	icall
 860:	89 2b       	or	r24, r25
 862:	79 f3       	breq	.-34     	; 0x842 <puts+0x1c>
 864:	df ef       	ldi	r29, 0xFF	; 255
 866:	cf ef       	ldi	r28, 0xFF	; 255
 868:	ec cf       	rjmp	.-40     	; 0x842 <puts+0x1c>
 86a:	8a e0       	ldi	r24, 0x0A	; 10
 86c:	09 95       	icall
 86e:	89 2b       	or	r24, r25
 870:	19 f0       	breq	.+6      	; 0x878 <puts+0x52>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	02 c0       	rjmp	.+4      	; 0x87c <puts+0x56>
 878:	8d 2f       	mov	r24, r29
 87a:	9c 2f       	mov	r25, r28
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <_exit>:
 886:	f8 94       	cli

00000888 <__stop_program>:
 888:	ff cf       	rjmp	.-2      	; 0x888 <__stop_program>
