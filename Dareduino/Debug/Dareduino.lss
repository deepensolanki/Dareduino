
ArduinoPlusPlus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b9  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b9  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c3  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028c  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "macros.h"

int main(void)
{
	 
	pinConfig(13,OUTPUT);
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 65 00 	call	0xca	; 0xca <pinConfig>
	while(121)
	{
		pinWrite(13,1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	8d e0       	ldi	r24, 0x0D	; 13
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 b0 00 	call	0x160	; 0x160 <pinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	89 e6       	ldi	r24, 0x69	; 105
  9c:	98 e1       	ldi	r25, 0x18	; 24
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x28>
  a8:	00 00       	nop
		_delay_ms(500);
		pinWrite(13,0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 b0 00 	call	0x160	; 0x160 <pinWrite>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
  c8:	e1 cf       	rjmp	.-62     	; 0x8c <main+0xc>

000000ca <pinConfig>:
#include <gpio.h>
#include <macros.h>

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	91 05       	cpc	r25, r1
  ce:	00 f5       	brcc	.+64     	; 0x110 <pinConfig+0x46>
	{
		if(io == OUTPUT)
  d0:	61 30       	cpi	r22, 0x01	; 1
  d2:	71 05       	cpc	r23, r1
  d4:	69 f4       	brne	.+26     	; 0xf0 <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
  d6:	4a b1       	in	r20, 0x0a	; 10
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	b9 01       	movw	r22, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <pinConfig+0x1a>
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	8a 95       	dec	r24
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <pinConfig+0x16>
  e8:	cb 01       	movw	r24, r22
  ea:	84 2b       	or	r24, r20
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	08 95       	ret
		}
		
		if(io == INPUT)
  f0:	67 2b       	or	r22, r23
  f2:	a9 f5       	brne	.+106    	; 0x15e <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
  f4:	4a b1       	in	r20, 0x0a	; 10
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	b9 01       	movw	r22, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <pinConfig+0x38>
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	8a 95       	dec	r24
 104:	e2 f7       	brpl	.-8      	; 0xfe <pinConfig+0x34>
 106:	cb 01       	movw	r24, r22
 108:	80 95       	com	r24
 10a:	84 23       	and	r24, r20
 10c:	8a b9       	out	0x0a, r24	; 10
 10e:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
 110:	9c 01       	movw	r18, r24
 112:	28 50       	subi	r18, 0x08	; 8
 114:	31 09       	sbc	r19, r1
 116:	26 30       	cpi	r18, 0x06	; 6
 118:	31 05       	cpc	r19, r1
 11a:	08 f5       	brcc	.+66     	; 0x15e <pinConfig+0x94>
	{
		if(io == OUTPUT)
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	71 05       	cpc	r23, r1
 120:	71 f4       	brne	.+28     	; 0x13e <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
 122:	44 b1       	in	r20, 0x04	; 4
 124:	c9 01       	movw	r24, r18
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <pinConfig+0x68>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <pinConfig+0x64>
 136:	cb 01       	movw	r24, r22
 138:	84 2b       	or	r24, r20
 13a:	84 b9       	out	0x04, r24	; 4
 13c:	08 95       	ret
		}
		
		if(io == INPUT)
 13e:	67 2b       	or	r22, r23
 140:	71 f4       	brne	.+28     	; 0x15e <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
 142:	44 b1       	in	r20, 0x04	; 4
 144:	08 97       	sbiw	r24, 0x08	; 8
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <pinConfig+0x88>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <pinConfig+0x84>
 156:	cb 01       	movw	r24, r22
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	84 b9       	out	0x04, r24	; 4
 15e:	08 95       	ret

00000160 <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
 160:	88 30       	cpi	r24, 0x08	; 8
 162:	91 05       	cpc	r25, r1
 164:	20 f5       	brcc	.+72     	; 0x1ae <pinWrite+0x4e>
	{
		if (val > 0)
 166:	16 16       	cp	r1, r22
 168:	17 06       	cpc	r1, r23
 16a:	5c f4       	brge	.+22     	; 0x182 <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
 16c:	4b b1       	in	r20, 0x0b	; 11
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	08 2e       	mov	r0, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <pinWrite+0x1a>
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <pinWrite+0x16>
 17e:	24 2b       	or	r18, r20
 180:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
 182:	61 15       	cp	r22, r1
 184:	71 05       	cpc	r23, r1
 186:	99 f4       	brne	.+38     	; 0x1ae <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
 188:	4b b1       	in	r20, 0x0b	; 11
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	08 2e       	mov	r0, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <pinWrite+0x36>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <pinWrite+0x32>
 19a:	20 95       	com	r18
 19c:	24 23       	and	r18, r20
 19e:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
 1a0:	9c 01       	movw	r18, r24
 1a2:	28 50       	subi	r18, 0x08	; 8
 1a4:	31 09       	sbc	r19, r1
 1a6:	26 30       	cpi	r18, 0x06	; 6
 1a8:	31 05       	cpc	r19, r1
 1aa:	b8 f0       	brcs	.+46     	; 0x1da <pinWrite+0x7a>
 1ac:	08 95       	ret
 1ae:	9c 01       	movw	r18, r24
 1b0:	28 50       	subi	r18, 0x08	; 8
 1b2:	31 09       	sbc	r19, r1
 1b4:	26 30       	cpi	r18, 0x06	; 6
 1b6:	31 05       	cpc	r19, r1
 1b8:	f0 f4       	brcc	.+60     	; 0x1f6 <pinWrite+0x96>
	{
		if (val > 0)
 1ba:	16 16       	cp	r1, r22
 1bc:	17 06       	cpc	r1, r23
 1be:	5c f4       	brge	.+22     	; 0x1d6 <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
 1c0:	45 b1       	in	r20, 0x05	; 5
 1c2:	f9 01       	movw	r30, r18
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <pinWrite+0x6e>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	ea 95       	dec	r30
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <pinWrite+0x6a>
 1d2:	24 2b       	or	r18, r20
 1d4:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
 1d6:	67 2b       	or	r22, r23
 1d8:	71 f4       	brne	.+28     	; 0x1f6 <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
 1da:	45 b1       	in	r20, 0x05	; 5
 1dc:	08 97       	sbiw	r24, 0x08	; 8
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <pinWrite+0x8a>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <pinWrite+0x86>
 1ee:	cb 01       	movw	r24, r22
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
