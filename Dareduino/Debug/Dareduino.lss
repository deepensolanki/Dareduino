
Dareduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  000010be  00001152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  0080018c  0080018c  000011de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152b  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9b  00000000  00000000  00002907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3c  00000000  00000000  000035a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  000040e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085d  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee eb       	ldi	r30, 0xBE	; 190
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 38       	cpi	r26, 0x8C	; 140
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ac e8       	ldi	r26, 0x8C	; 140
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 37       	cpi	r26, 0x7C	; 124
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a4 00 	call	0x148	; 0x148 <main>
      9e:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <onTask>:
{

	while (1)
	{
		pinWrite(13,1);
		printf("\nOnTask");
      a6:	c4 e1       	ldi	r28, 0x14	; 20
      a8:	d1 e0       	ldi	r29, 0x01	; 1
void onTask(void)
{

	while (1)
	{
		pinWrite(13,1);
      aa:	61 e0       	ldi	r22, 0x01	; 1
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	8d e0       	ldi	r24, 0x0D	; 13
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <pinWrite>
		printf("\nOnTask");
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	0e 94 8b 05 	call	0xb16	; 0xb16 <printf>
      be:	0f 90       	pop	r0
      c0:	0f 90       	pop	r0
      c2:	f3 cf       	rjmp	.-26     	; 0xaa <onTask+0x4>

000000c4 <offTask>:
	static int i = 0;
	int y;
	while (1)
	{
		y = FIFOput(i);
		printf("\nOfftask %d", y);
      c4:	cc e1       	ldi	r28, 0x1C	; 28
      c6:	d1 e0       	ldi	r29, 0x01	; 1
{
	static int i = 0;
	int y;
	while (1)
	{
		y = FIFOput(i);
      c8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
      cc:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
      d0:	0e 94 32 03 	call	0x664	; 0x664 <FIFOput>
		printf("\nOfftask %d", y);
      d4:	9f 93       	push	r25
      d6:	8f 93       	push	r24
      d8:	df 93       	push	r29
      da:	cf 93       	push	r28
      dc:	0e 94 8b 05 	call	0xb16	; 0xb16 <printf>
		i += 1;
      e0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
      e4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
      ee:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
		pinWrite(13,0);
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	8d e0       	ldi	r24, 0x0D	; 13
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <pinWrite>
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	e0 cf       	rjmp	.-64     	; 0xc8 <offTask+0x4>

00000108 <rTask>:
{
	int y;
	while (1)
	{
		y = adcRead(0);
		printf("\nrTask %d", y);
     108:	c8 e2       	ldi	r28, 0x28	; 40
     10a:	d1 e0       	ldi	r29, 0x01	; 1
void rTask()
{
	int y;
	while (1)
	{
		y = adcRead(0);
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <adcRead>
		printf("\nrTask %d", y);
     114:	9f 93       	push	r25
     116:	8f 93       	push	r24
     118:	df 93       	push	r29
     11a:	cf 93       	push	r28
     11c:	0e 94 8b 05 	call	0xb16	; 0xb16 <printf>
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	f1 cf       	rjmp	.-30     	; 0x10c <rTask+0x4>

0000012a <qTask>:
{
	int x;
	while (1)
	{
		x = FIFOget();
		printf("\nqTask %d", x);
     12a:	c2 e3       	ldi	r28, 0x32	; 50
     12c:	d1 e0       	ldi	r29, 0x01	; 1
void qTask()
{
	int x;
	while (1)
	{
		x = FIFOget();
     12e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <FIFOget>
		printf("\nqTask %d", x);
     132:	9f 93       	push	r25
     134:	8f 93       	push	r24
     136:	df 93       	push	r29
     138:	cf 93       	push	r28
     13a:	0e 94 8b 05 	call	0xb16	; 0xb16 <printf>
     13e:	0f 90       	pop	r0
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	f3 cf       	rjmp	.-26     	; 0x12e <qTask+0x4>

00000148 <main>:
volatile int *semaphore;
volatile int sem;

int main (void)
{
	consoleDisplay();
     148:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <consoleDisplay>
	pinConfig(13,OUTPUT);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	8d e0       	ldi	r24, 0x0D	; 13
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 07 01 	call	0x20e	; 0x20e <pinConfig>
	
	sem = 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <sem+0x1>
     160:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <sem>
	semaphore = &sem;
     164:	8e e8       	ldi	r24, 0x8E	; 142
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <semaphore+0x1>
     16c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <semaphore>
	
	OSinit();
     170:	0e 94 18 03 	call	0x630	; 0x630 <OSinit>
	
	createTask(&onTask, 20, 150, "onTask");
     174:	2c e3       	ldi	r18, 0x3C	; 60
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	46 e9       	ldi	r20, 0x96	; 150
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	64 e1       	ldi	r22, 0x14	; 20
     17e:	83 e5       	ldi	r24, 0x53	; 83
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <createTask>
	createTask(&rTask, 1, 150, "rTask");
     186:	23 e4       	ldi	r18, 0x43	; 67
     188:	31 e0       	ldi	r19, 0x01	; 1
     18a:	46 e9       	ldi	r20, 0x96	; 150
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <createTask>
	createTask(&qTask, 12, 150, "qTask");
     198:	29 e4       	ldi	r18, 0x49	; 73
     19a:	31 e0       	ldi	r19, 0x01	; 1
     19c:	46 e9       	ldi	r20, 0x96	; 150
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	6c e0       	ldi	r22, 0x0C	; 12
     1a2:	85 e9       	ldi	r24, 0x95	; 149
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <createTask>
	createTask(&offTask, 2, 150, "offTask");
     1aa:	2f e4       	ldi	r18, 0x4F	; 79
     1ac:	31 e0       	ldi	r19, 0x01	; 1
     1ae:	46 e9       	ldi	r20, 0x96	; 150
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	62 e0       	ldi	r22, 0x02	; 2
     1b4:	82 e6       	ldi	r24, 0x62	; 98
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <createTask>

	OSlaunch(ROUNDROBIN);
     1bc:	80 e5       	ldi	r24, 0x50	; 80
     1be:	0e 94 af 01 	call	0x35e	; 0x35e <OSlaunch>

	return 0;
}
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	08 95       	ret

000001c8 <adcInit>:
#include <avr/io.h>
#include <util/delay.h>

void adcInit()
{
	ADCSRA = 0x87;
     1c8:	87 e8       	ldi	r24, 0x87	; 135
     1ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADMUX = 0x40;
     1ce:	80 e4       	ldi	r24, 0x40	; 64
     1d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     1d4:	08 95       	ret

000001d6 <adcRead>:
}

int adcRead(int channel)
{
	int aHigh, aLow;
	ADMUX = ADMUX | (channel & 0x0f);
     1d6:	ec e7       	ldi	r30, 0x7C	; 124
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	90 81       	ld	r25, Z
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	98 2b       	or	r25, r24
     1e0:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
     1e2:	ea e7       	ldi	r30, 0x7A	; 122
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	80 64       	ori	r24, 0x40	; 64
     1ea:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF)) == 0);
     1ec:	80 81       	ld	r24, Z
     1ee:	84 ff       	sbrs	r24, 4
     1f0:	fd cf       	rjmp	.-6      	; 0x1ec <adcRead+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	8a 95       	dec	r24
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <adcRead+0x1e>
     1f8:	00 00       	nop
	_delay_us(10);
	aLow = (int) ADCL;
     1fa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	aHigh = (int)ADCH*256;
     1fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	98 2f       	mov	r25, r24
     206:	88 27       	eor	r24, r24
	aHigh = aLow + aHigh;
	return aHigh;
}
     208:	82 0f       	add	r24, r18
     20a:	91 1d       	adc	r25, r1
     20c:	08 95       	ret

0000020e <pinConfig>:
#include "gpio.h"

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
     20e:	88 30       	cpi	r24, 0x08	; 8
     210:	91 05       	cpc	r25, r1
     212:	00 f5       	brcc	.+64     	; 0x254 <pinConfig+0x46>
	{
		if(io == OUTPUT)
     214:	61 30       	cpi	r22, 0x01	; 1
     216:	71 05       	cpc	r23, r1
     218:	69 f4       	brne	.+26     	; 0x234 <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
     21a:	4a b1       	in	r20, 0x0a	; 10
     21c:	21 e0       	ldi	r18, 0x01	; 1
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	b9 01       	movw	r22, r18
     222:	02 c0       	rjmp	.+4      	; 0x228 <pinConfig+0x1a>
     224:	66 0f       	add	r22, r22
     226:	77 1f       	adc	r23, r23
     228:	8a 95       	dec	r24
     22a:	e2 f7       	brpl	.-8      	; 0x224 <pinConfig+0x16>
     22c:	cb 01       	movw	r24, r22
     22e:	84 2b       	or	r24, r20
     230:	8a b9       	out	0x0a, r24	; 10
     232:	08 95       	ret
		}
		
		if(io == INPUT)
     234:	67 2b       	or	r22, r23
     236:	a9 f5       	brne	.+106    	; 0x2a2 <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
     238:	4a b1       	in	r20, 0x0a	; 10
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	b9 01       	movw	r22, r18
     240:	02 c0       	rjmp	.+4      	; 0x246 <pinConfig+0x38>
     242:	66 0f       	add	r22, r22
     244:	77 1f       	adc	r23, r23
     246:	8a 95       	dec	r24
     248:	e2 f7       	brpl	.-8      	; 0x242 <pinConfig+0x34>
     24a:	cb 01       	movw	r24, r22
     24c:	80 95       	com	r24
     24e:	84 23       	and	r24, r20
     250:	8a b9       	out	0x0a, r24	; 10
     252:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
     254:	9c 01       	movw	r18, r24
     256:	28 50       	subi	r18, 0x08	; 8
     258:	31 09       	sbc	r19, r1
     25a:	26 30       	cpi	r18, 0x06	; 6
     25c:	31 05       	cpc	r19, r1
     25e:	08 f5       	brcc	.+66     	; 0x2a2 <pinConfig+0x94>
	{
		if(io == OUTPUT)
     260:	61 30       	cpi	r22, 0x01	; 1
     262:	71 05       	cpc	r23, r1
     264:	71 f4       	brne	.+28     	; 0x282 <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
     266:	44 b1       	in	r20, 0x04	; 4
     268:	c9 01       	movw	r24, r18
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	b9 01       	movw	r22, r18
     270:	02 c0       	rjmp	.+4      	; 0x276 <pinConfig+0x68>
     272:	66 0f       	add	r22, r22
     274:	77 1f       	adc	r23, r23
     276:	8a 95       	dec	r24
     278:	e2 f7       	brpl	.-8      	; 0x272 <pinConfig+0x64>
     27a:	cb 01       	movw	r24, r22
     27c:	84 2b       	or	r24, r20
     27e:	84 b9       	out	0x04, r24	; 4
     280:	08 95       	ret
		}
		
		if(io == INPUT)
     282:	67 2b       	or	r22, r23
     284:	71 f4       	brne	.+28     	; 0x2a2 <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
     286:	44 b1       	in	r20, 0x04	; 4
     288:	08 97       	sbiw	r24, 0x08	; 8
     28a:	21 e0       	ldi	r18, 0x01	; 1
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	b9 01       	movw	r22, r18
     290:	02 c0       	rjmp	.+4      	; 0x296 <pinConfig+0x88>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	8a 95       	dec	r24
     298:	e2 f7       	brpl	.-8      	; 0x292 <pinConfig+0x84>
     29a:	cb 01       	movw	r24, r22
     29c:	80 95       	com	r24
     29e:	84 23       	and	r24, r20
     2a0:	84 b9       	out	0x04, r24	; 4
     2a2:	08 95       	ret

000002a4 <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
     2a4:	88 30       	cpi	r24, 0x08	; 8
     2a6:	91 05       	cpc	r25, r1
     2a8:	20 f5       	brcc	.+72     	; 0x2f2 <pinWrite+0x4e>
	{
		if (val > 0)
     2aa:	16 16       	cp	r1, r22
     2ac:	17 06       	cpc	r1, r23
     2ae:	5c f4       	brge	.+22     	; 0x2c6 <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
     2b0:	4b b1       	in	r20, 0x0b	; 11
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	08 2e       	mov	r0, r24
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <pinWrite+0x1a>
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <pinWrite+0x16>
     2c2:	24 2b       	or	r18, r20
     2c4:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
     2c6:	61 15       	cp	r22, r1
     2c8:	71 05       	cpc	r23, r1
     2ca:	99 f4       	brne	.+38     	; 0x2f2 <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
     2cc:	4b b1       	in	r20, 0x0b	; 11
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	08 2e       	mov	r0, r24
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <pinWrite+0x36>
     2d6:	22 0f       	add	r18, r18
     2d8:	33 1f       	adc	r19, r19
     2da:	0a 94       	dec	r0
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <pinWrite+0x32>
     2de:	20 95       	com	r18
     2e0:	24 23       	and	r18, r20
     2e2:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
     2e4:	9c 01       	movw	r18, r24
     2e6:	28 50       	subi	r18, 0x08	; 8
     2e8:	31 09       	sbc	r19, r1
     2ea:	26 30       	cpi	r18, 0x06	; 6
     2ec:	31 05       	cpc	r19, r1
     2ee:	b8 f0       	brcs	.+46     	; 0x31e <pinWrite+0x7a>
     2f0:	08 95       	ret
     2f2:	9c 01       	movw	r18, r24
     2f4:	28 50       	subi	r18, 0x08	; 8
     2f6:	31 09       	sbc	r19, r1
     2f8:	26 30       	cpi	r18, 0x06	; 6
     2fa:	31 05       	cpc	r19, r1
     2fc:	f0 f4       	brcc	.+60     	; 0x33a <pinWrite+0x96>
	{
		if (val > 0)
     2fe:	16 16       	cp	r1, r22
     300:	17 06       	cpc	r1, r23
     302:	5c f4       	brge	.+22     	; 0x31a <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
     304:	45 b1       	in	r20, 0x05	; 5
     306:	f9 01       	movw	r30, r18
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <pinWrite+0x6e>
     30e:	22 0f       	add	r18, r18
     310:	33 1f       	adc	r19, r19
     312:	ea 95       	dec	r30
     314:	e2 f7       	brpl	.-8      	; 0x30e <pinWrite+0x6a>
     316:	24 2b       	or	r18, r20
     318:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
     31a:	67 2b       	or	r22, r23
     31c:	71 f4       	brne	.+28     	; 0x33a <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
     31e:	45 b1       	in	r20, 0x05	; 5
     320:	08 97       	sbiw	r24, 0x08	; 8
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	b9 01       	movw	r22, r18
     328:	02 c0       	rjmp	.+4      	; 0x32e <pinWrite+0x8a>
     32a:	66 0f       	add	r22, r22
     32c:	77 1f       	adc	r23, r23
     32e:	8a 95       	dec	r24
     330:	e2 f7       	brpl	.-8      	; 0x32a <pinWrite+0x86>
     332:	cb 01       	movw	r24, r22
     334:	80 95       	com	r24
     336:	84 23       	and	r24, r20
     338:	85 b9       	out	0x05, r24	; 5
     33a:	08 95       	ret

0000033c <timerInit>:
	asm volatile("ret");
}

void OSsuspend(void)
{
	TIMER1_COMPA_vect();
     33c:	e1 e8       	ldi	r30, 0x81	; 129
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	8c 60       	ori	r24, 0x0C	; 12
     344:	80 83       	st	Z, r24
     346:	ef e6       	ldi	r30, 0x6F	; 111
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	82 60       	ori	r24, 0x02	; 2
     34e:	80 83       	st	Z, r24
     350:	8c e3       	ldi	r24, 0x3C	; 60
     352:	90 ef       	ldi	r25, 0xF0	; 240
     354:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     358:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     35c:	08 95       	ret

0000035e <OSlaunch>:
     35e:	20 e7       	ldi	r18, 0x70	; 112
     360:	32 e0       	ldi	r19, 0x02	; 2
     362:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <currSp+0x1>
     366:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <currSp>
     36a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <schedulerType>
     36e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tasksCreated>
     372:	1f 92       	push	r1
     374:	8f 93       	push	r24
     376:	87 e5       	ldi	r24, 0x57	; 87
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	9f 93       	push	r25
     37c:	8f 93       	push	r24
     37e:	0e 94 8b 05 	call	0xb16	; 0xb16 <printf>
     382:	2f ef       	ldi	r18, 0xFF	; 255
     384:	87 ea       	ldi	r24, 0xA7	; 167
     386:	91 e6       	ldi	r25, 0x61	; 97
     388:	21 50       	subi	r18, 0x01	; 1
     38a:	80 40       	sbci	r24, 0x00	; 0
     38c:	90 40       	sbci	r25, 0x00	; 0
     38e:	e1 f7       	brne	.-8      	; 0x388 <OSlaunch+0x2a>
     390:	00 c0       	rjmp	.+0      	; 0x392 <OSlaunch+0x34>
     392:	00 00       	nop
     394:	78 94       	sei
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	89 e7       	ldi	r24, 0x79	; 121
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 a1 05 	call	0xb42	; 0xb42 <puts>
     3a6:	fb cf       	rjmp	.-10     	; 0x39e <OSlaunch+0x40>

000003a8 <createTask>:
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	6c 01       	movw	r12, r24
     3b8:	f6 2e       	mov	r15, r22
     3ba:	ea 01       	movw	r28, r20
     3bc:	89 01       	movw	r16, r18
     3be:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tasksCreated>
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <tasksCreated>
     3c8:	8d e0       	ldi	r24, 0x0D	; 13
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 2e 04 	call	0x85c	; 0x85c <malloc>
     3d0:	fc 01       	movw	r30, r24
     3d2:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <newTask+0x1>
     3d6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <newTask>
     3da:	d1 82       	std	Z+1, r13	; 0x01
     3dc:	c0 82       	st	Z, r12
     3de:	f6 82       	std	Z+6, r15	; 0x06
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	87 83       	std	Z+7, r24	; 0x07
     3e4:	14 86       	std	Z+12, r1	; 0x0c
     3e6:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <stackUsed>
     3ea:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <stackUsed+0x1>
     3ee:	8b e9       	ldi	r24, 0x9B	; 155
     3f0:	98 e0       	ldi	r25, 0x08	; 8
     3f2:	82 1b       	sub	r24, r18
     3f4:	93 0b       	sbc	r25, r19
     3f6:	95 83       	std	Z+5, r25	; 0x05
     3f8:	84 83       	std	Z+4, r24	; 0x04
     3fa:	c2 0f       	add	r28, r18
     3fc:	d3 1f       	adc	r29, r19
     3fe:	d0 93 6a 02 	sts	0x026A, r29	; 0x80026a <stackUsed+0x1>
     402:	c0 93 69 02 	sts	0x0269, r28	; 0x800269 <stackUsed>
     406:	13 87       	std	Z+11, r17	; 0x0b
     408:	02 87       	std	Z+10, r16	; 0x0a
     40a:	13 82       	std	Z+3, r1	; 0x03
     40c:	12 82       	std	Z+2, r1	; 0x02
     40e:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <head>
     412:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <head+0x1>
     416:	18 96       	adiw	r26, 0x08	; 8
     418:	8d 91       	ld	r24, X+
     41a:	9c 91       	ld	r25, X
     41c:	19 97       	sbiw	r26, 0x09	; 9
     41e:	91 87       	std	Z+9, r25	; 0x09
     420:	80 87       	std	Z+8, r24	; 0x08
     422:	19 96       	adiw	r26, 0x09	; 9
     424:	fc 93       	st	X, r31
     426:	ee 93       	st	-X, r30
     428:	18 97       	sbiw	r26, 0x08	; 8
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <taskScheduler>:
     43a:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <runPt>
     43e:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <runPt+0x1>
     442:	84 85       	ldd	r24, Z+12	; 0x0c
     444:	83 30       	cpi	r24, 0x03	; 3
     446:	79 f4       	brne	.+30     	; 0x466 <taskScheduler+0x2c>
     448:	80 85       	ldd	r24, Z+8	; 0x08
     44a:	91 85       	ldd	r25, Z+9	; 0x09
     44c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <runPt+0x1>
     450:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <runPt>
     454:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <runPt>
     458:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <runPt+0x1>
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	93 81       	ldd	r25, Z+3	; 0x03
     460:	89 2b       	or	r24, r25
     462:	a9 f4       	brne	.+42     	; 0x48e <taskScheduler+0x54>
     464:	1f c0       	rjmp	.+62     	; 0x4a4 <taskScheduler+0x6a>
     466:	80 85       	ldd	r24, Z+8	; 0x08
     468:	91 85       	ldd	r25, Z+9	; 0x09
     46a:	00 97       	sbiw	r24, 0x00	; 0
     46c:	59 f4       	brne	.+22     	; 0x484 <taskScheduler+0x4a>
     46e:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <head>
     472:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <head+0x1>
     476:	80 85       	ldd	r24, Z+8	; 0x08
     478:	91 85       	ldd	r25, Z+9	; 0x09
     47a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <runPt+0x1>
     47e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <runPt>
     482:	e8 cf       	rjmp	.-48     	; 0x454 <taskScheduler+0x1a>
     484:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <runPt+0x1>
     488:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <runPt>
     48c:	e3 cf       	rjmp	.-58     	; 0x454 <taskScheduler+0x1a>
     48e:	00 84       	ldd	r0, Z+8	; 0x08
     490:	f1 85       	ldd	r31, Z+9	; 0x09
     492:	e0 2d       	mov	r30, r0
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	93 81       	ldd	r25, Z+3	; 0x03
     498:	89 2b       	or	r24, r25
     49a:	c9 f7       	brne	.-14     	; 0x48e <taskScheduler+0x54>
     49c:	f0 93 99 01 	sts	0x0199, r31	; 0x800199 <runPt+0x1>
     4a0:	e0 93 98 01 	sts	0x0198, r30	; 0x800198 <runPt>
     4a4:	08 95       	ret

000004a6 <__vector_11>:
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	0f 92       	push	r0
     4ae:	1f 92       	push	r1
     4b0:	2f 92       	push	r2
     4b2:	3f 92       	push	r3
     4b4:	4f 92       	push	r4
     4b6:	5f 92       	push	r5
     4b8:	6f 92       	push	r6
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	2f 93       	push	r18
     4d2:	3f 93       	push	r19
     4d4:	4f 93       	push	r20
     4d6:	5f 93       	push	r21
     4d8:	6f 93       	push	r22
     4da:	7f 93       	push	r23
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	af 93       	push	r26
     4e2:	bf 93       	push	r27
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
     4ec:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <currSp>
     4f0:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <currSp+0x1>
     4f4:	0d b6       	in	r0, 0x3d	; 61
     4f6:	0d 92       	st	X+, r0
     4f8:	0e b6       	in	r0, 0x3e	; 62
     4fa:	0d 92       	st	X+, r0
     4fc:	0e 94 1d 02 	call	0x43a	; 0x43a <taskScheduler>
     500:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <runPt>
     504:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <runPt+0x1>
     508:	cf 01       	movw	r24, r30
     50a:	04 96       	adiw	r24, 0x04	; 4
     50c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <currSp+0x1>
     510:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <currSp>
     514:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <currSp>
     518:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <currSp+0x1>
     51c:	cd 91       	ld	r28, X+
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	dd 91       	ld	r29, X+
     522:	de bf       	out	0x3e, r29	; 62
     524:	87 81       	ldd	r24, Z+7	; 0x07
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	59 f4       	brne	.+22     	; 0x540 <__vector_11+0x9a>
     52a:	78 94       	sei
     52c:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <runPt>
     530:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <runPt+0x1>
     534:	17 82       	std	Z+7, r1	; 0x07
     536:	01 90       	ld	r0, Z+
     538:	f0 81       	ld	r31, Z
     53a:	e0 2d       	mov	r30, r0
     53c:	09 95       	icall
     53e:	2b c0       	rjmp	.+86     	; 0x596 <OSwait>
     540:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <currSp>
     544:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <currSp+0x1>
     548:	cd 91       	ld	r28, X+
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	dd 91       	ld	r29, X+
     54e:	de bf       	out	0x3e, r29	; 62
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	9f 90       	pop	r9
     57e:	8f 90       	pop	r8
     580:	7f 90       	pop	r7
     582:	6f 90       	pop	r6
     584:	5f 90       	pop	r5
     586:	4f 90       	pop	r4
     588:	3f 90       	pop	r3
     58a:	2f 90       	pop	r2
     58c:	1f 90       	pop	r1
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	18 95       	reti

00000596 <OSwait>:
}

void OSwait(volatile int *s)
{
     596:	fc 01       	movw	r30, r24
	cli();
     598:	f8 94       	cli
	(*s)--;
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
	if((*s) < 0)
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	99 23       	and	r25, r25
     5aa:	5c f4       	brge	.+22     	; 0x5c2 <OSwait+0x2c>
	{
		runPt->blocked = s;
     5ac:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <runPt>
     5b0:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <runPt+0x1>
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	fc 93       	st	X, r31
     5b8:	ee 93       	st	-X, r30
     5ba:	12 97       	sbiw	r26, 0x02	; 2
		sei();
     5bc:	78 94       	sei
	asm volatile("ret");
}

void OSsuspend(void)
{
	TIMER1_COMPA_vect();
     5be:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__vector_11>
	{
		runPt->blocked = s;
		sei();
		OSsuspend();
	}
	sei();
     5c2:	78 94       	sei
     5c4:	08 95       	ret

000005c6 <OSsignal>:
}

void OSsignal(volatile int *s)
{
     5c6:	dc 01       	movw	r26, r24
	taskTCB *temp;
	cli();
     5c8:	f8 94       	cli
	(*s)++;
     5ca:	8d 91       	ld	r24, X+
     5cc:	9c 91       	ld	r25, X
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	11 96       	adiw	r26, 0x01	; 1
     5d4:	9c 93       	st	X, r25
     5d6:	8e 93       	st	-X, r24
	if((*s) < 0)
     5d8:	8d 91       	ld	r24, X+
     5da:	9c 91       	ld	r25, X
     5dc:	11 97       	sbiw	r26, 0x01	; 1
     5de:	99 23       	and	r25, r25
     5e0:	b4 f4       	brge	.+44     	; 0x60e <OSsignal+0x48>
	{
		temp = head->next;
     5e2:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <head>
     5e6:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <head+0x1>
     5ea:	00 84       	ldd	r0, Z+8	; 0x08
     5ec:	f1 85       	ldd	r31, Z+9	; 0x09
     5ee:	e0 2d       	mov	r30, r0
		while(temp->blocked != s)
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	a8 17       	cp	r26, r24
     5f6:	b9 07       	cpc	r27, r25
     5f8:	41 f0       	breq	.+16     	; 0x60a <OSsignal+0x44>
		{
			temp = temp->next;
     5fa:	00 84       	ldd	r0, Z+8	; 0x08
     5fc:	f1 85       	ldd	r31, Z+9	; 0x09
     5fe:	e0 2d       	mov	r30, r0
	cli();
	(*s)++;
	if((*s) < 0)
	{
		temp = head->next;
		while(temp->blocked != s)
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	a8 17       	cp	r26, r24
     606:	b9 07       	cpc	r27, r25
     608:	c1 f7       	brne	.-16     	; 0x5fa <OSsignal+0x34>
		{
			temp = temp->next;
		}
		temp->blocked = NULL;
     60a:	13 82       	std	Z+3, r1	; 0x03
     60c:	12 82       	std	Z+2, r1	; 0x02
	}
	sei();
     60e:	78 94       	sei
     610:	08 95       	ret

00000612 <FIFOinit>:
}

void FIFOinit()
{

	currentSize = 0;
     612:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <currentSize+0x1>
     616:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <currentSize>
	currSize = &currentSize;
     61a:	8a e9       	ldi	r24, 0x9A	; 154
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <currSize+0x1>
     622:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <currSize>
	putI = 0;
     626:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <putI>
	getI = 0;
     62a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <getI>
     62e:	08 95       	ret

00000630 <OSinit>:
	}
}

void OSinit(void)
{
	cli();
     630:	f8 94       	cli
	timerInit();
     632:	0e 94 9e 01 	call	0x33c	; 0x33c <timerInit>
	adcInit();
     636:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <adcInit>
	head->next = NULL;
     63a:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <head>
     63e:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <head+0x1>
     642:	11 86       	std	Z+9, r1	; 0x09
     644:	10 86       	std	Z+8, r1	; 0x08
	head->status = HEAD;
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	84 87       	std	Z+12, r24	; 0x0c
	runPt = head;
     64a:	f0 93 99 01 	sts	0x0199, r31	; 0x800199 <runPt+0x1>
     64e:	e0 93 98 01 	sts	0x0198, r30	; 0x800198 <runPt>
	stackUsed = 0;
     652:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <stackUsed+0x1>
     656:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <stackUsed>
	tasksCreated = 0;
     65a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <tasksCreated>
	FIFOinit();
     65e:	0e 94 09 03 	call	0x612	; 0x612 <FIFOinit>
     662:	08 95       	ret

00000664 <FIFOput>:
	getI = 0;
}


int FIFOput(int data)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
	if((*currSize) >= FIFOSIZE)
     668:	c0 91 6e 02 	lds	r28, 0x026E	; 0x80026e <currSize>
     66c:	d0 91 6f 02 	lds	r29, 0x026F	; 0x80026f <currSize+0x1>
     670:	28 81       	ld	r18, Y
     672:	39 81       	ldd	r19, Y+1	; 0x01
     674:	24 36       	cpi	r18, 0x64	; 100
     676:	31 05       	cpc	r19, r1
     678:	c4 f4       	brge	.+48     	; 0x6aa <FIFOput+0x46>
		return -1;
	else
	{
		FIFO[putI] = data;
     67a:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <putI>
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	e3 56       	subi	r30, 0x63	; 99
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
		putI = (putI + 1) % FIFOSIZE;
     68e:	c9 01       	movw	r24, r18
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	64 e6       	ldi	r22, 0x64	; 100
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	0e 94 06 04 	call	0x80c	; 0x80c <__divmodhi4>
     69a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <putI>
		OSsignal(currSize);
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <OSsignal>
		return 0;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <FIFOput+0x4a>


int FIFOput(int data)
{
	if((*currSize) >= FIFOSIZE)
		return -1;
     6aa:	8f ef       	ldi	r24, 0xFF	; 255
     6ac:	9f ef       	ldi	r25, 0xFF	; 255
		FIFO[putI] = data;
		putI = (putI + 1) % FIFOSIZE;
		OSsignal(currSize);
		return 0;
	}
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <FIFOget>:

int FIFOget()
{
	int data;
	OSwait(currSize);
     6b4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <currSize>
     6b8:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <currSize+0x1>
     6bc:	0e 94 cb 02 	call	0x596	; 0x596 <OSwait>
	data = FIFO[getI];
     6c0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <getI>
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	e3 56       	subi	r30, 0x63	; 99
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	20 81       	ld	r18, Z
     6d2:	31 81       	ldd	r19, Z+1	; 0x01
	getI = (getI + 1) % FIFOSIZE;
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	64 e6       	ldi	r22, 0x64	; 100
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 06 04 	call	0x80c	; 0x80c <__divmodhi4>
     6de:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <getI>
	return data;
}
     6e2:	c9 01       	movw	r24, r18
     6e4:	08 95       	ret

000006e6 <uart_putch>:
	while (UCSR0A & (1<<RXC0))
	dummy =  UDR0;
}

int uart_putch ( char ch, FILE *stream )
{
     6e6:	cf 93       	push	r28
     6e8:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     6ea:	8a 30       	cpi	r24, 0x0A	; 10
     6ec:	19 f4       	brne	.+6      	; 0x6f4 <uart_putch+0xe>
	uart_putch('\r', stream);
     6ee:	8d e0       	ldi	r24, 0x0D	; 13
     6f0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <uart_putch>
	while(!(UCSR0A & (1<<UDRE0)));
     6f4:	e0 ec       	ldi	r30, 0xC0	; 192
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	85 ff       	sbrs	r24, 5
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <uart_putch+0x12>
	UDR0 = ch;
     6fe:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <uart_getch>:

int uart_getch(FILE *stream)
{
	unsigned char ch = '\0';
	while (!(UCSR0A & (1<<RXC0)));
     70a:	e0 ec       	ldi	r30, 0xC0	; 192
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	88 23       	and	r24, r24
     712:	ec f7       	brge	.-6      	; 0x70e <uart_getch+0x4>
	ch = UDR0;
     714:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	return ch;
}
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	08 95       	ret

0000071c <uart_init>:

FILE uart_str = FDEV_SETUP_STREAM (uart_putch, uart_getch, _FDEV_SETUP_RW);

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD)/16)-1)>>8;
     71c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (((F_CPU/BAUD)/16)-1);
     720:	87 e6       	ldi	r24, 0x67	; 103
     722:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     726:	88 e1       	ldi	r24, 0x18	; 24
     728:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     72c:	86 e0       	ldi	r24, 0x06	; 6
     72e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     732:	08 95       	ret

00000734 <ansi_clear_screen>:
}

void ansi_clear_screen ( void )
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
	putchar(27);
     738:	c6 e7       	ldi	r28, 0x76	; 118
     73a:	d2 e0       	ldi	r29, 0x02	; 2
     73c:	6a 81       	ldd	r22, Y+2	; 0x02
     73e:	7b 81       	ldd	r23, Y+3	; 0x03
     740:	8b e1       	ldi	r24, 0x1B	; 27
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('[');
     748:	6a 81       	ldd	r22, Y+2	; 0x02
     74a:	7b 81       	ldd	r23, Y+3	; 0x03
     74c:	8b e5       	ldi	r24, 0x5B	; 91
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('H');
     754:	6a 81       	ldd	r22, Y+2	; 0x02
     756:	7b 81       	ldd	r23, Y+3	; 0x03
     758:	88 e4       	ldi	r24, 0x48	; 72
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar(27);
     760:	6a 81       	ldd	r22, Y+2	; 0x02
     762:	7b 81       	ldd	r23, Y+3	; 0x03
     764:	8b e1       	ldi	r24, 0x1B	; 27
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('[');
     76c:	6a 81       	ldd	r22, Y+2	; 0x02
     76e:	7b 81       	ldd	r23, Y+3	; 0x03
     770:	8b e5       	ldi	r24, 0x5B	; 91
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('J');
     778:	6a 81       	ldd	r22, Y+2	; 0x02
     77a:	7b 81       	ldd	r23, Y+3	; 0x03
     77c:	8a e4       	ldi	r24, 0x4A	; 74
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <ansi_me>:

void ansi_me(void)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
	putchar(27);
     78e:	c6 e7       	ldi	r28, 0x76	; 118
     790:	d2 e0       	ldi	r29, 0x02	; 2
     792:	6a 81       	ldd	r22, Y+2	; 0x02
     794:	7b 81       	ldd	r23, Y+3	; 0x03
     796:	8b e1       	ldi	r24, 0x1B	; 27
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('[');
     79e:	6a 81       	ldd	r22, Y+2	; 0x02
     7a0:	7b 81       	ldd	r23, Y+3	; 0x03
     7a2:	8b e5       	ldi	r24, 0x5B	; 91
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('0');
     7aa:	6a 81       	ldd	r22, Y+2	; 0x02
     7ac:	7b 81       	ldd	r23, Y+3	; 0x03
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
	putchar('m');
     7b6:	6a 81       	ldd	r22, Y+2	; 0x02
     7b8:	7b 81       	ldd	r23, Y+3	; 0x03
     7ba:	8d e6       	ldi	r24, 0x6D	; 109
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <uart_flush>:

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
     7c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     7cc:	88 23       	and	r24, r24
     7ce:	44 f4       	brge	.+16     	; 0x7e0 <uart_flush+0x18>
	dummy =  UDR0;
     7d0:	a6 ec       	ldi	r26, 0xC6	; 198
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
     7d4:	e0 ec       	ldi	r30, 0xC0	; 192
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
	dummy =  UDR0;
     7d8:	8c 91       	ld	r24, X
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
     7da:	80 81       	ld	r24, Z
     7dc:	88 23       	and	r24, r24
     7de:	e4 f3       	brlt	.-8      	; 0x7d8 <uart_flush+0x10>
     7e0:	08 95       	ret

000007e2 <consoleDisplay>:
	return ch;
}

void consoleDisplay(void)
{
	stdout = stdin = &uart_str;
     7e2:	e6 e7       	ldi	r30, 0x76	; 118
     7e4:	f2 e0       	ldi	r31, 0x02	; 2
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	91 83       	std	Z+1, r25	; 0x01
     7ec:	80 83       	st	Z, r24
     7ee:	93 83       	std	Z+3, r25	; 0x03
     7f0:	82 83       	std	Z+2, r24	; 0x02
	uart_init();
     7f2:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_init>
	ansi_me();
     7f6:	0e 94 c5 03 	call	0x78a	; 0x78a <ansi_me>
	ansi_clear_screen();
     7fa:	0e 94 9a 03 	call	0x734	; 0x734 <ansi_clear_screen>
	ansi_me();
     7fe:	0e 94 c5 03 	call	0x78a	; 0x78a <ansi_me>
	ansi_clear_screen();
     802:	0e 94 9a 03 	call	0x734	; 0x734 <ansi_clear_screen>
	uart_flush();
     806:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uart_flush>
     80a:	08 95       	ret

0000080c <__divmodhi4>:
     80c:	97 fb       	bst	r25, 7
     80e:	07 2e       	mov	r0, r23
     810:	16 f4       	brtc	.+4      	; 0x816 <__divmodhi4+0xa>
     812:	00 94       	com	r0
     814:	07 d0       	rcall	.+14     	; 0x824 <__divmodhi4_neg1>
     816:	77 fd       	sbrc	r23, 7
     818:	09 d0       	rcall	.+18     	; 0x82c <__divmodhi4_neg2>
     81a:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
     81e:	07 fc       	sbrc	r0, 7
     820:	05 d0       	rcall	.+10     	; 0x82c <__divmodhi4_neg2>
     822:	3e f4       	brtc	.+14     	; 0x832 <__divmodhi4_exit>

00000824 <__divmodhi4_neg1>:
     824:	90 95       	com	r25
     826:	81 95       	neg	r24
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	08 95       	ret

0000082c <__divmodhi4_neg2>:
     82c:	70 95       	com	r23
     82e:	61 95       	neg	r22
     830:	7f 4f       	sbci	r23, 0xFF	; 255

00000832 <__divmodhi4_exit>:
     832:	08 95       	ret

00000834 <__udivmodhi4>:
     834:	aa 1b       	sub	r26, r26
     836:	bb 1b       	sub	r27, r27
     838:	51 e1       	ldi	r21, 0x11	; 17
     83a:	07 c0       	rjmp	.+14     	; 0x84a <__udivmodhi4_ep>

0000083c <__udivmodhi4_loop>:
     83c:	aa 1f       	adc	r26, r26
     83e:	bb 1f       	adc	r27, r27
     840:	a6 17       	cp	r26, r22
     842:	b7 07       	cpc	r27, r23
     844:	10 f0       	brcs	.+4      	; 0x84a <__udivmodhi4_ep>
     846:	a6 1b       	sub	r26, r22
     848:	b7 0b       	sbc	r27, r23

0000084a <__udivmodhi4_ep>:
     84a:	88 1f       	adc	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	5a 95       	dec	r21
     850:	a9 f7       	brne	.-22     	; 0x83c <__udivmodhi4_loop>
     852:	80 95       	com	r24
     854:	90 95       	com	r25
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	08 95       	ret

0000085c <malloc>:
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	91 05       	cpc	r25, r1
     868:	10 f4       	brcc	.+4      	; 0x86e <malloc+0x12>
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__flp>
     872:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__flp+0x1>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	30 97       	sbiw	r30, 0x00	; 0
     880:	19 f1       	breq	.+70     	; 0x8c8 <malloc+0x6c>
     882:	40 81       	ld	r20, Z
     884:	51 81       	ldd	r21, Z+1	; 0x01
     886:	02 81       	ldd	r16, Z+2	; 0x02
     888:	13 81       	ldd	r17, Z+3	; 0x03
     88a:	48 17       	cp	r20, r24
     88c:	59 07       	cpc	r21, r25
     88e:	c8 f0       	brcs	.+50     	; 0x8c2 <malloc+0x66>
     890:	84 17       	cp	r24, r20
     892:	95 07       	cpc	r25, r21
     894:	69 f4       	brne	.+26     	; 0x8b0 <malloc+0x54>
     896:	10 97       	sbiw	r26, 0x00	; 0
     898:	31 f0       	breq	.+12     	; 0x8a6 <malloc+0x4a>
     89a:	12 96       	adiw	r26, 0x02	; 2
     89c:	0c 93       	st	X, r16
     89e:	12 97       	sbiw	r26, 0x02	; 2
     8a0:	13 96       	adiw	r26, 0x03	; 3
     8a2:	1c 93       	st	X, r17
     8a4:	27 c0       	rjmp	.+78     	; 0x8f4 <malloc+0x98>
     8a6:	00 93 74 02 	sts	0x0274, r16	; 0x800274 <__flp>
     8aa:	10 93 75 02 	sts	0x0275, r17	; 0x800275 <__flp+0x1>
     8ae:	22 c0       	rjmp	.+68     	; 0x8f4 <malloc+0x98>
     8b0:	21 15       	cp	r18, r1
     8b2:	31 05       	cpc	r19, r1
     8b4:	19 f0       	breq	.+6      	; 0x8bc <malloc+0x60>
     8b6:	42 17       	cp	r20, r18
     8b8:	53 07       	cpc	r21, r19
     8ba:	18 f4       	brcc	.+6      	; 0x8c2 <malloc+0x66>
     8bc:	9a 01       	movw	r18, r20
     8be:	bd 01       	movw	r22, r26
     8c0:	ef 01       	movw	r28, r30
     8c2:	df 01       	movw	r26, r30
     8c4:	f8 01       	movw	r30, r16
     8c6:	db cf       	rjmp	.-74     	; 0x87e <malloc+0x22>
     8c8:	21 15       	cp	r18, r1
     8ca:	31 05       	cpc	r19, r1
     8cc:	f9 f0       	breq	.+62     	; 0x90c <__stack+0xd>
     8ce:	28 1b       	sub	r18, r24
     8d0:	39 0b       	sbc	r19, r25
     8d2:	24 30       	cpi	r18, 0x04	; 4
     8d4:	31 05       	cpc	r19, r1
     8d6:	80 f4       	brcc	.+32     	; 0x8f8 <malloc+0x9c>
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	9b 81       	ldd	r25, Y+3	; 0x03
     8dc:	61 15       	cp	r22, r1
     8de:	71 05       	cpc	r23, r1
     8e0:	21 f0       	breq	.+8      	; 0x8ea <malloc+0x8e>
     8e2:	fb 01       	movw	r30, r22
     8e4:	93 83       	std	Z+3, r25	; 0x03
     8e6:	82 83       	std	Z+2, r24	; 0x02
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <malloc+0x96>
     8ea:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__flp+0x1>
     8ee:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__flp>
     8f2:	fe 01       	movw	r30, r28
     8f4:	32 96       	adiw	r30, 0x02	; 2
     8f6:	44 c0       	rjmp	.+136    	; 0x980 <__stack+0x81>
     8f8:	fe 01       	movw	r30, r28
     8fa:	e2 0f       	add	r30, r18
     8fc:	f3 1f       	adc	r31, r19
     8fe:	81 93       	st	Z+, r24
     900:	91 93       	st	Z+, r25
     902:	22 50       	subi	r18, 0x02	; 2
     904:	31 09       	sbc	r19, r1
     906:	39 83       	std	Y+1, r19	; 0x01
     908:	28 83       	st	Y, r18
     90a:	3a c0       	rjmp	.+116    	; 0x980 <__stack+0x81>
     90c:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
     910:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
     914:	23 2b       	or	r18, r19
     916:	41 f4       	brne	.+16     	; 0x928 <__stack+0x29>
     918:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     91c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     920:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <__brkval+0x1>
     924:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <__brkval>
     928:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     92c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 f4       	brne	.+16     	; 0x946 <__stack+0x47>
     936:	2d b7       	in	r18, 0x3d	; 61
     938:	3e b7       	in	r19, 0x3e	; 62
     93a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     93e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     942:	24 1b       	sub	r18, r20
     944:	35 0b       	sbc	r19, r21
     946:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <__brkval>
     94a:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <__brkval+0x1>
     94e:	e2 17       	cp	r30, r18
     950:	f3 07       	cpc	r31, r19
     952:	a0 f4       	brcc	.+40     	; 0x97c <__stack+0x7d>
     954:	2e 1b       	sub	r18, r30
     956:	3f 0b       	sbc	r19, r31
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	78 f0       	brcs	.+30     	; 0x97c <__stack+0x7d>
     95e:	ac 01       	movw	r20, r24
     960:	4e 5f       	subi	r20, 0xFE	; 254
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	24 17       	cp	r18, r20
     966:	35 07       	cpc	r19, r21
     968:	48 f0       	brcs	.+18     	; 0x97c <__stack+0x7d>
     96a:	4e 0f       	add	r20, r30
     96c:	5f 1f       	adc	r21, r31
     96e:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <__brkval+0x1>
     972:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <__brkval>
     976:	81 93       	st	Z+, r24
     978:	91 93       	st	Z+, r25
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
     97c:	e0 e0       	ldi	r30, 0x00	; 0
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	cf 01       	movw	r24, r30
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <free>:
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	09 f4       	brne	.+2      	; 0x996 <free+0xa>
     994:	81 c0       	rjmp	.+258    	; 0xa98 <free+0x10c>
     996:	fc 01       	movw	r30, r24
     998:	32 97       	sbiw	r30, 0x02	; 2
     99a:	13 82       	std	Z+3, r1	; 0x03
     99c:	12 82       	std	Z+2, r1	; 0x02
     99e:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <__flp>
     9a2:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <__flp+0x1>
     9a6:	10 97       	sbiw	r26, 0x00	; 0
     9a8:	81 f4       	brne	.+32     	; 0x9ca <free+0x3e>
     9aa:	20 81       	ld	r18, Z
     9ac:	31 81       	ldd	r19, Z+1	; 0x01
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
     9b6:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
     9ba:	28 17       	cp	r18, r24
     9bc:	39 07       	cpc	r19, r25
     9be:	51 f5       	brne	.+84     	; 0xa14 <free+0x88>
     9c0:	f0 93 73 02 	sts	0x0273, r31	; 0x800273 <__brkval+0x1>
     9c4:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <__brkval>
     9c8:	67 c0       	rjmp	.+206    	; 0xa98 <free+0x10c>
     9ca:	ed 01       	movw	r28, r26
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	ce 17       	cp	r28, r30
     9d2:	df 07       	cpc	r29, r31
     9d4:	40 f4       	brcc	.+16     	; 0x9e6 <free+0x5a>
     9d6:	4a 81       	ldd	r20, Y+2	; 0x02
     9d8:	5b 81       	ldd	r21, Y+3	; 0x03
     9da:	9e 01       	movw	r18, r28
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	f1 f0       	breq	.+60     	; 0xa1e <free+0x92>
     9e2:	ea 01       	movw	r28, r20
     9e4:	f5 cf       	rjmp	.-22     	; 0x9d0 <free+0x44>
     9e6:	d3 83       	std	Z+3, r29	; 0x03
     9e8:	c2 83       	std	Z+2, r28	; 0x02
     9ea:	40 81       	ld	r20, Z
     9ec:	51 81       	ldd	r21, Z+1	; 0x01
     9ee:	84 0f       	add	r24, r20
     9f0:	95 1f       	adc	r25, r21
     9f2:	c8 17       	cp	r28, r24
     9f4:	d9 07       	cpc	r29, r25
     9f6:	59 f4       	brne	.+22     	; 0xa0e <free+0x82>
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	84 0f       	add	r24, r20
     9fe:	95 1f       	adc	r25, r21
     a00:	02 96       	adiw	r24, 0x02	; 2
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
     a06:	8a 81       	ldd	r24, Y+2	; 0x02
     a08:	9b 81       	ldd	r25, Y+3	; 0x03
     a0a:	93 83       	std	Z+3, r25	; 0x03
     a0c:	82 83       	std	Z+2, r24	; 0x02
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	29 f4       	brne	.+10     	; 0xa1e <free+0x92>
     a14:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__flp+0x1>
     a18:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__flp>
     a1c:	3d c0       	rjmp	.+122    	; 0xa98 <free+0x10c>
     a1e:	e9 01       	movw	r28, r18
     a20:	fb 83       	std	Y+3, r31	; 0x03
     a22:	ea 83       	std	Y+2, r30	; 0x02
     a24:	49 91       	ld	r20, Y+
     a26:	59 91       	ld	r21, Y+
     a28:	c4 0f       	add	r28, r20
     a2a:	d5 1f       	adc	r29, r21
     a2c:	ec 17       	cp	r30, r28
     a2e:	fd 07       	cpc	r31, r29
     a30:	61 f4       	brne	.+24     	; 0xa4a <free+0xbe>
     a32:	80 81       	ld	r24, Z
     a34:	91 81       	ldd	r25, Z+1	; 0x01
     a36:	84 0f       	add	r24, r20
     a38:	95 1f       	adc	r25, r21
     a3a:	02 96       	adiw	r24, 0x02	; 2
     a3c:	e9 01       	movw	r28, r18
     a3e:	99 83       	std	Y+1, r25	; 0x01
     a40:	88 83       	st	Y, r24
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	9b 83       	std	Y+3, r25	; 0x03
     a48:	8a 83       	std	Y+2, r24	; 0x02
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	8d 91       	ld	r24, X+
     a52:	9c 91       	ld	r25, X
     a54:	13 97       	sbiw	r26, 0x03	; 3
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	19 f0       	breq	.+6      	; 0xa60 <free+0xd4>
     a5a:	fd 01       	movw	r30, r26
     a5c:	dc 01       	movw	r26, r24
     a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <free+0xc2>
     a60:	8d 91       	ld	r24, X+
     a62:	9c 91       	ld	r25, X
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	9d 01       	movw	r18, r26
     a68:	2e 5f       	subi	r18, 0xFE	; 254
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	82 0f       	add	r24, r18
     a6e:	93 1f       	adc	r25, r19
     a70:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
     a74:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
     a78:	28 17       	cp	r18, r24
     a7a:	39 07       	cpc	r19, r25
     a7c:	69 f4       	brne	.+26     	; 0xa98 <free+0x10c>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	29 f4       	brne	.+10     	; 0xa8c <free+0x100>
     a82:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <__flp+0x1>
     a86:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__flp>
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <free+0x104>
     a8c:	13 82       	std	Z+3, r1	; 0x03
     a8e:	12 82       	std	Z+2, r1	; 0x02
     a90:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <__brkval+0x1>
     a94:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <__brkval>
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <fputc>:
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	fb 01       	movw	r30, r22
     aa8:	23 81       	ldd	r18, Z+3	; 0x03
     aaa:	21 fd       	sbrc	r18, 1
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <fputc+0x16>
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	2c c0       	rjmp	.+88     	; 0xb0c <fputc+0x6e>
     ab4:	22 ff       	sbrs	r18, 2
     ab6:	16 c0       	rjmp	.+44     	; 0xae4 <fputc+0x46>
     ab8:	46 81       	ldd	r20, Z+6	; 0x06
     aba:	57 81       	ldd	r21, Z+7	; 0x07
     abc:	24 81       	ldd	r18, Z+4	; 0x04
     abe:	35 81       	ldd	r19, Z+5	; 0x05
     ac0:	42 17       	cp	r20, r18
     ac2:	53 07       	cpc	r21, r19
     ac4:	44 f4       	brge	.+16     	; 0xad6 <fputc+0x38>
     ac6:	a0 81       	ld	r26, Z
     ac8:	b1 81       	ldd	r27, Z+1	; 0x01
     aca:	9d 01       	movw	r18, r26
     acc:	2f 5f       	subi	r18, 0xFF	; 255
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	31 83       	std	Z+1, r19	; 0x01
     ad2:	20 83       	st	Z, r18
     ad4:	8c 93       	st	X, r24
     ad6:	26 81       	ldd	r18, Z+6	; 0x06
     ad8:	37 81       	ldd	r19, Z+7	; 0x07
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	37 83       	std	Z+7, r19	; 0x07
     ae0:	26 83       	std	Z+6, r18	; 0x06
     ae2:	14 c0       	rjmp	.+40     	; 0xb0c <fputc+0x6e>
     ae4:	8b 01       	movw	r16, r22
     ae6:	ec 01       	movw	r28, r24
     ae8:	fb 01       	movw	r30, r22
     aea:	00 84       	ldd	r0, Z+8	; 0x08
     aec:	f1 85       	ldd	r31, Z+9	; 0x09
     aee:	e0 2d       	mov	r30, r0
     af0:	09 95       	icall
     af2:	89 2b       	or	r24, r25
     af4:	e1 f6       	brne	.-72     	; 0xaae <fputc+0x10>
     af6:	d8 01       	movw	r26, r16
     af8:	16 96       	adiw	r26, 0x06	; 6
     afa:	8d 91       	ld	r24, X+
     afc:	9c 91       	ld	r25, X
     afe:	17 97       	sbiw	r26, 0x07	; 7
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	17 96       	adiw	r26, 0x07	; 7
     b04:	9c 93       	st	X, r25
     b06:	8e 93       	st	-X, r24
     b08:	16 97       	sbiw	r26, 0x06	; 6
     b0a:	ce 01       	movw	r24, r28
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <printf>:
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e1 e9       	ldi	r30, 0x91	; 145
     b1c:	f5 e0       	ldi	r31, 0x05	; 5
     b1e:	0c 94 36 08 	jmp	0x106c	; 0x106c <__prologue_saves__+0x20>
     b22:	ae 01       	movw	r20, r28
     b24:	4b 5f       	subi	r20, 0xFB	; 251
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	fa 01       	movw	r30, r20
     b2a:	61 91       	ld	r22, Z+
     b2c:	71 91       	ld	r23, Z+
     b2e:	af 01       	movw	r20, r30
     b30:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__iob+0x2>
     b34:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__iob+0x3>
     b38:	0e 94 d1 05 	call	0xba2	; 0xba2 <vfprintf>
     b3c:	e2 e0       	ldi	r30, 0x02	; 2
     b3e:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__+0x20>

00000b42 <puts>:
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <__iob+0x2>
     b4e:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <__iob+0x3>
     b52:	23 81       	ldd	r18, Z+3	; 0x03
     b54:	21 ff       	sbrs	r18, 1
     b56:	1b c0       	rjmp	.+54     	; 0xb8e <puts+0x4c>
     b58:	8c 01       	movw	r16, r24
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	f8 01       	movw	r30, r16
     b60:	81 91       	ld	r24, Z+
     b62:	8f 01       	movw	r16, r30
     b64:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <__iob+0x2>
     b68:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <__iob+0x3>
     b6c:	db 01       	movw	r26, r22
     b6e:	18 96       	adiw	r26, 0x08	; 8
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	19 97       	sbiw	r26, 0x09	; 9
     b76:	88 23       	and	r24, r24
     b78:	31 f0       	breq	.+12     	; 0xb86 <puts+0x44>
     b7a:	09 95       	icall
     b7c:	89 2b       	or	r24, r25
     b7e:	79 f3       	breq	.-34     	; 0xb5e <puts+0x1c>
     b80:	df ef       	ldi	r29, 0xFF	; 255
     b82:	cf ef       	ldi	r28, 0xFF	; 255
     b84:	ec cf       	rjmp	.-40     	; 0xb5e <puts+0x1c>
     b86:	8a e0       	ldi	r24, 0x0A	; 10
     b88:	09 95       	icall
     b8a:	89 2b       	or	r24, r25
     b8c:	19 f0       	breq	.+6      	; 0xb94 <puts+0x52>
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <puts+0x56>
     b94:	8d 2f       	mov	r24, r29
     b96:	9c 2f       	mov	r25, r28
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <vfprintf>:
     ba2:	ab e0       	ldi	r26, 0x0B	; 11
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	0c 94 26 08 	jmp	0x104c	; 0x104c <__prologue_saves__>
     bae:	6c 01       	movw	r12, r24
     bb0:	7b 01       	movw	r14, r22
     bb2:	8a 01       	movw	r16, r20
     bb4:	fc 01       	movw	r30, r24
     bb6:	17 82       	std	Z+7, r1	; 0x07
     bb8:	16 82       	std	Z+6, r1	; 0x06
     bba:	83 81       	ldd	r24, Z+3	; 0x03
     bbc:	81 ff       	sbrs	r24, 1
     bbe:	cc c1       	rjmp	.+920    	; 0xf58 <vfprintf+0x3b6>
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	3c 01       	movw	r6, r24
     bc6:	f6 01       	movw	r30, r12
     bc8:	93 81       	ldd	r25, Z+3	; 0x03
     bca:	f7 01       	movw	r30, r14
     bcc:	93 fd       	sbrc	r25, 3
     bce:	85 91       	lpm	r24, Z+
     bd0:	93 ff       	sbrs	r25, 3
     bd2:	81 91       	ld	r24, Z+
     bd4:	7f 01       	movw	r14, r30
     bd6:	88 23       	and	r24, r24
     bd8:	09 f4       	brne	.+2      	; 0xbdc <vfprintf+0x3a>
     bda:	ba c1       	rjmp	.+884    	; 0xf50 <vfprintf+0x3ae>
     bdc:	85 32       	cpi	r24, 0x25	; 37
     bde:	39 f4       	brne	.+14     	; 0xbee <vfprintf+0x4c>
     be0:	93 fd       	sbrc	r25, 3
     be2:	85 91       	lpm	r24, Z+
     be4:	93 ff       	sbrs	r25, 3
     be6:	81 91       	ld	r24, Z+
     be8:	7f 01       	movw	r14, r30
     bea:	85 32       	cpi	r24, 0x25	; 37
     bec:	29 f4       	brne	.+10     	; 0xbf8 <vfprintf+0x56>
     bee:	b6 01       	movw	r22, r12
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     bf6:	e7 cf       	rjmp	.-50     	; 0xbc6 <vfprintf+0x24>
     bf8:	91 2c       	mov	r9, r1
     bfa:	21 2c       	mov	r2, r1
     bfc:	31 2c       	mov	r3, r1
     bfe:	ff e1       	ldi	r31, 0x1F	; 31
     c00:	f3 15       	cp	r31, r3
     c02:	d8 f0       	brcs	.+54     	; 0xc3a <vfprintf+0x98>
     c04:	8b 32       	cpi	r24, 0x2B	; 43
     c06:	79 f0       	breq	.+30     	; 0xc26 <vfprintf+0x84>
     c08:	38 f4       	brcc	.+14     	; 0xc18 <vfprintf+0x76>
     c0a:	80 32       	cpi	r24, 0x20	; 32
     c0c:	79 f0       	breq	.+30     	; 0xc2c <vfprintf+0x8a>
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	a1 f4       	brne	.+40     	; 0xc3a <vfprintf+0x98>
     c12:	23 2d       	mov	r18, r3
     c14:	20 61       	ori	r18, 0x10	; 16
     c16:	1d c0       	rjmp	.+58     	; 0xc52 <vfprintf+0xb0>
     c18:	8d 32       	cpi	r24, 0x2D	; 45
     c1a:	61 f0       	breq	.+24     	; 0xc34 <vfprintf+0x92>
     c1c:	80 33       	cpi	r24, 0x30	; 48
     c1e:	69 f4       	brne	.+26     	; 0xc3a <vfprintf+0x98>
     c20:	23 2d       	mov	r18, r3
     c22:	21 60       	ori	r18, 0x01	; 1
     c24:	16 c0       	rjmp	.+44     	; 0xc52 <vfprintf+0xb0>
     c26:	83 2d       	mov	r24, r3
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	38 2e       	mov	r3, r24
     c2c:	e3 2d       	mov	r30, r3
     c2e:	e4 60       	ori	r30, 0x04	; 4
     c30:	3e 2e       	mov	r3, r30
     c32:	2a c0       	rjmp	.+84     	; 0xc88 <vfprintf+0xe6>
     c34:	f3 2d       	mov	r31, r3
     c36:	f8 60       	ori	r31, 0x08	; 8
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <vfprintf+0xd2>
     c3a:	37 fc       	sbrc	r3, 7
     c3c:	2d c0       	rjmp	.+90     	; 0xc98 <vfprintf+0xf6>
     c3e:	20 ed       	ldi	r18, 0xD0	; 208
     c40:	28 0f       	add	r18, r24
     c42:	2a 30       	cpi	r18, 0x0A	; 10
     c44:	40 f0       	brcs	.+16     	; 0xc56 <vfprintf+0xb4>
     c46:	8e 32       	cpi	r24, 0x2E	; 46
     c48:	b9 f4       	brne	.+46     	; 0xc78 <vfprintf+0xd6>
     c4a:	36 fc       	sbrc	r3, 6
     c4c:	81 c1       	rjmp	.+770    	; 0xf50 <vfprintf+0x3ae>
     c4e:	23 2d       	mov	r18, r3
     c50:	20 64       	ori	r18, 0x40	; 64
     c52:	32 2e       	mov	r3, r18
     c54:	19 c0       	rjmp	.+50     	; 0xc88 <vfprintf+0xe6>
     c56:	36 fe       	sbrs	r3, 6
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0xc4>
     c5a:	8a e0       	ldi	r24, 0x0A	; 10
     c5c:	98 9e       	mul	r9, r24
     c5e:	20 0d       	add	r18, r0
     c60:	11 24       	eor	r1, r1
     c62:	92 2e       	mov	r9, r18
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <vfprintf+0xe6>
     c66:	ea e0       	ldi	r30, 0x0A	; 10
     c68:	2e 9e       	mul	r2, r30
     c6a:	20 0d       	add	r18, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	22 2e       	mov	r2, r18
     c70:	f3 2d       	mov	r31, r3
     c72:	f0 62       	ori	r31, 0x20	; 32
     c74:	3f 2e       	mov	r3, r31
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <vfprintf+0xe6>
     c78:	8c 36       	cpi	r24, 0x6C	; 108
     c7a:	21 f4       	brne	.+8      	; 0xc84 <vfprintf+0xe2>
     c7c:	83 2d       	mov	r24, r3
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	38 2e       	mov	r3, r24
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0xe6>
     c84:	88 36       	cpi	r24, 0x68	; 104
     c86:	41 f4       	brne	.+16     	; 0xc98 <vfprintf+0xf6>
     c88:	f7 01       	movw	r30, r14
     c8a:	93 fd       	sbrc	r25, 3
     c8c:	85 91       	lpm	r24, Z+
     c8e:	93 ff       	sbrs	r25, 3
     c90:	81 91       	ld	r24, Z+
     c92:	7f 01       	movw	r14, r30
     c94:	81 11       	cpse	r24, r1
     c96:	b3 cf       	rjmp	.-154    	; 0xbfe <vfprintf+0x5c>
     c98:	98 2f       	mov	r25, r24
     c9a:	9f 7d       	andi	r25, 0xDF	; 223
     c9c:	95 54       	subi	r25, 0x45	; 69
     c9e:	93 30       	cpi	r25, 0x03	; 3
     ca0:	28 f4       	brcc	.+10     	; 0xcac <vfprintf+0x10a>
     ca2:	0c 5f       	subi	r16, 0xFC	; 252
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	9f e3       	ldi	r25, 0x3F	; 63
     ca8:	99 83       	std	Y+1, r25	; 0x01
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <vfprintf+0x124>
     cac:	83 36       	cpi	r24, 0x63	; 99
     cae:	31 f0       	breq	.+12     	; 0xcbc <vfprintf+0x11a>
     cb0:	83 37       	cpi	r24, 0x73	; 115
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <vfprintf+0x12e>
     cb4:	83 35       	cpi	r24, 0x53	; 83
     cb6:	09 f0       	breq	.+2      	; 0xcba <vfprintf+0x118>
     cb8:	59 c0       	rjmp	.+178    	; 0xd6c <vfprintf+0x1ca>
     cba:	21 c0       	rjmp	.+66     	; 0xcfe <vfprintf+0x15c>
     cbc:	f8 01       	movw	r30, r16
     cbe:	80 81       	ld	r24, Z
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	0e 5f       	subi	r16, 0xFE	; 254
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	88 24       	eor	r8, r8
     cc8:	83 94       	inc	r8
     cca:	91 2c       	mov	r9, r1
     ccc:	53 01       	movw	r10, r6
     cce:	13 c0       	rjmp	.+38     	; 0xcf6 <vfprintf+0x154>
     cd0:	28 01       	movw	r4, r16
     cd2:	f2 e0       	ldi	r31, 0x02	; 2
     cd4:	4f 0e       	add	r4, r31
     cd6:	51 1c       	adc	r5, r1
     cd8:	f8 01       	movw	r30, r16
     cda:	a0 80       	ld	r10, Z
     cdc:	b1 80       	ldd	r11, Z+1	; 0x01
     cde:	36 fe       	sbrs	r3, 6
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x146>
     ce2:	69 2d       	mov	r22, r9
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x14a>
     ce8:	6f ef       	ldi	r22, 0xFF	; 255
     cea:	7f ef       	ldi	r23, 0xFF	; 255
     cec:	c5 01       	movw	r24, r10
     cee:	0e 94 bd 07 	call	0xf7a	; 0xf7a <strnlen>
     cf2:	4c 01       	movw	r8, r24
     cf4:	82 01       	movw	r16, r4
     cf6:	f3 2d       	mov	r31, r3
     cf8:	ff 77       	andi	r31, 0x7F	; 127
     cfa:	3f 2e       	mov	r3, r31
     cfc:	16 c0       	rjmp	.+44     	; 0xd2a <vfprintf+0x188>
     cfe:	28 01       	movw	r4, r16
     d00:	22 e0       	ldi	r18, 0x02	; 2
     d02:	42 0e       	add	r4, r18
     d04:	51 1c       	adc	r5, r1
     d06:	f8 01       	movw	r30, r16
     d08:	a0 80       	ld	r10, Z
     d0a:	b1 80       	ldd	r11, Z+1	; 0x01
     d0c:	36 fe       	sbrs	r3, 6
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <vfprintf+0x174>
     d10:	69 2d       	mov	r22, r9
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <vfprintf+0x178>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	7f ef       	ldi	r23, 0xFF	; 255
     d1a:	c5 01       	movw	r24, r10
     d1c:	0e 94 b2 07 	call	0xf64	; 0xf64 <strnlen_P>
     d20:	4c 01       	movw	r8, r24
     d22:	f3 2d       	mov	r31, r3
     d24:	f0 68       	ori	r31, 0x80	; 128
     d26:	3f 2e       	mov	r3, r31
     d28:	82 01       	movw	r16, r4
     d2a:	33 fc       	sbrc	r3, 3
     d2c:	1b c0       	rjmp	.+54     	; 0xd64 <vfprintf+0x1c2>
     d2e:	82 2d       	mov	r24, r2
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	88 16       	cp	r8, r24
     d34:	99 06       	cpc	r9, r25
     d36:	b0 f4       	brcc	.+44     	; 0xd64 <vfprintf+0x1c2>
     d38:	b6 01       	movw	r22, r12
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     d42:	2a 94       	dec	r2
     d44:	f4 cf       	rjmp	.-24     	; 0xd2e <vfprintf+0x18c>
     d46:	f5 01       	movw	r30, r10
     d48:	37 fc       	sbrc	r3, 7
     d4a:	85 91       	lpm	r24, Z+
     d4c:	37 fe       	sbrs	r3, 7
     d4e:	81 91       	ld	r24, Z+
     d50:	5f 01       	movw	r10, r30
     d52:	b6 01       	movw	r22, r12
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     d5a:	21 10       	cpse	r2, r1
     d5c:	2a 94       	dec	r2
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	82 1a       	sub	r8, r18
     d62:	91 08       	sbc	r9, r1
     d64:	81 14       	cp	r8, r1
     d66:	91 04       	cpc	r9, r1
     d68:	71 f7       	brne	.-36     	; 0xd46 <vfprintf+0x1a4>
     d6a:	e8 c0       	rjmp	.+464    	; 0xf3c <vfprintf+0x39a>
     d6c:	84 36       	cpi	r24, 0x64	; 100
     d6e:	11 f0       	breq	.+4      	; 0xd74 <vfprintf+0x1d2>
     d70:	89 36       	cpi	r24, 0x69	; 105
     d72:	41 f5       	brne	.+80     	; 0xdc4 <vfprintf+0x222>
     d74:	f8 01       	movw	r30, r16
     d76:	37 fe       	sbrs	r3, 7
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <vfprintf+0x1e6>
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	0c 5f       	subi	r16, 0xFC	; 252
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <vfprintf+0x1f6>
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	07 2e       	mov	r0, r23
     d8e:	00 0c       	add	r0, r0
     d90:	88 0b       	sbc	r24, r24
     d92:	99 0b       	sbc	r25, r25
     d94:	0e 5f       	subi	r16, 0xFE	; 254
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	f3 2d       	mov	r31, r3
     d9a:	ff 76       	andi	r31, 0x6F	; 111
     d9c:	3f 2e       	mov	r3, r31
     d9e:	97 ff       	sbrs	r25, 7
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <vfprintf+0x212>
     da2:	90 95       	com	r25
     da4:	80 95       	com	r24
     da6:	70 95       	com	r23
     da8:	61 95       	neg	r22
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	f0 68       	ori	r31, 0x80	; 128
     db2:	3f 2e       	mov	r3, r31
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	a3 01       	movw	r20, r6
     dba:	0e 94 c8 07 	call	0xf90	; 0xf90 <__ultoa_invert>
     dbe:	88 2e       	mov	r8, r24
     dc0:	86 18       	sub	r8, r6
     dc2:	45 c0       	rjmp	.+138    	; 0xe4e <vfprintf+0x2ac>
     dc4:	85 37       	cpi	r24, 0x75	; 117
     dc6:	31 f4       	brne	.+12     	; 0xdd4 <vfprintf+0x232>
     dc8:	23 2d       	mov	r18, r3
     dca:	2f 7e       	andi	r18, 0xEF	; 239
     dcc:	b2 2e       	mov	r11, r18
     dce:	2a e0       	ldi	r18, 0x0A	; 10
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	25 c0       	rjmp	.+74     	; 0xe1e <vfprintf+0x27c>
     dd4:	93 2d       	mov	r25, r3
     dd6:	99 7f       	andi	r25, 0xF9	; 249
     dd8:	b9 2e       	mov	r11, r25
     dda:	8f 36       	cpi	r24, 0x6F	; 111
     ddc:	c1 f0       	breq	.+48     	; 0xe0e <vfprintf+0x26c>
     dde:	18 f4       	brcc	.+6      	; 0xde6 <vfprintf+0x244>
     de0:	88 35       	cpi	r24, 0x58	; 88
     de2:	79 f0       	breq	.+30     	; 0xe02 <vfprintf+0x260>
     de4:	b5 c0       	rjmp	.+362    	; 0xf50 <vfprintf+0x3ae>
     de6:	80 37       	cpi	r24, 0x70	; 112
     de8:	19 f0       	breq	.+6      	; 0xdf0 <vfprintf+0x24e>
     dea:	88 37       	cpi	r24, 0x78	; 120
     dec:	21 f0       	breq	.+8      	; 0xdf6 <vfprintf+0x254>
     dee:	b0 c0       	rjmp	.+352    	; 0xf50 <vfprintf+0x3ae>
     df0:	e9 2f       	mov	r30, r25
     df2:	e0 61       	ori	r30, 0x10	; 16
     df4:	be 2e       	mov	r11, r30
     df6:	b4 fe       	sbrs	r11, 4
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <vfprintf+0x272>
     dfa:	fb 2d       	mov	r31, r11
     dfc:	f4 60       	ori	r31, 0x04	; 4
     dfe:	bf 2e       	mov	r11, r31
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <vfprintf+0x272>
     e02:	34 fe       	sbrs	r3, 4
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <vfprintf+0x278>
     e06:	29 2f       	mov	r18, r25
     e08:	26 60       	ori	r18, 0x06	; 6
     e0a:	b2 2e       	mov	r11, r18
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x278>
     e0e:	28 e0       	ldi	r18, 0x08	; 8
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <vfprintf+0x27c>
     e14:	20 e1       	ldi	r18, 0x10	; 16
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x27c>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	f8 01       	movw	r30, r16
     e20:	b7 fe       	sbrs	r11, 7
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <vfprintf+0x290>
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	0c 5f       	subi	r16, 0xFC	; 252
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <vfprintf+0x29c>
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 5f       	subi	r16, 0xFE	; 254
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	a3 01       	movw	r20, r6
     e40:	0e 94 c8 07 	call	0xf90	; 0xf90 <__ultoa_invert>
     e44:	88 2e       	mov	r8, r24
     e46:	86 18       	sub	r8, r6
     e48:	fb 2d       	mov	r31, r11
     e4a:	ff 77       	andi	r31, 0x7F	; 127
     e4c:	3f 2e       	mov	r3, r31
     e4e:	36 fe       	sbrs	r3, 6
     e50:	0d c0       	rjmp	.+26     	; 0xe6c <vfprintf+0x2ca>
     e52:	23 2d       	mov	r18, r3
     e54:	2e 7f       	andi	r18, 0xFE	; 254
     e56:	a2 2e       	mov	r10, r18
     e58:	89 14       	cp	r8, r9
     e5a:	58 f4       	brcc	.+22     	; 0xe72 <vfprintf+0x2d0>
     e5c:	34 fe       	sbrs	r3, 4
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <vfprintf+0x2d4>
     e60:	32 fc       	sbrc	r3, 2
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <vfprintf+0x2d4>
     e64:	83 2d       	mov	r24, r3
     e66:	8e 7e       	andi	r24, 0xEE	; 238
     e68:	a8 2e       	mov	r10, r24
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <vfprintf+0x2d4>
     e6c:	b8 2c       	mov	r11, r8
     e6e:	a3 2c       	mov	r10, r3
     e70:	03 c0       	rjmp	.+6      	; 0xe78 <vfprintf+0x2d6>
     e72:	b8 2c       	mov	r11, r8
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <vfprintf+0x2d6>
     e76:	b9 2c       	mov	r11, r9
     e78:	a4 fe       	sbrs	r10, 4
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <vfprintf+0x2f8>
     e7c:	fe 01       	movw	r30, r28
     e7e:	e8 0d       	add	r30, r8
     e80:	f1 1d       	adc	r31, r1
     e82:	80 81       	ld	r24, Z
     e84:	80 33       	cpi	r24, 0x30	; 48
     e86:	21 f4       	brne	.+8      	; 0xe90 <vfprintf+0x2ee>
     e88:	9a 2d       	mov	r25, r10
     e8a:	99 7e       	andi	r25, 0xE9	; 233
     e8c:	a9 2e       	mov	r10, r25
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <vfprintf+0x300>
     e90:	a2 fe       	sbrs	r10, 2
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x2fe>
     e94:	b3 94       	inc	r11
     e96:	b3 94       	inc	r11
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <vfprintf+0x300>
     e9a:	8a 2d       	mov	r24, r10
     e9c:	86 78       	andi	r24, 0x86	; 134
     e9e:	09 f0       	breq	.+2      	; 0xea2 <vfprintf+0x300>
     ea0:	b3 94       	inc	r11
     ea2:	a3 fc       	sbrc	r10, 3
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <vfprintf+0x326>
     ea6:	a0 fe       	sbrs	r10, 0
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <vfprintf+0x314>
     eaa:	b2 14       	cp	r11, r2
     eac:	88 f4       	brcc	.+34     	; 0xed0 <vfprintf+0x32e>
     eae:	28 0c       	add	r2, r8
     eb0:	92 2c       	mov	r9, r2
     eb2:	9b 18       	sub	r9, r11
     eb4:	0e c0       	rjmp	.+28     	; 0xed2 <vfprintf+0x330>
     eb6:	b2 14       	cp	r11, r2
     eb8:	60 f4       	brcc	.+24     	; 0xed2 <vfprintf+0x330>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     ec4:	b3 94       	inc	r11
     ec6:	f7 cf       	rjmp	.-18     	; 0xeb6 <vfprintf+0x314>
     ec8:	b2 14       	cp	r11, r2
     eca:	18 f4       	brcc	.+6      	; 0xed2 <vfprintf+0x330>
     ecc:	2b 18       	sub	r2, r11
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x332>
     ed0:	98 2c       	mov	r9, r8
     ed2:	21 2c       	mov	r2, r1
     ed4:	a4 fe       	sbrs	r10, 4
     ed6:	10 c0       	rjmp	.+32     	; 0xef8 <vfprintf+0x356>
     ed8:	b6 01       	movw	r22, r12
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     ee2:	a2 fe       	sbrs	r10, 2
     ee4:	17 c0       	rjmp	.+46     	; 0xf14 <vfprintf+0x372>
     ee6:	a1 fc       	sbrc	r10, 1
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <vfprintf+0x34e>
     eea:	88 e7       	ldi	r24, 0x78	; 120
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <vfprintf+0x352>
     ef0:	88 e5       	ldi	r24, 0x58	; 88
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	b6 01       	movw	r22, r12
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <vfprintf+0x36e>
     ef8:	8a 2d       	mov	r24, r10
     efa:	86 78       	andi	r24, 0x86	; 134
     efc:	59 f0       	breq	.+22     	; 0xf14 <vfprintf+0x372>
     efe:	a1 fe       	sbrs	r10, 1
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <vfprintf+0x364>
     f02:	8b e2       	ldi	r24, 0x2B	; 43
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <vfprintf+0x366>
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	a7 fc       	sbrc	r10, 7
     f0a:	8d e2       	ldi	r24, 0x2D	; 45
     f0c:	b6 01       	movw	r22, r12
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     f14:	89 14       	cp	r8, r9
     f16:	38 f4       	brcc	.+14     	; 0xf26 <vfprintf+0x384>
     f18:	b6 01       	movw	r22, r12
     f1a:	80 e3       	ldi	r24, 0x30	; 48
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     f22:	9a 94       	dec	r9
     f24:	f7 cf       	rjmp	.-18     	; 0xf14 <vfprintf+0x372>
     f26:	8a 94       	dec	r8
     f28:	f3 01       	movw	r30, r6
     f2a:	e8 0d       	add	r30, r8
     f2c:	f1 1d       	adc	r31, r1
     f2e:	80 81       	ld	r24, Z
     f30:	b6 01       	movw	r22, r12
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     f38:	81 10       	cpse	r8, r1
     f3a:	f5 cf       	rjmp	.-22     	; 0xf26 <vfprintf+0x384>
     f3c:	22 20       	and	r2, r2
     f3e:	09 f4       	brne	.+2      	; 0xf42 <vfprintf+0x3a0>
     f40:	42 ce       	rjmp	.-892    	; 0xbc6 <vfprintf+0x24>
     f42:	b6 01       	movw	r22, r12
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 4f 05 	call	0xa9e	; 0xa9e <fputc>
     f4c:	2a 94       	dec	r2
     f4e:	f6 cf       	rjmp	.-20     	; 0xf3c <vfprintf+0x39a>
     f50:	f6 01       	movw	r30, r12
     f52:	86 81       	ldd	r24, Z+6	; 0x06
     f54:	97 81       	ldd	r25, Z+7	; 0x07
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <vfprintf+0x3ba>
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	2b 96       	adiw	r28, 0x0b	; 11
     f5e:	e2 e1       	ldi	r30, 0x12	; 18
     f60:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__epilogue_restores__>

00000f64 <strnlen_P>:
     f64:	fc 01       	movw	r30, r24
     f66:	05 90       	lpm	r0, Z+
     f68:	61 50       	subi	r22, 0x01	; 1
     f6a:	70 40       	sbci	r23, 0x00	; 0
     f6c:	01 10       	cpse	r0, r1
     f6e:	d8 f7       	brcc	.-10     	; 0xf66 <strnlen_P+0x2>
     f70:	80 95       	com	r24
     f72:	90 95       	com	r25
     f74:	8e 0f       	add	r24, r30
     f76:	9f 1f       	adc	r25, r31
     f78:	08 95       	ret

00000f7a <strnlen>:
     f7a:	fc 01       	movw	r30, r24
     f7c:	61 50       	subi	r22, 0x01	; 1
     f7e:	70 40       	sbci	r23, 0x00	; 0
     f80:	01 90       	ld	r0, Z+
     f82:	01 10       	cpse	r0, r1
     f84:	d8 f7       	brcc	.-10     	; 0xf7c <strnlen+0x2>
     f86:	80 95       	com	r24
     f88:	90 95       	com	r25
     f8a:	8e 0f       	add	r24, r30
     f8c:	9f 1f       	adc	r25, r31
     f8e:	08 95       	ret

00000f90 <__ultoa_invert>:
     f90:	fa 01       	movw	r30, r20
     f92:	aa 27       	eor	r26, r26
     f94:	28 30       	cpi	r18, 0x08	; 8
     f96:	51 f1       	breq	.+84     	; 0xfec <__ultoa_invert+0x5c>
     f98:	20 31       	cpi	r18, 0x10	; 16
     f9a:	81 f1       	breq	.+96     	; 0xffc <__ultoa_invert+0x6c>
     f9c:	e8 94       	clt
     f9e:	6f 93       	push	r22
     fa0:	6e 7f       	andi	r22, 0xFE	; 254
     fa2:	6e 5f       	subi	r22, 0xFE	; 254
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	af 4f       	sbci	r26, 0xFF	; 255
     fac:	b1 e0       	ldi	r27, 0x01	; 1
     fae:	3e d0       	rcall	.+124    	; 0x102c <__ultoa_invert+0x9c>
     fb0:	b4 e0       	ldi	r27, 0x04	; 4
     fb2:	3c d0       	rcall	.+120    	; 0x102c <__ultoa_invert+0x9c>
     fb4:	67 0f       	add	r22, r23
     fb6:	78 1f       	adc	r23, r24
     fb8:	89 1f       	adc	r24, r25
     fba:	9a 1f       	adc	r25, r26
     fbc:	a1 1d       	adc	r26, r1
     fbe:	68 0f       	add	r22, r24
     fc0:	79 1f       	adc	r23, r25
     fc2:	8a 1f       	adc	r24, r26
     fc4:	91 1d       	adc	r25, r1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	6a 0f       	add	r22, r26
     fca:	71 1d       	adc	r23, r1
     fcc:	81 1d       	adc	r24, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	a1 1d       	adc	r26, r1
     fd2:	20 d0       	rcall	.+64     	; 0x1014 <__ultoa_invert+0x84>
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__ultoa_invert+0x48>
     fd6:	68 94       	set
     fd8:	3f 91       	pop	r19
     fda:	2a e0       	ldi	r18, 0x0A	; 10
     fdc:	26 9f       	mul	r18, r22
     fde:	11 24       	eor	r1, r1
     fe0:	30 19       	sub	r19, r0
     fe2:	30 5d       	subi	r19, 0xD0	; 208
     fe4:	31 93       	st	Z+, r19
     fe6:	de f6       	brtc	.-74     	; 0xf9e <__ultoa_invert+0xe>
     fe8:	cf 01       	movw	r24, r30
     fea:	08 95       	ret
     fec:	46 2f       	mov	r20, r22
     fee:	47 70       	andi	r20, 0x07	; 7
     ff0:	40 5d       	subi	r20, 0xD0	; 208
     ff2:	41 93       	st	Z+, r20
     ff4:	b3 e0       	ldi	r27, 0x03	; 3
     ff6:	0f d0       	rcall	.+30     	; 0x1016 <__ultoa_invert+0x86>
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x5c>
     ffa:	f6 cf       	rjmp	.-20     	; 0xfe8 <__ultoa_invert+0x58>
     ffc:	46 2f       	mov	r20, r22
     ffe:	4f 70       	andi	r20, 0x0F	; 15
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	4a 33       	cpi	r20, 0x3A	; 58
    1004:	18 f0       	brcs	.+6      	; 0x100c <__ultoa_invert+0x7c>
    1006:	49 5d       	subi	r20, 0xD9	; 217
    1008:	31 fd       	sbrc	r19, 1
    100a:	40 52       	subi	r20, 0x20	; 32
    100c:	41 93       	st	Z+, r20
    100e:	02 d0       	rcall	.+4      	; 0x1014 <__ultoa_invert+0x84>
    1010:	a9 f7       	brne	.-22     	; 0xffc <__ultoa_invert+0x6c>
    1012:	ea cf       	rjmp	.-44     	; 0xfe8 <__ultoa_invert+0x58>
    1014:	b4 e0       	ldi	r27, 0x04	; 4
    1016:	a6 95       	lsr	r26
    1018:	97 95       	ror	r25
    101a:	87 95       	ror	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	ba 95       	dec	r27
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__ultoa_invert+0x86>
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	61 05       	cpc	r22, r1
    1028:	71 05       	cpc	r23, r1
    102a:	08 95       	ret
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	0a 2e       	mov	r0, r26
    1032:	06 94       	lsr	r0
    1034:	57 95       	ror	r21
    1036:	47 95       	ror	r20
    1038:	37 95       	ror	r19
    103a:	27 95       	ror	r18
    103c:	ba 95       	dec	r27
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__ultoa_invert+0xa2>
    1040:	62 0f       	add	r22, r18
    1042:	73 1f       	adc	r23, r19
    1044:	84 1f       	adc	r24, r20
    1046:	95 1f       	adc	r25, r21
    1048:	a0 1d       	adc	r26, r0
    104a:	08 95       	ret

0000104c <__prologue_saves__>:
    104c:	2f 92       	push	r2
    104e:	3f 92       	push	r3
    1050:	4f 92       	push	r4
    1052:	5f 92       	push	r5
    1054:	6f 92       	push	r6
    1056:	7f 92       	push	r7
    1058:	8f 92       	push	r8
    105a:	9f 92       	push	r9
    105c:	af 92       	push	r10
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	ca 1b       	sub	r28, r26
    1076:	db 0b       	sbc	r29, r27
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	09 94       	ijmp

00001084 <__epilogue_restores__>:
    1084:	2a 88       	ldd	r2, Y+18	; 0x12
    1086:	39 88       	ldd	r3, Y+17	; 0x11
    1088:	48 88       	ldd	r4, Y+16	; 0x10
    108a:	5f 84       	ldd	r5, Y+15	; 0x0f
    108c:	6e 84       	ldd	r6, Y+14	; 0x0e
    108e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1090:	8c 84       	ldd	r8, Y+12	; 0x0c
    1092:	9b 84       	ldd	r9, Y+11	; 0x0b
    1094:	aa 84       	ldd	r10, Y+10	; 0x0a
    1096:	b9 84       	ldd	r11, Y+9	; 0x09
    1098:	c8 84       	ldd	r12, Y+8	; 0x08
    109a:	df 80       	ldd	r13, Y+7	; 0x07
    109c:	ee 80       	ldd	r14, Y+6	; 0x06
    109e:	fd 80       	ldd	r15, Y+5	; 0x05
    10a0:	0c 81       	ldd	r16, Y+4	; 0x04
    10a2:	1b 81       	ldd	r17, Y+3	; 0x03
    10a4:	aa 81       	ldd	r26, Y+2	; 0x02
    10a6:	b9 81       	ldd	r27, Y+1	; 0x01
    10a8:	ce 0f       	add	r28, r30
    10aa:	d1 1d       	adc	r29, r1
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	ed 01       	movw	r28, r26
    10b8:	08 95       	ret

000010ba <_exit>:
    10ba:	f8 94       	cli

000010bc <__stop_program>:
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <__stop_program>
