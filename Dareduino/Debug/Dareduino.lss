
Dareduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00000f66  00000ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800186  00800186  00001080  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001181  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af8  00000000  00000000  000023b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000926  00000000  00000000  00002ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070b  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000046ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 38       	cpi	r26, 0x86	; 134
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e8       	ldi	r26, 0x86	; 134
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3a       	cpi	r26, 0xA6	; 166
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  9e:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <rTask>:

void rTask()
{
	while (1)
	{
		printf("\nrTask");
  a6:	c4 e1       	ldi	r28, 0x14	; 20
  a8:	d1 e0       	ldi	r29, 0x01	; 1
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	f9 cf       	rjmp	.-14     	; 0xaa <rTask+0x4>

000000b8 <qTask>:

void qTask()
{
	while (1)
	{
		printf("\nqTask");
  b8:	cb e1       	ldi	r28, 0x1B	; 27
  ba:	d1 e0       	ldi	r29, 0x01	; 1
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	f9 cf       	rjmp	.-14     	; 0xbc <qTask+0x4>

000000ca <onTask>:
void onTask(void)
{
	while (1)
	{
		OSwait(semaphore);
		printf("\nOnTask %d", (*semaphore));
  ca:	c2 e2       	ldi	r28, 0x22	; 34
  cc:	d1 e0       	ldi	r29, 0x01	; 1

void onTask(void)
{
	while (1)
	{
		OSwait(semaphore);
  ce:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <semaphore>
  d2:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <semaphore+0x1>
  d6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OSwait>
		printf("\nOnTask %d", (*semaphore));
  da:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <semaphore>
  de:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <semaphore+0x1>
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	9f 93       	push	r25
  e8:	8f 93       	push	r24
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
		pinWrite(13,1);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <pinWrite>
		OSsignal(semaphore);
  fe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <semaphore>
 102:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <semaphore+0x1>
 106:	0e 94 e5 02 	call	0x5ca	; 0x5ca <OSsignal>
		printf("\nOnTask %d", (*semaphore));
 10a:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <semaphore>
 10e:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <semaphore+0x1>
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	9f 93       	push	r25
 118:	8f 93       	push	r24
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 122:	8d b7       	in	r24, 0x3d	; 61
 124:	9e b7       	in	r25, 0x3e	; 62
 126:	08 96       	adiw	r24, 0x08	; 8
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	9e bf       	out	0x3e, r25	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	8d bf       	out	0x3d, r24	; 61
 132:	cd cf       	rjmp	.-102    	; 0xce <onTask+0x4>

00000134 <offTask>:
void offTask(void)
{
	while (1)
	{
		OSwait(semaphore);
		printf("\nOffTask %d", (*semaphore));
 134:	cd e2       	ldi	r28, 0x2D	; 45
 136:	d1 e0       	ldi	r29, 0x01	; 1
		printf("\nOfftask");
 138:	09 e3       	ldi	r16, 0x39	; 57
 13a:	11 e0       	ldi	r17, 0x01	; 1

void offTask(void)
{
	while (1)
	{
		OSwait(semaphore);
 13c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <semaphore>
 140:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <semaphore+0x1>
 144:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OSwait>
		printf("\nOffTask %d", (*semaphore));
 148:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <semaphore>
 14c:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <semaphore+0x1>
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	9f 93       	push	r25
 156:	8f 93       	push	r24
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
		printf("\nOfftask");
 160:	1f 93       	push	r17
 162:	0f 93       	push	r16
 164:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
		pinWrite(13,0);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 60 01 	call	0x2c0	; 0x2c0 <pinWrite>
		OSsignal(semaphore);
 174:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <semaphore>
 178:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <semaphore+0x1>
 17c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <OSsignal>
		printf("\nOffTask %d", (*semaphore));
 180:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <semaphore>
 184:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <semaphore+0x1>
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	9f 93       	push	r25
 18e:	8f 93       	push	r24
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 198:	8d b7       	in	r24, 0x3d	; 61
 19a:	9e b7       	in	r25, 0x3e	; 62
 19c:	0a 96       	adiw	r24, 0x0a	; 10
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	9e bf       	out	0x3e, r25	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	8d bf       	out	0x3d, r24	; 61
 1a8:	c9 cf       	rjmp	.-110    	; 0x13c <offTask+0x8>

000001aa <main>:
volatile int *semaphore;
volatile int sem;

int main (void)
{
	consoleDisplay();
 1aa:	0e 94 6d 03 	call	0x6da	; 0x6da <consoleDisplay>
	pinConfig(13,OUTPUT);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 15 01 	call	0x22a	; 0x22a <pinConfig>
	
	sem = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
 1c2:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
	semaphore = &sem;
 1c6:	86 e8       	ldi	r24, 0x86	; 134
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <semaphore+0x1>
 1ce:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <semaphore>
	
	OSinit();
 1d2:	0e 94 bd 01 	call	0x37a	; 0x37a <OSinit>
	
	createTask(&onTask, 20, 150, "onTask");
 1d6:	22 e4       	ldi	r18, 0x42	; 66
 1d8:	31 e0       	ldi	r19, 0x01	; 1
 1da:	46 e9       	ldi	r20, 0x96	; 150
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	64 e1       	ldi	r22, 0x14	; 20
 1e0:	85 e6       	ldi	r24, 0x65	; 101
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <createTask>
	createTask(&rTask, 1, 150, "rTask");
 1e8:	25 e1       	ldi	r18, 0x15	; 21
 1ea:	31 e0       	ldi	r19, 0x01	; 1
 1ec:	46 e9       	ldi	r20, 0x96	; 150
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	83 e5       	ldi	r24, 0x53	; 83
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <createTask>
	createTask(&qTask, 12, 150, "qTask");
 1fa:	2c e1       	ldi	r18, 0x1C	; 28
 1fc:	31 e0       	ldi	r19, 0x01	; 1
 1fe:	46 e9       	ldi	r20, 0x96	; 150
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	6c e0       	ldi	r22, 0x0C	; 12
 204:	8c e5       	ldi	r24, 0x5C	; 92
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <createTask>
	createTask(&offTask, 2, 150, "offTask");
 20c:	29 e4       	ldi	r18, 0x49	; 73
 20e:	31 e0       	ldi	r19, 0x01	; 1
 210:	46 e9       	ldi	r20, 0x96	; 150
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	8a e9       	ldi	r24, 0x9A	; 154
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <createTask>

	OSlaunch(ROUNDROBIN);
 21e:	80 e5       	ldi	r24, 0x50	; 80
 220:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <OSlaunch>

	return 0;
}
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret

0000022a <pinConfig>:
#include "gpio.h"

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	91 05       	cpc	r25, r1
 22e:	00 f5       	brcc	.+64     	; 0x270 <pinConfig+0x46>
	{
		if(io == OUTPUT)
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	71 05       	cpc	r23, r1
 234:	69 f4       	brne	.+26     	; 0x250 <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
 236:	4a b1       	in	r20, 0x0a	; 10
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <pinConfig+0x1a>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <pinConfig+0x16>
 248:	cb 01       	movw	r24, r22
 24a:	84 2b       	or	r24, r20
 24c:	8a b9       	out	0x0a, r24	; 10
 24e:	08 95       	ret
		}
		
		if(io == INPUT)
 250:	67 2b       	or	r22, r23
 252:	a9 f5       	brne	.+106    	; 0x2be <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
 254:	4a b1       	in	r20, 0x0a	; 10
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <pinConfig+0x38>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <pinConfig+0x34>
 266:	cb 01       	movw	r24, r22
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8a b9       	out	0x0a, r24	; 10
 26e:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
 270:	9c 01       	movw	r18, r24
 272:	28 50       	subi	r18, 0x08	; 8
 274:	31 09       	sbc	r19, r1
 276:	26 30       	cpi	r18, 0x06	; 6
 278:	31 05       	cpc	r19, r1
 27a:	08 f5       	brcc	.+66     	; 0x2be <pinConfig+0x94>
	{
		if(io == OUTPUT)
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	71 05       	cpc	r23, r1
 280:	71 f4       	brne	.+28     	; 0x29e <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
 282:	44 b1       	in	r20, 0x04	; 4
 284:	c9 01       	movw	r24, r18
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <pinConfig+0x68>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <pinConfig+0x64>
 296:	cb 01       	movw	r24, r22
 298:	84 2b       	or	r24, r20
 29a:	84 b9       	out	0x04, r24	; 4
 29c:	08 95       	ret
		}
		
		if(io == INPUT)
 29e:	67 2b       	or	r22, r23
 2a0:	71 f4       	brne	.+28     	; 0x2be <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
 2a2:	44 b1       	in	r20, 0x04	; 4
 2a4:	08 97       	sbiw	r24, 0x08	; 8
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <pinConfig+0x88>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	8a 95       	dec	r24
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <pinConfig+0x84>
 2b6:	cb 01       	movw	r24, r22
 2b8:	80 95       	com	r24
 2ba:	84 23       	and	r24, r20
 2bc:	84 b9       	out	0x04, r24	; 4
 2be:	08 95       	ret

000002c0 <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	91 05       	cpc	r25, r1
 2c4:	20 f5       	brcc	.+72     	; 0x30e <pinWrite+0x4e>
	{
		if (val > 0)
 2c6:	16 16       	cp	r1, r22
 2c8:	17 06       	cpc	r1, r23
 2ca:	5c f4       	brge	.+22     	; 0x2e2 <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
 2cc:	4b b1       	in	r20, 0x0b	; 11
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	08 2e       	mov	r0, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <pinWrite+0x1a>
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <pinWrite+0x16>
 2de:	24 2b       	or	r18, r20
 2e0:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
 2e2:	61 15       	cp	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	99 f4       	brne	.+38     	; 0x30e <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
 2e8:	4b b1       	in	r20, 0x0b	; 11
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	08 2e       	mov	r0, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <pinWrite+0x36>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <pinWrite+0x32>
 2fa:	20 95       	com	r18
 2fc:	24 23       	and	r18, r20
 2fe:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
 300:	9c 01       	movw	r18, r24
 302:	28 50       	subi	r18, 0x08	; 8
 304:	31 09       	sbc	r19, r1
 306:	26 30       	cpi	r18, 0x06	; 6
 308:	31 05       	cpc	r19, r1
 30a:	b8 f0       	brcs	.+46     	; 0x33a <pinWrite+0x7a>
 30c:	08 95       	ret
 30e:	9c 01       	movw	r18, r24
 310:	28 50       	subi	r18, 0x08	; 8
 312:	31 09       	sbc	r19, r1
 314:	26 30       	cpi	r18, 0x06	; 6
 316:	31 05       	cpc	r19, r1
 318:	f0 f4       	brcc	.+60     	; 0x356 <pinWrite+0x96>
	{
		if (val > 0)
 31a:	16 16       	cp	r1, r22
 31c:	17 06       	cpc	r1, r23
 31e:	5c f4       	brge	.+22     	; 0x336 <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
 320:	45 b1       	in	r20, 0x05	; 5
 322:	f9 01       	movw	r30, r18
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <pinWrite+0x6e>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	ea 95       	dec	r30
 330:	e2 f7       	brpl	.-8      	; 0x32a <pinWrite+0x6a>
 332:	24 2b       	or	r18, r20
 334:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
 336:	67 2b       	or	r22, r23
 338:	71 f4       	brne	.+28     	; 0x356 <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
 33a:	45 b1       	in	r20, 0x05	; 5
 33c:	08 97       	sbiw	r24, 0x08	; 8
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <pinWrite+0x8a>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <pinWrite+0x86>
 34e:	cb 01       	movw	r24, r22
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	85 b9       	out	0x05, r24	; 5
 356:	08 95       	ret

00000358 <timerInit>:
void TIMER1_COMPA_vect (void) __attribute__ ((signal,naked));
void taskScheduler(void) __attribute__((naked));

void timerInit(void)
{
	TCCR1B |= (1<<WGM12) | (1<<CS12);
 358:	e1 e8       	ldi	r30, 0x81	; 129
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	8c 60       	ori	r24, 0x0C	; 12
 360:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 362:	ef e6       	ldi	r30, 0x6F	; 111
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	82 60       	ori	r24, 0x02	; 2
 36a:	80 83       	st	Z, r24
	OCR1A = 61500;
 36c:	8c e3       	ldi	r24, 0x3C	; 60
 36e:	90 ef       	ldi	r25, 0xF0	; 240
 370:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 374:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 378:	08 95       	ret

0000037a <OSinit>:
	}
}

void OSinit(void)
{
	cli();
 37a:	f8 94       	cli
	timerInit();
 37c:	0e 94 ac 01 	call	0x358	; 0x358 <timerInit>
	head->next = NULL;
 380:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <head>
 384:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <head+0x1>
 388:	11 86       	std	Z+9, r1	; 0x09
 38a:	10 86       	std	Z+8, r1	; 0x08
	head->status = HEAD;
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	84 87       	std	Z+12, r24	; 0x0c
	runPt = head;
 390:	f0 93 91 01 	sts	0x0191, r31	; 0x800191 <runPt+0x1>
 394:	e0 93 90 01 	sts	0x0190, r30	; 0x800190 <runPt>
	stackUsed = 0;
 398:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <stackUsed+0x1>
 39c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <stackUsed>
	tasksCreated = 0;
 3a0:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <tasksCreated>
 3a4:	08 95       	ret

000003a6 <OSlaunch>:
}

void OSlaunch(uint8_t schType)
{
	currSp = &mainSp;
 3a6:	2a e9       	ldi	r18, 0x9A	; 154
 3a8:	31 e0       	ldi	r19, 0x01	; 1
 3aa:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <currSp+0x1>
 3ae:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <currSp>
	schedulerType = schType;
 3b2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <schedulerType>
	printf("Starting scheduler with %d tasks\n", tasksCreated);
 3b6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tasksCreated>
 3ba:	1f 92       	push	r1
 3bc:	8f 93       	push	r24
 3be:	81 e5       	ldi	r24, 0x51	; 81
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	9f 93       	push	r25
 3c4:	8f 93       	push	r24
 3c6:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	87 ea       	ldi	r24, 0xA7	; 167
 3ce:	91 e6       	ldi	r25, 0x61	; 97
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <OSlaunch+0x2a>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <OSlaunch+0x34>
 3da:	00 00       	nop
	_delay_ms(2000);
	sei();
 3dc:	78 94       	sei
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
	while(1)
	{
		printf("Scheduler running\n");
 3e6:	83 e7       	ldi	r24, 0x73	; 115
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 f5 04 	call	0x9ea	; 0x9ea <puts>
 3ee:	fb cf       	rjmp	.-10     	; 0x3e6 <OSlaunch+0x40>

000003f0 <createTask>:
	}
	
}

void createTask(void(*fPtr)(void), uint8_t priority, uint16_t stack_size, char *name)
{
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	6c 01       	movw	r12, r24
 400:	f6 2e       	mov	r15, r22
 402:	ea 01       	movw	r28, r20
 404:	89 01       	movw	r16, r18
	tasksCreated += 1;
 406:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tasksCreated>
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tasksCreated>
	newTask = (taskTCB *)malloc(sizeof(taskTCB));
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 82 03 	call	0x704	; 0x704 <malloc>
 418:	fc 01       	movw	r30, r24
 41a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <newTask+0x1>
 41e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <newTask>
	newTask->fnPtr = fPtr;
 422:	d1 82       	std	Z+1, r13	; 0x01
 424:	c0 82       	st	Z, r12
	newTask->priority = priority;
 426:	f6 82       	std	Z+6, r15	; 0x06
	newTask->neverRun = TRUE;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	87 83       	std	Z+7, r24	; 0x07
	newTask->status = READY;
 42c:	14 86       	std	Z+12, r1	; 0x0c
	newTask->sP = USER_STACK_SPACE - stackUsed;
 42e:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <stackUsed>
 432:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <stackUsed+0x1>
 436:	8b e9       	ldi	r24, 0x9B	; 155
 438:	98 e0       	ldi	r25, 0x08	; 8
 43a:	82 1b       	sub	r24, r18
 43c:	93 0b       	sbc	r25, r19
 43e:	95 83       	std	Z+5, r25	; 0x05
 440:	84 83       	std	Z+4, r24	; 0x04
	stackUsed += stack_size;
 442:	c2 0f       	add	r28, r18
 444:	d3 1f       	adc	r29, r19
 446:	d0 93 97 01 	sts	0x0197, r29	; 0x800197 <stackUsed+0x1>
 44a:	c0 93 96 01 	sts	0x0196, r28	; 0x800196 <stackUsed>
	newTask->id = name;
 44e:	13 87       	std	Z+11, r17	; 0x0b
 450:	02 87       	std	Z+10, r16	; 0x0a
	newTask->blocked = NULL;
 452:	13 82       	std	Z+3, r1	; 0x03
 454:	12 82       	std	Z+2, r1	; 0x02
	
	newTask->next = head->next;
 456:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <head>
 45a:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <head+0x1>
 45e:	18 96       	adiw	r26, 0x08	; 8
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	19 97       	sbiw	r26, 0x09	; 9
 466:	91 87       	std	Z+9, r25	; 0x09
 468:	80 87       	std	Z+8, r24	; 0x08
	head->next = newTask;
 46a:	19 96       	adiw	r26, 0x09	; 9
 46c:	fc 93       	st	X, r31
 46e:	ee 93       	st	-X, r30
 470:	18 97       	sbiw	r26, 0x08	; 8
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	df 90       	pop	r13
 47e:	cf 90       	pop	r12
 480:	08 95       	ret

00000482 <taskScheduler>:

void taskScheduler(void)
{
	if(runPt->status == HEAD)
 482:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <runPt>
 486:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <runPt+0x1>
 48a:	84 85       	ldd	r24, Z+12	; 0x0c
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	39 f4       	brne	.+14     	; 0x49e <taskScheduler+0x1c>
	{
		runPt = runPt->next;
 490:	80 85       	ldd	r24, Z+8	; 0x08
 492:	91 85       	ldd	r25, Z+9	; 0x09
 494:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <runPt+0x1>
 498:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <runPt>
 49c:	13 c0       	rjmp	.+38     	; 0x4c4 <taskScheduler+0x42>
	}
	else if(runPt->next == NULL)
 49e:	80 85       	ldd	r24, Z+8	; 0x08
 4a0:	91 85       	ldd	r25, Z+9	; 0x09
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	59 f4       	brne	.+22     	; 0x4bc <taskScheduler+0x3a>
	{
		runPt = head->next;
 4a6:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <head>
 4aa:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <head+0x1>
 4ae:	80 85       	ldd	r24, Z+8	; 0x08
 4b0:	91 85       	ldd	r25, Z+9	; 0x09
 4b2:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <runPt+0x1>
 4b6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <runPt>
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <taskScheduler+0x42>
	}
	else
	{
		runPt = runPt->next;
 4bc:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <runPt+0x1>
 4c0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <runPt>
	}
	asm volatile("ret");
 4c4:	08 95       	ret

000004c6 <__vector_11>:
	OCR1A = 61500;
}

void TIMER1_COMPA_vect ( void )
{
	saveContext();
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	0f 92       	push	r0
 4ce:	1f 92       	push	r1
 4d0:	2f 92       	push	r2
 4d2:	3f 92       	push	r3
 4d4:	4f 92       	push	r4
 4d6:	5f 92       	push	r5
 4d8:	6f 92       	push	r6
 4da:	7f 92       	push	r7
 4dc:	8f 92       	push	r8
 4de:	9f 92       	push	r9
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
 50c:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <currSp>
 510:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <currSp+0x1>
 514:	0d b6       	in	r0, 0x3d	; 61
 516:	0d 92       	st	X+, r0
 518:	0e b6       	in	r0, 0x3e	; 62
 51a:	0d 92       	st	X+, r0
	taskScheduler();
 51c:	0e 94 41 02 	call	0x482	; 0x482 <taskScheduler>
	currSp = &(runPt->sP);
 520:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <runPt>
 524:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <runPt+0x1>
 528:	cf 01       	movw	r24, r30
 52a:	04 96       	adiw	r24, 0x04	; 4
 52c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <currSp+0x1>
 530:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <currSp>
	loadStackPointer();
 534:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <currSp>
 538:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <currSp+0x1>
 53c:	cd 91       	ld	r28, X+
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	dd 91       	ld	r29, X+
 542:	de bf       	out	0x3e, r29	; 62
	
	if(runPt->neverRun == TRUE)
 544:	87 81       	ldd	r24, Z+7	; 0x07
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	59 f4       	brne	.+22     	; 0x560 <__vector_11+0x9a>
	{
		sei();
 54a:	78 94       	sei
		runPt->neverRun = FALSE;
 54c:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <runPt>
 550:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <runPt+0x1>
 554:	17 82       	std	Z+7, r1	; 0x07
		runPt->fnPtr();
 556:	01 90       	ld	r0, Z+
 558:	f0 81       	ld	r31, Z
 55a:	e0 2d       	mov	r30, r0
 55c:	09 95       	icall
 55e:	2b c0       	rjmp	.+86     	; 0x5b6 <OSwait>
	}
	else
	{
		restoreContext();
 560:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <currSp>
 564:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <currSp+0x1>
 568:	cd 91       	ld	r28, X+
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	dd 91       	ld	r29, X+
 56e:	de bf       	out	0x3e, r29	; 62
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	bf 90       	pop	r11
 59a:	af 90       	pop	r10
 59c:	9f 90       	pop	r9
 59e:	8f 90       	pop	r8
 5a0:	7f 90       	pop	r7
 5a2:	6f 90       	pop	r6
 5a4:	5f 90       	pop	r5
 5a6:	4f 90       	pop	r4
 5a8:	3f 90       	pop	r3
 5aa:	2f 90       	pop	r2
 5ac:	1f 90       	pop	r1
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
		asm volatile ("reti");
 5b4:	18 95       	reti

000005b6 <OSwait>:
	asm volatile("ret");
}

void OSwait(volatile int *s)
{
	cli();
 5b6:	f8 94       	cli
	(*s)--;
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 81       	ld	r18, Z
 5bc:	31 81       	ldd	r19, Z+1	; 0x01
 5be:	21 50       	subi	r18, 0x01	; 1
 5c0:	31 09       	sbc	r19, r1
 5c2:	31 83       	std	Z+1, r19	; 0x01
 5c4:	20 83       	st	Z, r18
	sei();
 5c6:	78 94       	sei
 5c8:	08 95       	ret

000005ca <OSsignal>:
}

void OSsignal(volatile int *s)
{
	cli();
 5ca:	f8 94       	cli
	(*s)++;
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 81       	ld	r18, Z
 5d0:	31 81       	ldd	r19, Z+1	; 0x01
 5d2:	2f 5f       	subi	r18, 0xFF	; 255
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	31 83       	std	Z+1, r19	; 0x01
 5d8:	20 83       	st	Z, r18
	sei();
 5da:	78 94       	sei
 5dc:	08 95       	ret

000005de <uart_putch>:
	while (UCSR0A & (1<<RXC0))
	dummy =  UDR0;
}

int uart_putch ( char ch, FILE *stream )
{
 5de:	cf 93       	push	r28
 5e0:	c8 2f       	mov	r28, r24
	if(ch == '\n')
 5e2:	8a 30       	cpi	r24, 0x0A	; 10
 5e4:	19 f4       	brne	.+6      	; 0x5ec <uart_putch+0xe>
	uart_putch('\r', stream);
 5e6:	8d e0       	ldi	r24, 0x0D	; 13
 5e8:	0e 94 ef 02 	call	0x5de	; 0x5de <uart_putch>
	while(!(UCSR0A & (1<<UDRE0)));
 5ec:	e0 ec       	ldi	r30, 0xC0	; 192
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	85 ff       	sbrs	r24, 5
 5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <uart_putch+0x12>
	UDR0 = ch;
 5f6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <uart_getch>:

int uart_getch(FILE *stream)
{
	unsigned char ch = '\0';
	while (!(UCSR0A & (1<<RXC0)));
 602:	e0 ec       	ldi	r30, 0xC0	; 192
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	88 23       	and	r24, r24
 60a:	ec f7       	brge	.-6      	; 0x606 <uart_getch+0x4>
	ch = UDR0;
 60c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	return ch;
}
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	08 95       	ret

00000614 <uart_init>:

FILE uart_str = FDEV_SETUP_STREAM (uart_putch, uart_getch, _FDEV_SETUP_RW);

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD)/16)-1)>>8;
 614:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (((F_CPU/BAUD)/16)-1);
 618:	87 e6       	ldi	r24, 0x67	; 103
 61a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 61e:	88 e1       	ldi	r24, 0x18	; 24
 620:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 62a:	08 95       	ret

0000062c <ansi_clear_screen>:
}

void ansi_clear_screen ( void )
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
	putchar(27);
 630:	c0 ea       	ldi	r28, 0xA0	; 160
 632:	d1 e0       	ldi	r29, 0x01	; 1
 634:	6a 81       	ldd	r22, Y+2	; 0x02
 636:	7b 81       	ldd	r23, Y+3	; 0x03
 638:	8b e1       	ldi	r24, 0x1B	; 27
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('[');
 640:	6a 81       	ldd	r22, Y+2	; 0x02
 642:	7b 81       	ldd	r23, Y+3	; 0x03
 644:	8b e5       	ldi	r24, 0x5B	; 91
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('H');
 64c:	6a 81       	ldd	r22, Y+2	; 0x02
 64e:	7b 81       	ldd	r23, Y+3	; 0x03
 650:	88 e4       	ldi	r24, 0x48	; 72
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar(27);
 658:	6a 81       	ldd	r22, Y+2	; 0x02
 65a:	7b 81       	ldd	r23, Y+3	; 0x03
 65c:	8b e1       	ldi	r24, 0x1B	; 27
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('[');
 664:	6a 81       	ldd	r22, Y+2	; 0x02
 666:	7b 81       	ldd	r23, Y+3	; 0x03
 668:	8b e5       	ldi	r24, 0x5B	; 91
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('J');
 670:	6a 81       	ldd	r22, Y+2	; 0x02
 672:	7b 81       	ldd	r23, Y+3	; 0x03
 674:	8a e4       	ldi	r24, 0x4A	; 74
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
}
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <ansi_me>:

void ansi_me(void)
{
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
	putchar(27);
 686:	c0 ea       	ldi	r28, 0xA0	; 160
 688:	d1 e0       	ldi	r29, 0x01	; 1
 68a:	6a 81       	ldd	r22, Y+2	; 0x02
 68c:	7b 81       	ldd	r23, Y+3	; 0x03
 68e:	8b e1       	ldi	r24, 0x1B	; 27
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('[');
 696:	6a 81       	ldd	r22, Y+2	; 0x02
 698:	7b 81       	ldd	r23, Y+3	; 0x03
 69a:	8b e5       	ldi	r24, 0x5B	; 91
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('0');
 6a2:	6a 81       	ldd	r22, Y+2	; 0x02
 6a4:	7b 81       	ldd	r23, Y+3	; 0x03
 6a6:	80 e3       	ldi	r24, 0x30	; 48
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
	putchar('m');
 6ae:	6a 81       	ldd	r22, Y+2	; 0x02
 6b0:	7b 81       	ldd	r23, Y+3	; 0x03
 6b2:	8d e6       	ldi	r24, 0x6D	; 109
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <uart_flush>:

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
 6c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 6c4:	88 23       	and	r24, r24
 6c6:	44 f4       	brge	.+16     	; 0x6d8 <uart_flush+0x18>
	dummy =  UDR0;
 6c8:	a6 ec       	ldi	r26, 0xC6	; 198
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
 6cc:	e0 ec       	ldi	r30, 0xC0	; 192
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
	dummy =  UDR0;
 6d0:	8c 91       	ld	r24, X
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
 6d2:	80 81       	ld	r24, Z
 6d4:	88 23       	and	r24, r24
 6d6:	e4 f3       	brlt	.-8      	; 0x6d0 <uart_flush+0x10>
 6d8:	08 95       	ret

000006da <consoleDisplay>:
	return ch;
}

void consoleDisplay(void)
{
	stdout = stdin = &uart_str;
 6da:	e0 ea       	ldi	r30, 0xA0	; 160
 6dc:	f1 e0       	ldi	r31, 0x01	; 1
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	91 83       	std	Z+1, r25	; 0x01
 6e4:	80 83       	st	Z, r24
 6e6:	93 83       	std	Z+3, r25	; 0x03
 6e8:	82 83       	std	Z+2, r24	; 0x02
	uart_init();
 6ea:	0e 94 0a 03 	call	0x614	; 0x614 <uart_init>
	ansi_me();
 6ee:	0e 94 41 03 	call	0x682	; 0x682 <ansi_me>
	ansi_clear_screen();
 6f2:	0e 94 16 03 	call	0x62c	; 0x62c <ansi_clear_screen>
	ansi_me();
 6f6:	0e 94 41 03 	call	0x682	; 0x682 <ansi_me>
	ansi_clear_screen();
 6fa:	0e 94 16 03 	call	0x62c	; 0x62c <ansi_clear_screen>
	uart_flush();
 6fe:	0e 94 60 03 	call	0x6c0	; 0x6c0 <uart_flush>
 702:	08 95       	ret

00000704 <malloc>:
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	91 05       	cpc	r25, r1
 710:	10 f4       	brcc	.+4      	; 0x716 <malloc+0x12>
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <__flp>
 71a:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <__flp+0x1>
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	a0 e0       	ldi	r26, 0x00	; 0
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	30 97       	sbiw	r30, 0x00	; 0
 728:	19 f1       	breq	.+70     	; 0x770 <malloc+0x6c>
 72a:	40 81       	ld	r20, Z
 72c:	51 81       	ldd	r21, Z+1	; 0x01
 72e:	02 81       	ldd	r16, Z+2	; 0x02
 730:	13 81       	ldd	r17, Z+3	; 0x03
 732:	48 17       	cp	r20, r24
 734:	59 07       	cpc	r21, r25
 736:	c8 f0       	brcs	.+50     	; 0x76a <malloc+0x66>
 738:	84 17       	cp	r24, r20
 73a:	95 07       	cpc	r25, r21
 73c:	69 f4       	brne	.+26     	; 0x758 <malloc+0x54>
 73e:	10 97       	sbiw	r26, 0x00	; 0
 740:	31 f0       	breq	.+12     	; 0x74e <malloc+0x4a>
 742:	12 96       	adiw	r26, 0x02	; 2
 744:	0c 93       	st	X, r16
 746:	12 97       	sbiw	r26, 0x02	; 2
 748:	13 96       	adiw	r26, 0x03	; 3
 74a:	1c 93       	st	X, r17
 74c:	27 c0       	rjmp	.+78     	; 0x79c <malloc+0x98>
 74e:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <__flp>
 752:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <__flp+0x1>
 756:	22 c0       	rjmp	.+68     	; 0x79c <malloc+0x98>
 758:	21 15       	cp	r18, r1
 75a:	31 05       	cpc	r19, r1
 75c:	19 f0       	breq	.+6      	; 0x764 <malloc+0x60>
 75e:	42 17       	cp	r20, r18
 760:	53 07       	cpc	r21, r19
 762:	18 f4       	brcc	.+6      	; 0x76a <malloc+0x66>
 764:	9a 01       	movw	r18, r20
 766:	bd 01       	movw	r22, r26
 768:	ef 01       	movw	r28, r30
 76a:	df 01       	movw	r26, r30
 76c:	f8 01       	movw	r30, r16
 76e:	db cf       	rjmp	.-74     	; 0x726 <malloc+0x22>
 770:	21 15       	cp	r18, r1
 772:	31 05       	cpc	r19, r1
 774:	f9 f0       	breq	.+62     	; 0x7b4 <malloc+0xb0>
 776:	28 1b       	sub	r18, r24
 778:	39 0b       	sbc	r19, r25
 77a:	24 30       	cpi	r18, 0x04	; 4
 77c:	31 05       	cpc	r19, r1
 77e:	80 f4       	brcc	.+32     	; 0x7a0 <malloc+0x9c>
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	9b 81       	ldd	r25, Y+3	; 0x03
 784:	61 15       	cp	r22, r1
 786:	71 05       	cpc	r23, r1
 788:	21 f0       	breq	.+8      	; 0x792 <malloc+0x8e>
 78a:	fb 01       	movw	r30, r22
 78c:	93 83       	std	Z+3, r25	; 0x03
 78e:	82 83       	std	Z+2, r24	; 0x02
 790:	04 c0       	rjmp	.+8      	; 0x79a <malloc+0x96>
 792:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__flp+0x1>
 796:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__flp>
 79a:	fe 01       	movw	r30, r28
 79c:	32 96       	adiw	r30, 0x02	; 2
 79e:	44 c0       	rjmp	.+136    	; 0x828 <malloc+0x124>
 7a0:	fe 01       	movw	r30, r28
 7a2:	e2 0f       	add	r30, r18
 7a4:	f3 1f       	adc	r31, r19
 7a6:	81 93       	st	Z+, r24
 7a8:	91 93       	st	Z+, r25
 7aa:	22 50       	subi	r18, 0x02	; 2
 7ac:	31 09       	sbc	r19, r1
 7ae:	39 83       	std	Y+1, r19	; 0x01
 7b0:	28 83       	st	Y, r18
 7b2:	3a c0       	rjmp	.+116    	; 0x828 <malloc+0x124>
 7b4:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 7b8:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 7bc:	23 2b       	or	r18, r19
 7be:	41 f4       	brne	.+16     	; 0x7d0 <malloc+0xcc>
 7c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7c8:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <__brkval+0x1>
 7cc:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <__brkval>
 7d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7d8:	21 15       	cp	r18, r1
 7da:	31 05       	cpc	r19, r1
 7dc:	41 f4       	brne	.+16     	; 0x7ee <malloc+0xea>
 7de:	2d b7       	in	r18, 0x3d	; 61
 7e0:	3e b7       	in	r19, 0x3e	; 62
 7e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7ea:	24 1b       	sub	r18, r20
 7ec:	35 0b       	sbc	r19, r21
 7ee:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__brkval>
 7f2:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <__brkval+0x1>
 7f6:	e2 17       	cp	r30, r18
 7f8:	f3 07       	cpc	r31, r19
 7fa:	a0 f4       	brcc	.+40     	; 0x824 <malloc+0x120>
 7fc:	2e 1b       	sub	r18, r30
 7fe:	3f 0b       	sbc	r19, r31
 800:	28 17       	cp	r18, r24
 802:	39 07       	cpc	r19, r25
 804:	78 f0       	brcs	.+30     	; 0x824 <malloc+0x120>
 806:	ac 01       	movw	r20, r24
 808:	4e 5f       	subi	r20, 0xFE	; 254
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	24 17       	cp	r18, r20
 80e:	35 07       	cpc	r19, r21
 810:	48 f0       	brcs	.+18     	; 0x824 <malloc+0x120>
 812:	4e 0f       	add	r20, r30
 814:	5f 1f       	adc	r21, r31
 816:	50 93 9d 01 	sts	0x019D, r21	; 0x80019d <__brkval+0x1>
 81a:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <__brkval>
 81e:	81 93       	st	Z+, r24
 820:	91 93       	st	Z+, r25
 822:	02 c0       	rjmp	.+4      	; 0x828 <malloc+0x124>
 824:	e0 e0       	ldi	r30, 0x00	; 0
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	cf 01       	movw	r24, r30
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <free>:
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	09 f4       	brne	.+2      	; 0x83e <free+0xa>
 83c:	81 c0       	rjmp	.+258    	; 0x940 <__stack+0x41>
 83e:	fc 01       	movw	r30, r24
 840:	32 97       	sbiw	r30, 0x02	; 2
 842:	13 82       	std	Z+3, r1	; 0x03
 844:	12 82       	std	Z+2, r1	; 0x02
 846:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <__flp>
 84a:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <__flp+0x1>
 84e:	10 97       	sbiw	r26, 0x00	; 0
 850:	81 f4       	brne	.+32     	; 0x872 <free+0x3e>
 852:	20 81       	ld	r18, Z
 854:	31 81       	ldd	r19, Z+1	; 0x01
 856:	82 0f       	add	r24, r18
 858:	93 1f       	adc	r25, r19
 85a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 85e:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 862:	28 17       	cp	r18, r24
 864:	39 07       	cpc	r19, r25
 866:	51 f5       	brne	.+84     	; 0x8bc <free+0x88>
 868:	f0 93 9d 01 	sts	0x019D, r31	; 0x80019d <__brkval+0x1>
 86c:	e0 93 9c 01 	sts	0x019C, r30	; 0x80019c <__brkval>
 870:	67 c0       	rjmp	.+206    	; 0x940 <__stack+0x41>
 872:	ed 01       	movw	r28, r26
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	ce 17       	cp	r28, r30
 87a:	df 07       	cpc	r29, r31
 87c:	40 f4       	brcc	.+16     	; 0x88e <free+0x5a>
 87e:	4a 81       	ldd	r20, Y+2	; 0x02
 880:	5b 81       	ldd	r21, Y+3	; 0x03
 882:	9e 01       	movw	r18, r28
 884:	41 15       	cp	r20, r1
 886:	51 05       	cpc	r21, r1
 888:	f1 f0       	breq	.+60     	; 0x8c6 <free+0x92>
 88a:	ea 01       	movw	r28, r20
 88c:	f5 cf       	rjmp	.-22     	; 0x878 <free+0x44>
 88e:	d3 83       	std	Z+3, r29	; 0x03
 890:	c2 83       	std	Z+2, r28	; 0x02
 892:	40 81       	ld	r20, Z
 894:	51 81       	ldd	r21, Z+1	; 0x01
 896:	84 0f       	add	r24, r20
 898:	95 1f       	adc	r25, r21
 89a:	c8 17       	cp	r28, r24
 89c:	d9 07       	cpc	r29, r25
 89e:	59 f4       	brne	.+22     	; 0x8b6 <free+0x82>
 8a0:	88 81       	ld	r24, Y
 8a2:	99 81       	ldd	r25, Y+1	; 0x01
 8a4:	84 0f       	add	r24, r20
 8a6:	95 1f       	adc	r25, r21
 8a8:	02 96       	adiw	r24, 0x02	; 2
 8aa:	91 83       	std	Z+1, r25	; 0x01
 8ac:	80 83       	st	Z, r24
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	9b 81       	ldd	r25, Y+3	; 0x03
 8b2:	93 83       	std	Z+3, r25	; 0x03
 8b4:	82 83       	std	Z+2, r24	; 0x02
 8b6:	21 15       	cp	r18, r1
 8b8:	31 05       	cpc	r19, r1
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <free+0x92>
 8bc:	f0 93 9f 01 	sts	0x019F, r31	; 0x80019f <__flp+0x1>
 8c0:	e0 93 9e 01 	sts	0x019E, r30	; 0x80019e <__flp>
 8c4:	3d c0       	rjmp	.+122    	; 0x940 <__stack+0x41>
 8c6:	e9 01       	movw	r28, r18
 8c8:	fb 83       	std	Y+3, r31	; 0x03
 8ca:	ea 83       	std	Y+2, r30	; 0x02
 8cc:	49 91       	ld	r20, Y+
 8ce:	59 91       	ld	r21, Y+
 8d0:	c4 0f       	add	r28, r20
 8d2:	d5 1f       	adc	r29, r21
 8d4:	ec 17       	cp	r30, r28
 8d6:	fd 07       	cpc	r31, r29
 8d8:	61 f4       	brne	.+24     	; 0x8f2 <free+0xbe>
 8da:	80 81       	ld	r24, Z
 8dc:	91 81       	ldd	r25, Z+1	; 0x01
 8de:	84 0f       	add	r24, r20
 8e0:	95 1f       	adc	r25, r21
 8e2:	02 96       	adiw	r24, 0x02	; 2
 8e4:	e9 01       	movw	r28, r18
 8e6:	99 83       	std	Y+1, r25	; 0x01
 8e8:	88 83       	st	Y, r24
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	9b 83       	std	Y+3, r25	; 0x03
 8f0:	8a 83       	std	Y+2, r24	; 0x02
 8f2:	e0 e0       	ldi	r30, 0x00	; 0
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	12 96       	adiw	r26, 0x02	; 2
 8f8:	8d 91       	ld	r24, X+
 8fa:	9c 91       	ld	r25, X
 8fc:	13 97       	sbiw	r26, 0x03	; 3
 8fe:	00 97       	sbiw	r24, 0x00	; 0
 900:	19 f0       	breq	.+6      	; 0x908 <__stack+0x9>
 902:	fd 01       	movw	r30, r26
 904:	dc 01       	movw	r26, r24
 906:	f7 cf       	rjmp	.-18     	; 0x8f6 <free+0xc2>
 908:	8d 91       	ld	r24, X+
 90a:	9c 91       	ld	r25, X
 90c:	11 97       	sbiw	r26, 0x01	; 1
 90e:	9d 01       	movw	r18, r26
 910:	2e 5f       	subi	r18, 0xFE	; 254
 912:	3f 4f       	sbci	r19, 0xFF	; 255
 914:	82 0f       	add	r24, r18
 916:	93 1f       	adc	r25, r19
 918:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 91c:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 920:	28 17       	cp	r18, r24
 922:	39 07       	cpc	r19, r25
 924:	69 f4       	brne	.+26     	; 0x940 <__stack+0x41>
 926:	30 97       	sbiw	r30, 0x00	; 0
 928:	29 f4       	brne	.+10     	; 0x934 <__stack+0x35>
 92a:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__flp+0x1>
 92e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__flp>
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
 934:	13 82       	std	Z+3, r1	; 0x03
 936:	12 82       	std	Z+2, r1	; 0x02
 938:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <__brkval+0x1>
 93c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <__brkval>
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	08 95       	ret

00000946 <fputc>:
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	fb 01       	movw	r30, r22
 950:	23 81       	ldd	r18, Z+3	; 0x03
 952:	21 fd       	sbrc	r18, 1
 954:	03 c0       	rjmp	.+6      	; 0x95c <fputc+0x16>
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	9f ef       	ldi	r25, 0xFF	; 255
 95a:	2c c0       	rjmp	.+88     	; 0x9b4 <fputc+0x6e>
 95c:	22 ff       	sbrs	r18, 2
 95e:	16 c0       	rjmp	.+44     	; 0x98c <fputc+0x46>
 960:	46 81       	ldd	r20, Z+6	; 0x06
 962:	57 81       	ldd	r21, Z+7	; 0x07
 964:	24 81       	ldd	r18, Z+4	; 0x04
 966:	35 81       	ldd	r19, Z+5	; 0x05
 968:	42 17       	cp	r20, r18
 96a:	53 07       	cpc	r21, r19
 96c:	44 f4       	brge	.+16     	; 0x97e <fputc+0x38>
 96e:	a0 81       	ld	r26, Z
 970:	b1 81       	ldd	r27, Z+1	; 0x01
 972:	9d 01       	movw	r18, r26
 974:	2f 5f       	subi	r18, 0xFF	; 255
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	31 83       	std	Z+1, r19	; 0x01
 97a:	20 83       	st	Z, r18
 97c:	8c 93       	st	X, r24
 97e:	26 81       	ldd	r18, Z+6	; 0x06
 980:	37 81       	ldd	r19, Z+7	; 0x07
 982:	2f 5f       	subi	r18, 0xFF	; 255
 984:	3f 4f       	sbci	r19, 0xFF	; 255
 986:	37 83       	std	Z+7, r19	; 0x07
 988:	26 83       	std	Z+6, r18	; 0x06
 98a:	14 c0       	rjmp	.+40     	; 0x9b4 <fputc+0x6e>
 98c:	8b 01       	movw	r16, r22
 98e:	ec 01       	movw	r28, r24
 990:	fb 01       	movw	r30, r22
 992:	00 84       	ldd	r0, Z+8	; 0x08
 994:	f1 85       	ldd	r31, Z+9	; 0x09
 996:	e0 2d       	mov	r30, r0
 998:	09 95       	icall
 99a:	89 2b       	or	r24, r25
 99c:	e1 f6       	brne	.-72     	; 0x956 <fputc+0x10>
 99e:	d8 01       	movw	r26, r16
 9a0:	16 96       	adiw	r26, 0x06	; 6
 9a2:	8d 91       	ld	r24, X+
 9a4:	9c 91       	ld	r25, X
 9a6:	17 97       	sbiw	r26, 0x07	; 7
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	17 96       	adiw	r26, 0x07	; 7
 9ac:	9c 93       	st	X, r25
 9ae:	8e 93       	st	-X, r24
 9b0:	16 97       	sbiw	r26, 0x06	; 6
 9b2:	ce 01       	movw	r24, r28
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <printf>:
 9be:	a0 e0       	ldi	r26, 0x00	; 0
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	e5 ee       	ldi	r30, 0xE5	; 229
 9c4:	f4 e0       	ldi	r31, 0x04	; 4
 9c6:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__prologue_saves__+0x20>
 9ca:	ae 01       	movw	r20, r28
 9cc:	4b 5f       	subi	r20, 0xFB	; 251
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	fa 01       	movw	r30, r20
 9d2:	61 91       	ld	r22, Z+
 9d4:	71 91       	ld	r23, Z+
 9d6:	af 01       	movw	r20, r30
 9d8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__iob+0x2>
 9dc:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__iob+0x3>
 9e0:	0e 94 25 05 	call	0xa4a	; 0xa4a <vfprintf>
 9e4:	e2 e0       	ldi	r30, 0x02	; 2
 9e6:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__epilogue_restores__+0x20>

000009ea <puts>:
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__iob+0x2>
 9f6:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <__iob+0x3>
 9fa:	23 81       	ldd	r18, Z+3	; 0x03
 9fc:	21 ff       	sbrs	r18, 1
 9fe:	1b c0       	rjmp	.+54     	; 0xa36 <puts+0x4c>
 a00:	8c 01       	movw	r16, r24
 a02:	d0 e0       	ldi	r29, 0x00	; 0
 a04:	c0 e0       	ldi	r28, 0x00	; 0
 a06:	f8 01       	movw	r30, r16
 a08:	81 91       	ld	r24, Z+
 a0a:	8f 01       	movw	r16, r30
 a0c:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <__iob+0x2>
 a10:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <__iob+0x3>
 a14:	db 01       	movw	r26, r22
 a16:	18 96       	adiw	r26, 0x08	; 8
 a18:	ed 91       	ld	r30, X+
 a1a:	fc 91       	ld	r31, X
 a1c:	19 97       	sbiw	r26, 0x09	; 9
 a1e:	88 23       	and	r24, r24
 a20:	31 f0       	breq	.+12     	; 0xa2e <puts+0x44>
 a22:	09 95       	icall
 a24:	89 2b       	or	r24, r25
 a26:	79 f3       	breq	.-34     	; 0xa06 <puts+0x1c>
 a28:	df ef       	ldi	r29, 0xFF	; 255
 a2a:	cf ef       	ldi	r28, 0xFF	; 255
 a2c:	ec cf       	rjmp	.-40     	; 0xa06 <puts+0x1c>
 a2e:	8a e0       	ldi	r24, 0x0A	; 10
 a30:	09 95       	icall
 a32:	89 2b       	or	r24, r25
 a34:	19 f0       	breq	.+6      	; 0xa3c <puts+0x52>
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <puts+0x56>
 a3c:	8d 2f       	mov	r24, r29
 a3e:	9c 2f       	mov	r25, r28
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <vfprintf>:
 a4a:	ab e0       	ldi	r26, 0x0B	; 11
 a4c:	b0 e0       	ldi	r27, 0x00	; 0
 a4e:	eb e2       	ldi	r30, 0x2B	; 43
 a50:	f5 e0       	ldi	r31, 0x05	; 5
 a52:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__prologue_saves__>
 a56:	6c 01       	movw	r12, r24
 a58:	7b 01       	movw	r14, r22
 a5a:	8a 01       	movw	r16, r20
 a5c:	fc 01       	movw	r30, r24
 a5e:	17 82       	std	Z+7, r1	; 0x07
 a60:	16 82       	std	Z+6, r1	; 0x06
 a62:	83 81       	ldd	r24, Z+3	; 0x03
 a64:	81 ff       	sbrs	r24, 1
 a66:	cc c1       	rjmp	.+920    	; 0xe00 <vfprintf+0x3b6>
 a68:	ce 01       	movw	r24, r28
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	3c 01       	movw	r6, r24
 a6e:	f6 01       	movw	r30, r12
 a70:	93 81       	ldd	r25, Z+3	; 0x03
 a72:	f7 01       	movw	r30, r14
 a74:	93 fd       	sbrc	r25, 3
 a76:	85 91       	lpm	r24, Z+
 a78:	93 ff       	sbrs	r25, 3
 a7a:	81 91       	ld	r24, Z+
 a7c:	7f 01       	movw	r14, r30
 a7e:	88 23       	and	r24, r24
 a80:	09 f4       	brne	.+2      	; 0xa84 <vfprintf+0x3a>
 a82:	ba c1       	rjmp	.+884    	; 0xdf8 <vfprintf+0x3ae>
 a84:	85 32       	cpi	r24, 0x25	; 37
 a86:	39 f4       	brne	.+14     	; 0xa96 <vfprintf+0x4c>
 a88:	93 fd       	sbrc	r25, 3
 a8a:	85 91       	lpm	r24, Z+
 a8c:	93 ff       	sbrs	r25, 3
 a8e:	81 91       	ld	r24, Z+
 a90:	7f 01       	movw	r14, r30
 a92:	85 32       	cpi	r24, 0x25	; 37
 a94:	29 f4       	brne	.+10     	; 0xaa0 <vfprintf+0x56>
 a96:	b6 01       	movw	r22, r12
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 a9e:	e7 cf       	rjmp	.-50     	; 0xa6e <vfprintf+0x24>
 aa0:	91 2c       	mov	r9, r1
 aa2:	21 2c       	mov	r2, r1
 aa4:	31 2c       	mov	r3, r1
 aa6:	ff e1       	ldi	r31, 0x1F	; 31
 aa8:	f3 15       	cp	r31, r3
 aaa:	d8 f0       	brcs	.+54     	; 0xae2 <vfprintf+0x98>
 aac:	8b 32       	cpi	r24, 0x2B	; 43
 aae:	79 f0       	breq	.+30     	; 0xace <vfprintf+0x84>
 ab0:	38 f4       	brcc	.+14     	; 0xac0 <vfprintf+0x76>
 ab2:	80 32       	cpi	r24, 0x20	; 32
 ab4:	79 f0       	breq	.+30     	; 0xad4 <vfprintf+0x8a>
 ab6:	83 32       	cpi	r24, 0x23	; 35
 ab8:	a1 f4       	brne	.+40     	; 0xae2 <vfprintf+0x98>
 aba:	23 2d       	mov	r18, r3
 abc:	20 61       	ori	r18, 0x10	; 16
 abe:	1d c0       	rjmp	.+58     	; 0xafa <vfprintf+0xb0>
 ac0:	8d 32       	cpi	r24, 0x2D	; 45
 ac2:	61 f0       	breq	.+24     	; 0xadc <vfprintf+0x92>
 ac4:	80 33       	cpi	r24, 0x30	; 48
 ac6:	69 f4       	brne	.+26     	; 0xae2 <vfprintf+0x98>
 ac8:	23 2d       	mov	r18, r3
 aca:	21 60       	ori	r18, 0x01	; 1
 acc:	16 c0       	rjmp	.+44     	; 0xafa <vfprintf+0xb0>
 ace:	83 2d       	mov	r24, r3
 ad0:	82 60       	ori	r24, 0x02	; 2
 ad2:	38 2e       	mov	r3, r24
 ad4:	e3 2d       	mov	r30, r3
 ad6:	e4 60       	ori	r30, 0x04	; 4
 ad8:	3e 2e       	mov	r3, r30
 ada:	2a c0       	rjmp	.+84     	; 0xb30 <vfprintf+0xe6>
 adc:	f3 2d       	mov	r31, r3
 ade:	f8 60       	ori	r31, 0x08	; 8
 ae0:	1d c0       	rjmp	.+58     	; 0xb1c <vfprintf+0xd2>
 ae2:	37 fc       	sbrc	r3, 7
 ae4:	2d c0       	rjmp	.+90     	; 0xb40 <vfprintf+0xf6>
 ae6:	20 ed       	ldi	r18, 0xD0	; 208
 ae8:	28 0f       	add	r18, r24
 aea:	2a 30       	cpi	r18, 0x0A	; 10
 aec:	40 f0       	brcs	.+16     	; 0xafe <vfprintf+0xb4>
 aee:	8e 32       	cpi	r24, 0x2E	; 46
 af0:	b9 f4       	brne	.+46     	; 0xb20 <vfprintf+0xd6>
 af2:	36 fc       	sbrc	r3, 6
 af4:	81 c1       	rjmp	.+770    	; 0xdf8 <vfprintf+0x3ae>
 af6:	23 2d       	mov	r18, r3
 af8:	20 64       	ori	r18, 0x40	; 64
 afa:	32 2e       	mov	r3, r18
 afc:	19 c0       	rjmp	.+50     	; 0xb30 <vfprintf+0xe6>
 afe:	36 fe       	sbrs	r3, 6
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <vfprintf+0xc4>
 b02:	8a e0       	ldi	r24, 0x0A	; 10
 b04:	98 9e       	mul	r9, r24
 b06:	20 0d       	add	r18, r0
 b08:	11 24       	eor	r1, r1
 b0a:	92 2e       	mov	r9, r18
 b0c:	11 c0       	rjmp	.+34     	; 0xb30 <vfprintf+0xe6>
 b0e:	ea e0       	ldi	r30, 0x0A	; 10
 b10:	2e 9e       	mul	r2, r30
 b12:	20 0d       	add	r18, r0
 b14:	11 24       	eor	r1, r1
 b16:	22 2e       	mov	r2, r18
 b18:	f3 2d       	mov	r31, r3
 b1a:	f0 62       	ori	r31, 0x20	; 32
 b1c:	3f 2e       	mov	r3, r31
 b1e:	08 c0       	rjmp	.+16     	; 0xb30 <vfprintf+0xe6>
 b20:	8c 36       	cpi	r24, 0x6C	; 108
 b22:	21 f4       	brne	.+8      	; 0xb2c <vfprintf+0xe2>
 b24:	83 2d       	mov	r24, r3
 b26:	80 68       	ori	r24, 0x80	; 128
 b28:	38 2e       	mov	r3, r24
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vfprintf+0xe6>
 b2c:	88 36       	cpi	r24, 0x68	; 104
 b2e:	41 f4       	brne	.+16     	; 0xb40 <vfprintf+0xf6>
 b30:	f7 01       	movw	r30, r14
 b32:	93 fd       	sbrc	r25, 3
 b34:	85 91       	lpm	r24, Z+
 b36:	93 ff       	sbrs	r25, 3
 b38:	81 91       	ld	r24, Z+
 b3a:	7f 01       	movw	r14, r30
 b3c:	81 11       	cpse	r24, r1
 b3e:	b3 cf       	rjmp	.-154    	; 0xaa6 <vfprintf+0x5c>
 b40:	98 2f       	mov	r25, r24
 b42:	9f 7d       	andi	r25, 0xDF	; 223
 b44:	95 54       	subi	r25, 0x45	; 69
 b46:	93 30       	cpi	r25, 0x03	; 3
 b48:	28 f4       	brcc	.+10     	; 0xb54 <vfprintf+0x10a>
 b4a:	0c 5f       	subi	r16, 0xFC	; 252
 b4c:	1f 4f       	sbci	r17, 0xFF	; 255
 b4e:	9f e3       	ldi	r25, 0x3F	; 63
 b50:	99 83       	std	Y+1, r25	; 0x01
 b52:	0d c0       	rjmp	.+26     	; 0xb6e <vfprintf+0x124>
 b54:	83 36       	cpi	r24, 0x63	; 99
 b56:	31 f0       	breq	.+12     	; 0xb64 <vfprintf+0x11a>
 b58:	83 37       	cpi	r24, 0x73	; 115
 b5a:	71 f0       	breq	.+28     	; 0xb78 <vfprintf+0x12e>
 b5c:	83 35       	cpi	r24, 0x53	; 83
 b5e:	09 f0       	breq	.+2      	; 0xb62 <vfprintf+0x118>
 b60:	59 c0       	rjmp	.+178    	; 0xc14 <vfprintf+0x1ca>
 b62:	21 c0       	rjmp	.+66     	; 0xba6 <vfprintf+0x15c>
 b64:	f8 01       	movw	r30, r16
 b66:	80 81       	ld	r24, Z
 b68:	89 83       	std	Y+1, r24	; 0x01
 b6a:	0e 5f       	subi	r16, 0xFE	; 254
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	88 24       	eor	r8, r8
 b70:	83 94       	inc	r8
 b72:	91 2c       	mov	r9, r1
 b74:	53 01       	movw	r10, r6
 b76:	13 c0       	rjmp	.+38     	; 0xb9e <vfprintf+0x154>
 b78:	28 01       	movw	r4, r16
 b7a:	f2 e0       	ldi	r31, 0x02	; 2
 b7c:	4f 0e       	add	r4, r31
 b7e:	51 1c       	adc	r5, r1
 b80:	f8 01       	movw	r30, r16
 b82:	a0 80       	ld	r10, Z
 b84:	b1 80       	ldd	r11, Z+1	; 0x01
 b86:	36 fe       	sbrs	r3, 6
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x146>
 b8a:	69 2d       	mov	r22, r9
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x14a>
 b90:	6f ef       	ldi	r22, 0xFF	; 255
 b92:	7f ef       	ldi	r23, 0xFF	; 255
 b94:	c5 01       	movw	r24, r10
 b96:	0e 94 11 07 	call	0xe22	; 0xe22 <strnlen>
 b9a:	4c 01       	movw	r8, r24
 b9c:	82 01       	movw	r16, r4
 b9e:	f3 2d       	mov	r31, r3
 ba0:	ff 77       	andi	r31, 0x7F	; 127
 ba2:	3f 2e       	mov	r3, r31
 ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <vfprintf+0x188>
 ba6:	28 01       	movw	r4, r16
 ba8:	22 e0       	ldi	r18, 0x02	; 2
 baa:	42 0e       	add	r4, r18
 bac:	51 1c       	adc	r5, r1
 bae:	f8 01       	movw	r30, r16
 bb0:	a0 80       	ld	r10, Z
 bb2:	b1 80       	ldd	r11, Z+1	; 0x01
 bb4:	36 fe       	sbrs	r3, 6
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <vfprintf+0x174>
 bb8:	69 2d       	mov	r22, r9
 bba:	70 e0       	ldi	r23, 0x00	; 0
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <vfprintf+0x178>
 bbe:	6f ef       	ldi	r22, 0xFF	; 255
 bc0:	7f ef       	ldi	r23, 0xFF	; 255
 bc2:	c5 01       	movw	r24, r10
 bc4:	0e 94 06 07 	call	0xe0c	; 0xe0c <strnlen_P>
 bc8:	4c 01       	movw	r8, r24
 bca:	f3 2d       	mov	r31, r3
 bcc:	f0 68       	ori	r31, 0x80	; 128
 bce:	3f 2e       	mov	r3, r31
 bd0:	82 01       	movw	r16, r4
 bd2:	33 fc       	sbrc	r3, 3
 bd4:	1b c0       	rjmp	.+54     	; 0xc0c <vfprintf+0x1c2>
 bd6:	82 2d       	mov	r24, r2
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	88 16       	cp	r8, r24
 bdc:	99 06       	cpc	r9, r25
 bde:	b0 f4       	brcc	.+44     	; 0xc0c <vfprintf+0x1c2>
 be0:	b6 01       	movw	r22, r12
 be2:	80 e2       	ldi	r24, 0x20	; 32
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 bea:	2a 94       	dec	r2
 bec:	f4 cf       	rjmp	.-24     	; 0xbd6 <vfprintf+0x18c>
 bee:	f5 01       	movw	r30, r10
 bf0:	37 fc       	sbrc	r3, 7
 bf2:	85 91       	lpm	r24, Z+
 bf4:	37 fe       	sbrs	r3, 7
 bf6:	81 91       	ld	r24, Z+
 bf8:	5f 01       	movw	r10, r30
 bfa:	b6 01       	movw	r22, r12
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 c02:	21 10       	cpse	r2, r1
 c04:	2a 94       	dec	r2
 c06:	21 e0       	ldi	r18, 0x01	; 1
 c08:	82 1a       	sub	r8, r18
 c0a:	91 08       	sbc	r9, r1
 c0c:	81 14       	cp	r8, r1
 c0e:	91 04       	cpc	r9, r1
 c10:	71 f7       	brne	.-36     	; 0xbee <vfprintf+0x1a4>
 c12:	e8 c0       	rjmp	.+464    	; 0xde4 <vfprintf+0x39a>
 c14:	84 36       	cpi	r24, 0x64	; 100
 c16:	11 f0       	breq	.+4      	; 0xc1c <vfprintf+0x1d2>
 c18:	89 36       	cpi	r24, 0x69	; 105
 c1a:	41 f5       	brne	.+80     	; 0xc6c <vfprintf+0x222>
 c1c:	f8 01       	movw	r30, r16
 c1e:	37 fe       	sbrs	r3, 7
 c20:	07 c0       	rjmp	.+14     	; 0xc30 <vfprintf+0x1e6>
 c22:	60 81       	ld	r22, Z
 c24:	71 81       	ldd	r23, Z+1	; 0x01
 c26:	82 81       	ldd	r24, Z+2	; 0x02
 c28:	93 81       	ldd	r25, Z+3	; 0x03
 c2a:	0c 5f       	subi	r16, 0xFC	; 252
 c2c:	1f 4f       	sbci	r17, 0xFF	; 255
 c2e:	08 c0       	rjmp	.+16     	; 0xc40 <vfprintf+0x1f6>
 c30:	60 81       	ld	r22, Z
 c32:	71 81       	ldd	r23, Z+1	; 0x01
 c34:	07 2e       	mov	r0, r23
 c36:	00 0c       	add	r0, r0
 c38:	88 0b       	sbc	r24, r24
 c3a:	99 0b       	sbc	r25, r25
 c3c:	0e 5f       	subi	r16, 0xFE	; 254
 c3e:	1f 4f       	sbci	r17, 0xFF	; 255
 c40:	f3 2d       	mov	r31, r3
 c42:	ff 76       	andi	r31, 0x6F	; 111
 c44:	3f 2e       	mov	r3, r31
 c46:	97 ff       	sbrs	r25, 7
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <vfprintf+0x212>
 c4a:	90 95       	com	r25
 c4c:	80 95       	com	r24
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	f0 68       	ori	r31, 0x80	; 128
 c5a:	3f 2e       	mov	r3, r31
 c5c:	2a e0       	ldi	r18, 0x0A	; 10
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	a3 01       	movw	r20, r6
 c62:	0e 94 1c 07 	call	0xe38	; 0xe38 <__ultoa_invert>
 c66:	88 2e       	mov	r8, r24
 c68:	86 18       	sub	r8, r6
 c6a:	45 c0       	rjmp	.+138    	; 0xcf6 <vfprintf+0x2ac>
 c6c:	85 37       	cpi	r24, 0x75	; 117
 c6e:	31 f4       	brne	.+12     	; 0xc7c <vfprintf+0x232>
 c70:	23 2d       	mov	r18, r3
 c72:	2f 7e       	andi	r18, 0xEF	; 239
 c74:	b2 2e       	mov	r11, r18
 c76:	2a e0       	ldi	r18, 0x0A	; 10
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	25 c0       	rjmp	.+74     	; 0xcc6 <vfprintf+0x27c>
 c7c:	93 2d       	mov	r25, r3
 c7e:	99 7f       	andi	r25, 0xF9	; 249
 c80:	b9 2e       	mov	r11, r25
 c82:	8f 36       	cpi	r24, 0x6F	; 111
 c84:	c1 f0       	breq	.+48     	; 0xcb6 <vfprintf+0x26c>
 c86:	18 f4       	brcc	.+6      	; 0xc8e <vfprintf+0x244>
 c88:	88 35       	cpi	r24, 0x58	; 88
 c8a:	79 f0       	breq	.+30     	; 0xcaa <vfprintf+0x260>
 c8c:	b5 c0       	rjmp	.+362    	; 0xdf8 <vfprintf+0x3ae>
 c8e:	80 37       	cpi	r24, 0x70	; 112
 c90:	19 f0       	breq	.+6      	; 0xc98 <vfprintf+0x24e>
 c92:	88 37       	cpi	r24, 0x78	; 120
 c94:	21 f0       	breq	.+8      	; 0xc9e <vfprintf+0x254>
 c96:	b0 c0       	rjmp	.+352    	; 0xdf8 <vfprintf+0x3ae>
 c98:	e9 2f       	mov	r30, r25
 c9a:	e0 61       	ori	r30, 0x10	; 16
 c9c:	be 2e       	mov	r11, r30
 c9e:	b4 fe       	sbrs	r11, 4
 ca0:	0d c0       	rjmp	.+26     	; 0xcbc <vfprintf+0x272>
 ca2:	fb 2d       	mov	r31, r11
 ca4:	f4 60       	ori	r31, 0x04	; 4
 ca6:	bf 2e       	mov	r11, r31
 ca8:	09 c0       	rjmp	.+18     	; 0xcbc <vfprintf+0x272>
 caa:	34 fe       	sbrs	r3, 4
 cac:	0a c0       	rjmp	.+20     	; 0xcc2 <vfprintf+0x278>
 cae:	29 2f       	mov	r18, r25
 cb0:	26 60       	ori	r18, 0x06	; 6
 cb2:	b2 2e       	mov	r11, r18
 cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <vfprintf+0x278>
 cb6:	28 e0       	ldi	r18, 0x08	; 8
 cb8:	30 e0       	ldi	r19, 0x00	; 0
 cba:	05 c0       	rjmp	.+10     	; 0xcc6 <vfprintf+0x27c>
 cbc:	20 e1       	ldi	r18, 0x10	; 16
 cbe:	30 e0       	ldi	r19, 0x00	; 0
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <vfprintf+0x27c>
 cc2:	20 e1       	ldi	r18, 0x10	; 16
 cc4:	32 e0       	ldi	r19, 0x02	; 2
 cc6:	f8 01       	movw	r30, r16
 cc8:	b7 fe       	sbrs	r11, 7
 cca:	07 c0       	rjmp	.+14     	; 0xcda <vfprintf+0x290>
 ccc:	60 81       	ld	r22, Z
 cce:	71 81       	ldd	r23, Z+1	; 0x01
 cd0:	82 81       	ldd	r24, Z+2	; 0x02
 cd2:	93 81       	ldd	r25, Z+3	; 0x03
 cd4:	0c 5f       	subi	r16, 0xFC	; 252
 cd6:	1f 4f       	sbci	r17, 0xFF	; 255
 cd8:	06 c0       	rjmp	.+12     	; 0xce6 <vfprintf+0x29c>
 cda:	60 81       	ld	r22, Z
 cdc:	71 81       	ldd	r23, Z+1	; 0x01
 cde:	80 e0       	ldi	r24, 0x00	; 0
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	0e 5f       	subi	r16, 0xFE	; 254
 ce4:	1f 4f       	sbci	r17, 0xFF	; 255
 ce6:	a3 01       	movw	r20, r6
 ce8:	0e 94 1c 07 	call	0xe38	; 0xe38 <__ultoa_invert>
 cec:	88 2e       	mov	r8, r24
 cee:	86 18       	sub	r8, r6
 cf0:	fb 2d       	mov	r31, r11
 cf2:	ff 77       	andi	r31, 0x7F	; 127
 cf4:	3f 2e       	mov	r3, r31
 cf6:	36 fe       	sbrs	r3, 6
 cf8:	0d c0       	rjmp	.+26     	; 0xd14 <vfprintf+0x2ca>
 cfa:	23 2d       	mov	r18, r3
 cfc:	2e 7f       	andi	r18, 0xFE	; 254
 cfe:	a2 2e       	mov	r10, r18
 d00:	89 14       	cp	r8, r9
 d02:	58 f4       	brcc	.+22     	; 0xd1a <vfprintf+0x2d0>
 d04:	34 fe       	sbrs	r3, 4
 d06:	0b c0       	rjmp	.+22     	; 0xd1e <vfprintf+0x2d4>
 d08:	32 fc       	sbrc	r3, 2
 d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x2d4>
 d0c:	83 2d       	mov	r24, r3
 d0e:	8e 7e       	andi	r24, 0xEE	; 238
 d10:	a8 2e       	mov	r10, r24
 d12:	05 c0       	rjmp	.+10     	; 0xd1e <vfprintf+0x2d4>
 d14:	b8 2c       	mov	r11, r8
 d16:	a3 2c       	mov	r10, r3
 d18:	03 c0       	rjmp	.+6      	; 0xd20 <vfprintf+0x2d6>
 d1a:	b8 2c       	mov	r11, r8
 d1c:	01 c0       	rjmp	.+2      	; 0xd20 <vfprintf+0x2d6>
 d1e:	b9 2c       	mov	r11, r9
 d20:	a4 fe       	sbrs	r10, 4
 d22:	0f c0       	rjmp	.+30     	; 0xd42 <vfprintf+0x2f8>
 d24:	fe 01       	movw	r30, r28
 d26:	e8 0d       	add	r30, r8
 d28:	f1 1d       	adc	r31, r1
 d2a:	80 81       	ld	r24, Z
 d2c:	80 33       	cpi	r24, 0x30	; 48
 d2e:	21 f4       	brne	.+8      	; 0xd38 <vfprintf+0x2ee>
 d30:	9a 2d       	mov	r25, r10
 d32:	99 7e       	andi	r25, 0xE9	; 233
 d34:	a9 2e       	mov	r10, r25
 d36:	09 c0       	rjmp	.+18     	; 0xd4a <vfprintf+0x300>
 d38:	a2 fe       	sbrs	r10, 2
 d3a:	06 c0       	rjmp	.+12     	; 0xd48 <vfprintf+0x2fe>
 d3c:	b3 94       	inc	r11
 d3e:	b3 94       	inc	r11
 d40:	04 c0       	rjmp	.+8      	; 0xd4a <vfprintf+0x300>
 d42:	8a 2d       	mov	r24, r10
 d44:	86 78       	andi	r24, 0x86	; 134
 d46:	09 f0       	breq	.+2      	; 0xd4a <vfprintf+0x300>
 d48:	b3 94       	inc	r11
 d4a:	a3 fc       	sbrc	r10, 3
 d4c:	11 c0       	rjmp	.+34     	; 0xd70 <vfprintf+0x326>
 d4e:	a0 fe       	sbrs	r10, 0
 d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x314>
 d52:	b2 14       	cp	r11, r2
 d54:	88 f4       	brcc	.+34     	; 0xd78 <vfprintf+0x32e>
 d56:	28 0c       	add	r2, r8
 d58:	92 2c       	mov	r9, r2
 d5a:	9b 18       	sub	r9, r11
 d5c:	0e c0       	rjmp	.+28     	; 0xd7a <vfprintf+0x330>
 d5e:	b2 14       	cp	r11, r2
 d60:	60 f4       	brcc	.+24     	; 0xd7a <vfprintf+0x330>
 d62:	b6 01       	movw	r22, r12
 d64:	80 e2       	ldi	r24, 0x20	; 32
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 d6c:	b3 94       	inc	r11
 d6e:	f7 cf       	rjmp	.-18     	; 0xd5e <vfprintf+0x314>
 d70:	b2 14       	cp	r11, r2
 d72:	18 f4       	brcc	.+6      	; 0xd7a <vfprintf+0x330>
 d74:	2b 18       	sub	r2, r11
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x332>
 d78:	98 2c       	mov	r9, r8
 d7a:	21 2c       	mov	r2, r1
 d7c:	a4 fe       	sbrs	r10, 4
 d7e:	10 c0       	rjmp	.+32     	; 0xda0 <vfprintf+0x356>
 d80:	b6 01       	movw	r22, r12
 d82:	80 e3       	ldi	r24, 0x30	; 48
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 d8a:	a2 fe       	sbrs	r10, 2
 d8c:	17 c0       	rjmp	.+46     	; 0xdbc <vfprintf+0x372>
 d8e:	a1 fc       	sbrc	r10, 1
 d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x34e>
 d92:	88 e7       	ldi	r24, 0x78	; 120
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x352>
 d98:	88 e5       	ldi	r24, 0x58	; 88
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	b6 01       	movw	r22, r12
 d9e:	0c c0       	rjmp	.+24     	; 0xdb8 <vfprintf+0x36e>
 da0:	8a 2d       	mov	r24, r10
 da2:	86 78       	andi	r24, 0x86	; 134
 da4:	59 f0       	breq	.+22     	; 0xdbc <vfprintf+0x372>
 da6:	a1 fe       	sbrs	r10, 1
 da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0x364>
 daa:	8b e2       	ldi	r24, 0x2B	; 43
 dac:	01 c0       	rjmp	.+2      	; 0xdb0 <vfprintf+0x366>
 dae:	80 e2       	ldi	r24, 0x20	; 32
 db0:	a7 fc       	sbrc	r10, 7
 db2:	8d e2       	ldi	r24, 0x2D	; 45
 db4:	b6 01       	movw	r22, r12
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 dbc:	89 14       	cp	r8, r9
 dbe:	38 f4       	brcc	.+14     	; 0xdce <vfprintf+0x384>
 dc0:	b6 01       	movw	r22, r12
 dc2:	80 e3       	ldi	r24, 0x30	; 48
 dc4:	90 e0       	ldi	r25, 0x00	; 0
 dc6:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 dca:	9a 94       	dec	r9
 dcc:	f7 cf       	rjmp	.-18     	; 0xdbc <vfprintf+0x372>
 dce:	8a 94       	dec	r8
 dd0:	f3 01       	movw	r30, r6
 dd2:	e8 0d       	add	r30, r8
 dd4:	f1 1d       	adc	r31, r1
 dd6:	80 81       	ld	r24, Z
 dd8:	b6 01       	movw	r22, r12
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 de0:	81 10       	cpse	r8, r1
 de2:	f5 cf       	rjmp	.-22     	; 0xdce <vfprintf+0x384>
 de4:	22 20       	and	r2, r2
 de6:	09 f4       	brne	.+2      	; 0xdea <vfprintf+0x3a0>
 de8:	42 ce       	rjmp	.-892    	; 0xa6e <vfprintf+0x24>
 dea:	b6 01       	movw	r22, r12
 dec:	80 e2       	ldi	r24, 0x20	; 32
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	0e 94 a3 04 	call	0x946	; 0x946 <fputc>
 df4:	2a 94       	dec	r2
 df6:	f6 cf       	rjmp	.-20     	; 0xde4 <vfprintf+0x39a>
 df8:	f6 01       	movw	r30, r12
 dfa:	86 81       	ldd	r24, Z+6	; 0x06
 dfc:	97 81       	ldd	r25, Z+7	; 0x07
 dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x3ba>
 e00:	8f ef       	ldi	r24, 0xFF	; 255
 e02:	9f ef       	ldi	r25, 0xFF	; 255
 e04:	2b 96       	adiw	r28, 0x0b	; 11
 e06:	e2 e1       	ldi	r30, 0x12	; 18
 e08:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__epilogue_restores__>

00000e0c <strnlen_P>:
 e0c:	fc 01       	movw	r30, r24
 e0e:	05 90       	lpm	r0, Z+
 e10:	61 50       	subi	r22, 0x01	; 1
 e12:	70 40       	sbci	r23, 0x00	; 0
 e14:	01 10       	cpse	r0, r1
 e16:	d8 f7       	brcc	.-10     	; 0xe0e <strnlen_P+0x2>
 e18:	80 95       	com	r24
 e1a:	90 95       	com	r25
 e1c:	8e 0f       	add	r24, r30
 e1e:	9f 1f       	adc	r25, r31
 e20:	08 95       	ret

00000e22 <strnlen>:
 e22:	fc 01       	movw	r30, r24
 e24:	61 50       	subi	r22, 0x01	; 1
 e26:	70 40       	sbci	r23, 0x00	; 0
 e28:	01 90       	ld	r0, Z+
 e2a:	01 10       	cpse	r0, r1
 e2c:	d8 f7       	brcc	.-10     	; 0xe24 <strnlen+0x2>
 e2e:	80 95       	com	r24
 e30:	90 95       	com	r25
 e32:	8e 0f       	add	r24, r30
 e34:	9f 1f       	adc	r25, r31
 e36:	08 95       	ret

00000e38 <__ultoa_invert>:
 e38:	fa 01       	movw	r30, r20
 e3a:	aa 27       	eor	r26, r26
 e3c:	28 30       	cpi	r18, 0x08	; 8
 e3e:	51 f1       	breq	.+84     	; 0xe94 <__ultoa_invert+0x5c>
 e40:	20 31       	cpi	r18, 0x10	; 16
 e42:	81 f1       	breq	.+96     	; 0xea4 <__ultoa_invert+0x6c>
 e44:	e8 94       	clt
 e46:	6f 93       	push	r22
 e48:	6e 7f       	andi	r22, 0xFE	; 254
 e4a:	6e 5f       	subi	r22, 0xFE	; 254
 e4c:	7f 4f       	sbci	r23, 0xFF	; 255
 e4e:	8f 4f       	sbci	r24, 0xFF	; 255
 e50:	9f 4f       	sbci	r25, 0xFF	; 255
 e52:	af 4f       	sbci	r26, 0xFF	; 255
 e54:	b1 e0       	ldi	r27, 0x01	; 1
 e56:	3e d0       	rcall	.+124    	; 0xed4 <__ultoa_invert+0x9c>
 e58:	b4 e0       	ldi	r27, 0x04	; 4
 e5a:	3c d0       	rcall	.+120    	; 0xed4 <__ultoa_invert+0x9c>
 e5c:	67 0f       	add	r22, r23
 e5e:	78 1f       	adc	r23, r24
 e60:	89 1f       	adc	r24, r25
 e62:	9a 1f       	adc	r25, r26
 e64:	a1 1d       	adc	r26, r1
 e66:	68 0f       	add	r22, r24
 e68:	79 1f       	adc	r23, r25
 e6a:	8a 1f       	adc	r24, r26
 e6c:	91 1d       	adc	r25, r1
 e6e:	a1 1d       	adc	r26, r1
 e70:	6a 0f       	add	r22, r26
 e72:	71 1d       	adc	r23, r1
 e74:	81 1d       	adc	r24, r1
 e76:	91 1d       	adc	r25, r1
 e78:	a1 1d       	adc	r26, r1
 e7a:	20 d0       	rcall	.+64     	; 0xebc <__ultoa_invert+0x84>
 e7c:	09 f4       	brne	.+2      	; 0xe80 <__ultoa_invert+0x48>
 e7e:	68 94       	set
 e80:	3f 91       	pop	r19
 e82:	2a e0       	ldi	r18, 0x0A	; 10
 e84:	26 9f       	mul	r18, r22
 e86:	11 24       	eor	r1, r1
 e88:	30 19       	sub	r19, r0
 e8a:	30 5d       	subi	r19, 0xD0	; 208
 e8c:	31 93       	st	Z+, r19
 e8e:	de f6       	brtc	.-74     	; 0xe46 <__ultoa_invert+0xe>
 e90:	cf 01       	movw	r24, r30
 e92:	08 95       	ret
 e94:	46 2f       	mov	r20, r22
 e96:	47 70       	andi	r20, 0x07	; 7
 e98:	40 5d       	subi	r20, 0xD0	; 208
 e9a:	41 93       	st	Z+, r20
 e9c:	b3 e0       	ldi	r27, 0x03	; 3
 e9e:	0f d0       	rcall	.+30     	; 0xebe <__ultoa_invert+0x86>
 ea0:	c9 f7       	brne	.-14     	; 0xe94 <__ultoa_invert+0x5c>
 ea2:	f6 cf       	rjmp	.-20     	; 0xe90 <__ultoa_invert+0x58>
 ea4:	46 2f       	mov	r20, r22
 ea6:	4f 70       	andi	r20, 0x0F	; 15
 ea8:	40 5d       	subi	r20, 0xD0	; 208
 eaa:	4a 33       	cpi	r20, 0x3A	; 58
 eac:	18 f0       	brcs	.+6      	; 0xeb4 <__ultoa_invert+0x7c>
 eae:	49 5d       	subi	r20, 0xD9	; 217
 eb0:	31 fd       	sbrc	r19, 1
 eb2:	40 52       	subi	r20, 0x20	; 32
 eb4:	41 93       	st	Z+, r20
 eb6:	02 d0       	rcall	.+4      	; 0xebc <__ultoa_invert+0x84>
 eb8:	a9 f7       	brne	.-22     	; 0xea4 <__ultoa_invert+0x6c>
 eba:	ea cf       	rjmp	.-44     	; 0xe90 <__ultoa_invert+0x58>
 ebc:	b4 e0       	ldi	r27, 0x04	; 4
 ebe:	a6 95       	lsr	r26
 ec0:	97 95       	ror	r25
 ec2:	87 95       	ror	r24
 ec4:	77 95       	ror	r23
 ec6:	67 95       	ror	r22
 ec8:	ba 95       	dec	r27
 eca:	c9 f7       	brne	.-14     	; 0xebe <__ultoa_invert+0x86>
 ecc:	00 97       	sbiw	r24, 0x00	; 0
 ece:	61 05       	cpc	r22, r1
 ed0:	71 05       	cpc	r23, r1
 ed2:	08 95       	ret
 ed4:	9b 01       	movw	r18, r22
 ed6:	ac 01       	movw	r20, r24
 ed8:	0a 2e       	mov	r0, r26
 eda:	06 94       	lsr	r0
 edc:	57 95       	ror	r21
 ede:	47 95       	ror	r20
 ee0:	37 95       	ror	r19
 ee2:	27 95       	ror	r18
 ee4:	ba 95       	dec	r27
 ee6:	c9 f7       	brne	.-14     	; 0xeda <__ultoa_invert+0xa2>
 ee8:	62 0f       	add	r22, r18
 eea:	73 1f       	adc	r23, r19
 eec:	84 1f       	adc	r24, r20
 eee:	95 1f       	adc	r25, r21
 ef0:	a0 1d       	adc	r26, r0
 ef2:	08 95       	ret

00000ef4 <__prologue_saves__>:
 ef4:	2f 92       	push	r2
 ef6:	3f 92       	push	r3
 ef8:	4f 92       	push	r4
 efa:	5f 92       	push	r5
 efc:	6f 92       	push	r6
 efe:	7f 92       	push	r7
 f00:	8f 92       	push	r8
 f02:	9f 92       	push	r9
 f04:	af 92       	push	r10
 f06:	bf 92       	push	r11
 f08:	cf 92       	push	r12
 f0a:	df 92       	push	r13
 f0c:	ef 92       	push	r14
 f0e:	ff 92       	push	r15
 f10:	0f 93       	push	r16
 f12:	1f 93       	push	r17
 f14:	cf 93       	push	r28
 f16:	df 93       	push	r29
 f18:	cd b7       	in	r28, 0x3d	; 61
 f1a:	de b7       	in	r29, 0x3e	; 62
 f1c:	ca 1b       	sub	r28, r26
 f1e:	db 0b       	sbc	r29, r27
 f20:	0f b6       	in	r0, 0x3f	; 63
 f22:	f8 94       	cli
 f24:	de bf       	out	0x3e, r29	; 62
 f26:	0f be       	out	0x3f, r0	; 63
 f28:	cd bf       	out	0x3d, r28	; 61
 f2a:	09 94       	ijmp

00000f2c <__epilogue_restores__>:
 f2c:	2a 88       	ldd	r2, Y+18	; 0x12
 f2e:	39 88       	ldd	r3, Y+17	; 0x11
 f30:	48 88       	ldd	r4, Y+16	; 0x10
 f32:	5f 84       	ldd	r5, Y+15	; 0x0f
 f34:	6e 84       	ldd	r6, Y+14	; 0x0e
 f36:	7d 84       	ldd	r7, Y+13	; 0x0d
 f38:	8c 84       	ldd	r8, Y+12	; 0x0c
 f3a:	9b 84       	ldd	r9, Y+11	; 0x0b
 f3c:	aa 84       	ldd	r10, Y+10	; 0x0a
 f3e:	b9 84       	ldd	r11, Y+9	; 0x09
 f40:	c8 84       	ldd	r12, Y+8	; 0x08
 f42:	df 80       	ldd	r13, Y+7	; 0x07
 f44:	ee 80       	ldd	r14, Y+6	; 0x06
 f46:	fd 80       	ldd	r15, Y+5	; 0x05
 f48:	0c 81       	ldd	r16, Y+4	; 0x04
 f4a:	1b 81       	ldd	r17, Y+3	; 0x03
 f4c:	aa 81       	ldd	r26, Y+2	; 0x02
 f4e:	b9 81       	ldd	r27, Y+1	; 0x01
 f50:	ce 0f       	add	r28, r30
 f52:	d1 1d       	adc	r29, r1
 f54:	0f b6       	in	r0, 0x3f	; 63
 f56:	f8 94       	cli
 f58:	de bf       	out	0x3e, r29	; 62
 f5a:	0f be       	out	0x3f, r0	; 63
 f5c:	cd bf       	out	0x3d, r28	; 61
 f5e:	ed 01       	movw	r28, r26
 f60:	08 95       	ret

00000f62 <_exit>:
 f62:	f8 94       	cli

00000f64 <__stop_program>:
 f64:	ff cf       	rjmp	.-2      	; 0xf64 <__stop_program>
