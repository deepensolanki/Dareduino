
Dareduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00001064  000010f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800182  00800182  0000117a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001392  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b84  00000000  00000000  000026e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f1  00000000  00000000  00003266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ae  00000000  00000000  000044e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004c97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e6       	ldi	r30, 0x64	; 100
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 38       	cpi	r26, 0x82	; 130
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e8       	ldi	r26, 0x82	; 130
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 37       	cpi	r26, 0x72	; 114
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
      9e:	0c 94 30 08 	jmp	0x1060	; 0x1060 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <onTask>:
{

	while (1)
	{
		pinWrite(13,1);
		printf("\nOnTask");
      a6:	c4 e1       	ldi	r28, 0x14	; 20
      a8:	d1 e0       	ldi	r29, 0x01	; 1
void onTask(void)
{

	while (1)
	{
		pinWrite(13,1);
      aa:	61 e0       	ldi	r22, 0x01	; 1
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	8d e0       	ldi	r24, 0x0D	; 13
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 27 01 	call	0x24e	; 0x24e <pinWrite>
		printf("\nOnTask");
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	0e 94 5e 05 	call	0xabc	; 0xabc <printf>
      be:	0f 90       	pop	r0
      c0:	0f 90       	pop	r0
      c2:	f3 cf       	rjmp	.-26     	; 0xaa <onTask+0x4>

000000c4 <rTask>:

void rTask()
{
	while (1)
	{
		printf("\nrTask");
      c4:	cc e1       	ldi	r28, 0x1C	; 28
      c6:	d1 e0       	ldi	r29, 0x01	; 1
      c8:	df 93       	push	r29
      ca:	cf 93       	push	r28
      cc:	0e 94 5e 05 	call	0xabc	; 0xabc <printf>
      d0:	0f 90       	pop	r0
      d2:	0f 90       	pop	r0
      d4:	f9 cf       	rjmp	.-14     	; 0xc8 <rTask+0x4>

000000d6 <offTask>:
	static int i = 0;
	int y;
	while (1)
	{
		y = FIFOput(i);
		printf("\nOfftask %d", y);
      d6:	c3 e2       	ldi	r28, 0x23	; 35
      d8:	d1 e0       	ldi	r29, 0x01	; 1
{
	static int i = 0;
	int y;
	while (1)
	{
		y = FIFOput(i);
      da:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
      de:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
      e2:	0e 94 05 03 	call	0x60a	; 0x60a <FIFOput>
		printf("\nOfftask %d", y);
      e6:	9f 93       	push	r25
      e8:	8f 93       	push	r24
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0e 94 5e 05 	call	0xabc	; 0xabc <printf>
		i += 1;
      f2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
      f6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
      fa:	01 96       	adiw	r24, 0x01	; 1
      fc:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
     100:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
		pinWrite(13,0);
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	8d e0       	ldi	r24, 0x0D	; 13
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 27 01 	call	0x24e	; 0x24e <pinWrite>
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	e0 cf       	rjmp	.-64     	; 0xda <offTask+0x4>

0000011a <qTask>:
{
	int x;
	while (1)
	{
		x = FIFOget();
		printf("\nqTask %d", x);
     11a:	cf e2       	ldi	r28, 0x2F	; 47
     11c:	d1 e0       	ldi	r29, 0x01	; 1
void qTask()
{
	int x;
	while (1)
	{
		x = FIFOget();
     11e:	0e 94 2d 03 	call	0x65a	; 0x65a <FIFOget>
		printf("\nqTask %d", x);
     122:	9f 93       	push	r25
     124:	8f 93       	push	r24
     126:	df 93       	push	r29
     128:	cf 93       	push	r28
     12a:	0e 94 5e 05 	call	0xabc	; 0xabc <printf>
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	f3 cf       	rjmp	.-26     	; 0x11e <qTask+0x4>

00000138 <main>:
volatile int *semaphore;
volatile int sem;

int main (void)
{
	consoleDisplay();
     138:	0e 94 c4 03 	call	0x788	; 0x788 <consoleDisplay>
	pinConfig(13,OUTPUT);
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	8d e0       	ldi	r24, 0x0D	; 13
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pinConfig>
	
	sem = 1;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <sem+0x1>
     150:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <sem>
	semaphore = &sem;
     154:	84 e8       	ldi	r24, 0x84	; 132
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <semaphore+0x1>
     15c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <semaphore>
	
	OSinit();
     160:	0e 94 ed 02 	call	0x5da	; 0x5da <OSinit>
	
	createTask(&onTask, 20, 150, "onTask");
     164:	29 e3       	ldi	r18, 0x39	; 57
     166:	31 e0       	ldi	r19, 0x01	; 1
     168:	46 e9       	ldi	r20, 0x96	; 150
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	64 e1       	ldi	r22, 0x14	; 20
     16e:	83 e5       	ldi	r24, 0x53	; 83
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 a9 01 	call	0x352	; 0x352 <createTask>
	createTask(&rTask, 1, 150, "rTask");
     176:	2d e1       	ldi	r18, 0x1D	; 29
     178:	31 e0       	ldi	r19, 0x01	; 1
     17a:	46 e9       	ldi	r20, 0x96	; 150
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	82 e6       	ldi	r24, 0x62	; 98
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 a9 01 	call	0x352	; 0x352 <createTask>
	createTask(&qTask, 12, 150, "qTask");
     188:	20 e4       	ldi	r18, 0x40	; 64
     18a:	31 e0       	ldi	r19, 0x01	; 1
     18c:	46 e9       	ldi	r20, 0x96	; 150
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	6c e0       	ldi	r22, 0x0C	; 12
     192:	8d e8       	ldi	r24, 0x8D	; 141
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 a9 01 	call	0x352	; 0x352 <createTask>
	createTask(&offTask, 2, 150, "offTask");
     19a:	26 e4       	ldi	r18, 0x46	; 70
     19c:	31 e0       	ldi	r19, 0x01	; 1
     19e:	46 e9       	ldi	r20, 0x96	; 150
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	62 e0       	ldi	r22, 0x02	; 2
     1a4:	8b e6       	ldi	r24, 0x6B	; 107
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 a9 01 	call	0x352	; 0x352 <createTask>

	OSlaunch(ROUNDROBIN);
     1ac:	80 e5       	ldi	r24, 0x50	; 80
     1ae:	0e 94 84 01 	call	0x308	; 0x308 <OSlaunch>

	return 0;
}
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret

000001b8 <pinConfig>:
#include "gpio.h"

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
     1b8:	88 30       	cpi	r24, 0x08	; 8
     1ba:	91 05       	cpc	r25, r1
     1bc:	00 f5       	brcc	.+64     	; 0x1fe <pinConfig+0x46>
	{
		if(io == OUTPUT)
     1be:	61 30       	cpi	r22, 0x01	; 1
     1c0:	71 05       	cpc	r23, r1
     1c2:	69 f4       	brne	.+26     	; 0x1de <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
     1c4:	4a b1       	in	r20, 0x0a	; 10
     1c6:	21 e0       	ldi	r18, 0x01	; 1
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	b9 01       	movw	r22, r18
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <pinConfig+0x1a>
     1ce:	66 0f       	add	r22, r22
     1d0:	77 1f       	adc	r23, r23
     1d2:	8a 95       	dec	r24
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <pinConfig+0x16>
     1d6:	cb 01       	movw	r24, r22
     1d8:	84 2b       	or	r24, r20
     1da:	8a b9       	out	0x0a, r24	; 10
     1dc:	08 95       	ret
		}
		
		if(io == INPUT)
     1de:	67 2b       	or	r22, r23
     1e0:	a9 f5       	brne	.+106    	; 0x24c <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
     1e2:	4a b1       	in	r20, 0x0a	; 10
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	b9 01       	movw	r22, r18
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <pinConfig+0x38>
     1ec:	66 0f       	add	r22, r22
     1ee:	77 1f       	adc	r23, r23
     1f0:	8a 95       	dec	r24
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <pinConfig+0x34>
     1f4:	cb 01       	movw	r24, r22
     1f6:	80 95       	com	r24
     1f8:	84 23       	and	r24, r20
     1fa:	8a b9       	out	0x0a, r24	; 10
     1fc:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
     1fe:	9c 01       	movw	r18, r24
     200:	28 50       	subi	r18, 0x08	; 8
     202:	31 09       	sbc	r19, r1
     204:	26 30       	cpi	r18, 0x06	; 6
     206:	31 05       	cpc	r19, r1
     208:	08 f5       	brcc	.+66     	; 0x24c <pinConfig+0x94>
	{
		if(io == OUTPUT)
     20a:	61 30       	cpi	r22, 0x01	; 1
     20c:	71 05       	cpc	r23, r1
     20e:	71 f4       	brne	.+28     	; 0x22c <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
     210:	44 b1       	in	r20, 0x04	; 4
     212:	c9 01       	movw	r24, r18
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	b9 01       	movw	r22, r18
     21a:	02 c0       	rjmp	.+4      	; 0x220 <pinConfig+0x68>
     21c:	66 0f       	add	r22, r22
     21e:	77 1f       	adc	r23, r23
     220:	8a 95       	dec	r24
     222:	e2 f7       	brpl	.-8      	; 0x21c <pinConfig+0x64>
     224:	cb 01       	movw	r24, r22
     226:	84 2b       	or	r24, r20
     228:	84 b9       	out	0x04, r24	; 4
     22a:	08 95       	ret
		}
		
		if(io == INPUT)
     22c:	67 2b       	or	r22, r23
     22e:	71 f4       	brne	.+28     	; 0x24c <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
     230:	44 b1       	in	r20, 0x04	; 4
     232:	08 97       	sbiw	r24, 0x08	; 8
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	b9 01       	movw	r22, r18
     23a:	02 c0       	rjmp	.+4      	; 0x240 <pinConfig+0x88>
     23c:	66 0f       	add	r22, r22
     23e:	77 1f       	adc	r23, r23
     240:	8a 95       	dec	r24
     242:	e2 f7       	brpl	.-8      	; 0x23c <pinConfig+0x84>
     244:	cb 01       	movw	r24, r22
     246:	80 95       	com	r24
     248:	84 23       	and	r24, r20
     24a:	84 b9       	out	0x04, r24	; 4
     24c:	08 95       	ret

0000024e <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
     24e:	88 30       	cpi	r24, 0x08	; 8
     250:	91 05       	cpc	r25, r1
     252:	20 f5       	brcc	.+72     	; 0x29c <pinWrite+0x4e>
	{
		if (val > 0)
     254:	16 16       	cp	r1, r22
     256:	17 06       	cpc	r1, r23
     258:	5c f4       	brge	.+22     	; 0x270 <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
     25a:	4b b1       	in	r20, 0x0b	; 11
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	08 2e       	mov	r0, r24
     262:	02 c0       	rjmp	.+4      	; 0x268 <pinWrite+0x1a>
     264:	22 0f       	add	r18, r18
     266:	33 1f       	adc	r19, r19
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <pinWrite+0x16>
     26c:	24 2b       	or	r18, r20
     26e:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
     270:	61 15       	cp	r22, r1
     272:	71 05       	cpc	r23, r1
     274:	99 f4       	brne	.+38     	; 0x29c <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
     276:	4b b1       	in	r20, 0x0b	; 11
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	08 2e       	mov	r0, r24
     27e:	02 c0       	rjmp	.+4      	; 0x284 <pinWrite+0x36>
     280:	22 0f       	add	r18, r18
     282:	33 1f       	adc	r19, r19
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <pinWrite+0x32>
     288:	20 95       	com	r18
     28a:	24 23       	and	r18, r20
     28c:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
     28e:	9c 01       	movw	r18, r24
     290:	28 50       	subi	r18, 0x08	; 8
     292:	31 09       	sbc	r19, r1
     294:	26 30       	cpi	r18, 0x06	; 6
     296:	31 05       	cpc	r19, r1
     298:	b8 f0       	brcs	.+46     	; 0x2c8 <pinWrite+0x7a>
     29a:	08 95       	ret
     29c:	9c 01       	movw	r18, r24
     29e:	28 50       	subi	r18, 0x08	; 8
     2a0:	31 09       	sbc	r19, r1
     2a2:	26 30       	cpi	r18, 0x06	; 6
     2a4:	31 05       	cpc	r19, r1
     2a6:	f0 f4       	brcc	.+60     	; 0x2e4 <pinWrite+0x96>
	{
		if (val > 0)
     2a8:	16 16       	cp	r1, r22
     2aa:	17 06       	cpc	r1, r23
     2ac:	5c f4       	brge	.+22     	; 0x2c4 <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
     2ae:	45 b1       	in	r20, 0x05	; 5
     2b0:	f9 01       	movw	r30, r18
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <pinWrite+0x6e>
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	ea 95       	dec	r30
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <pinWrite+0x6a>
     2c0:	24 2b       	or	r18, r20
     2c2:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
     2c4:	67 2b       	or	r22, r23
     2c6:	71 f4       	brne	.+28     	; 0x2e4 <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
     2c8:	45 b1       	in	r20, 0x05	; 5
     2ca:	08 97       	sbiw	r24, 0x08	; 8
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	b9 01       	movw	r22, r18
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <pinWrite+0x8a>
     2d4:	66 0f       	add	r22, r22
     2d6:	77 1f       	adc	r23, r23
     2d8:	8a 95       	dec	r24
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <pinWrite+0x86>
     2dc:	cb 01       	movw	r24, r22
     2de:	80 95       	com	r24
     2e0:	84 23       	and	r24, r20
     2e2:	85 b9       	out	0x05, r24	; 5
     2e4:	08 95       	ret

000002e6 <timerInit>:
	asm volatile("ret");
}

void OSsuspend(void)
{
	TIMER1_COMPA_vect();
     2e6:	e1 e8       	ldi	r30, 0x81	; 129
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8c 60       	ori	r24, 0x0C	; 12
     2ee:	80 83       	st	Z, r24
     2f0:	ef e6       	ldi	r30, 0x6F	; 111
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	80 83       	st	Z, r24
     2fa:	8c e3       	ldi	r24, 0x3C	; 60
     2fc:	90 ef       	ldi	r25, 0xF0	; 240
     2fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     302:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     306:	08 95       	ret

00000308 <OSlaunch>:
     308:	26 e6       	ldi	r18, 0x66	; 102
     30a:	32 e0       	ldi	r19, 0x02	; 2
     30c:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <currSp+0x1>
     310:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <currSp>
     314:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <schedulerType>
     318:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tasksCreated>
     31c:	1f 92       	push	r1
     31e:	8f 93       	push	r24
     320:	8e e4       	ldi	r24, 0x4E	; 78
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	9f 93       	push	r25
     326:	8f 93       	push	r24
     328:	0e 94 5e 05 	call	0xabc	; 0xabc <printf>
     32c:	2f ef       	ldi	r18, 0xFF	; 255
     32e:	87 ea       	ldi	r24, 0xA7	; 167
     330:	91 e6       	ldi	r25, 0x61	; 97
     332:	21 50       	subi	r18, 0x01	; 1
     334:	80 40       	sbci	r24, 0x00	; 0
     336:	90 40       	sbci	r25, 0x00	; 0
     338:	e1 f7       	brne	.-8      	; 0x332 <OSlaunch+0x2a>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <OSlaunch+0x34>
     33c:	00 00       	nop
     33e:	78 94       	sei
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	80 e7       	ldi	r24, 0x70	; 112
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 74 05 	call	0xae8	; 0xae8 <puts>
     350:	fb cf       	rjmp	.-10     	; 0x348 <OSlaunch+0x40>

00000352 <createTask>:
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	6c 01       	movw	r12, r24
     362:	f6 2e       	mov	r15, r22
     364:	ea 01       	movw	r28, r20
     366:	89 01       	movw	r16, r18
     368:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tasksCreated>
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tasksCreated>
     372:	8d e0       	ldi	r24, 0x0D	; 13
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 01 04 	call	0x802	; 0x802 <malloc>
     37a:	fc 01       	movw	r30, r24
     37c:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <newTask+0x1>
     380:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <newTask>
     384:	d1 82       	std	Z+1, r13	; 0x01
     386:	c0 82       	st	Z, r12
     388:	f6 82       	std	Z+6, r15	; 0x06
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	87 83       	std	Z+7, r24	; 0x07
     38e:	14 86       	std	Z+12, r1	; 0x0c
     390:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <stackUsed>
     394:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <stackUsed+0x1>
     398:	8b e9       	ldi	r24, 0x9B	; 155
     39a:	98 e0       	ldi	r25, 0x08	; 8
     39c:	82 1b       	sub	r24, r18
     39e:	93 0b       	sbc	r25, r19
     3a0:	95 83       	std	Z+5, r25	; 0x05
     3a2:	84 83       	std	Z+4, r24	; 0x04
     3a4:	c2 0f       	add	r28, r18
     3a6:	d3 1f       	adc	r29, r19
     3a8:	d0 93 60 02 	sts	0x0260, r29	; 0x800260 <stackUsed+0x1>
     3ac:	c0 93 5f 02 	sts	0x025F, r28	; 0x80025f <stackUsed>
     3b0:	13 87       	std	Z+11, r17	; 0x0b
     3b2:	02 87       	std	Z+10, r16	; 0x0a
     3b4:	13 82       	std	Z+3, r1	; 0x03
     3b6:	12 82       	std	Z+2, r1	; 0x02
     3b8:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <head>
     3bc:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <head+0x1>
     3c0:	18 96       	adiw	r26, 0x08	; 8
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	19 97       	sbiw	r26, 0x09	; 9
     3c8:	91 87       	std	Z+9, r25	; 0x09
     3ca:	80 87       	std	Z+8, r24	; 0x08
     3cc:	19 96       	adiw	r26, 0x09	; 9
     3ce:	fc 93       	st	X, r31
     3d0:	ee 93       	st	-X, r30
     3d2:	18 97       	sbiw	r26, 0x08	; 8
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <taskScheduler>:
     3e4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <runPt>
     3e8:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <runPt+0x1>
     3ec:	84 85       	ldd	r24, Z+12	; 0x0c
     3ee:	83 30       	cpi	r24, 0x03	; 3
     3f0:	79 f4       	brne	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f2:	80 85       	ldd	r24, Z+8	; 0x08
     3f4:	91 85       	ldd	r25, Z+9	; 0x09
     3f6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <runPt+0x1>
     3fa:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <runPt>
     3fe:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <runPt>
     402:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <runPt+0x1>
     406:	82 81       	ldd	r24, Z+2	; 0x02
     408:	93 81       	ldd	r25, Z+3	; 0x03
     40a:	89 2b       	or	r24, r25
     40c:	a9 f4       	brne	.+42     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     410:	80 85       	ldd	r24, Z+8	; 0x08
     412:	91 85       	ldd	r25, Z+9	; 0x09
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	59 f4       	brne	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     418:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <head>
     41c:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <head+0x1>
     420:	80 85       	ldd	r24, Z+8	; 0x08
     422:	91 85       	ldd	r25, Z+9	; 0x09
     424:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <runPt+0x1>
     428:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <runPt>
     42c:	e8 cf       	rjmp	.-48     	; 0x3fe <taskScheduler+0x1a>
     42e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <runPt+0x1>
     432:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <runPt>
     436:	e3 cf       	rjmp	.-58     	; 0x3fe <taskScheduler+0x1a>
     438:	00 84       	ldd	r0, Z+8	; 0x08
     43a:	f1 85       	ldd	r31, Z+9	; 0x09
     43c:	e0 2d       	mov	r30, r0
     43e:	82 81       	ldd	r24, Z+2	; 0x02
     440:	93 81       	ldd	r25, Z+3	; 0x03
     442:	89 2b       	or	r24, r25
     444:	c9 f7       	brne	.-14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     446:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <runPt+0x1>
     44a:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <runPt>
     44e:	08 95       	ret

00000450 <__vector_11>:
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	0f 92       	push	r0
     458:	1f 92       	push	r1
     45a:	2f 92       	push	r2
     45c:	3f 92       	push	r3
     45e:	4f 92       	push	r4
     460:	5f 92       	push	r5
     462:	6f 92       	push	r6
     464:	7f 92       	push	r7
     466:	8f 92       	push	r8
     468:	9f 92       	push	r9
     46a:	af 92       	push	r10
     46c:	bf 92       	push	r11
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	ef 93       	push	r30
     494:	ff 93       	push	r31
     496:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <currSp>
     49a:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <currSp+0x1>
     49e:	0d b6       	in	r0, 0x3d	; 61
     4a0:	0d 92       	st	X+, r0
     4a2:	0e b6       	in	r0, 0x3e	; 62
     4a4:	0d 92       	st	X+, r0
     4a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <taskScheduler>
     4aa:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <runPt>
     4ae:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <runPt+0x1>
     4b2:	cf 01       	movw	r24, r30
     4b4:	04 96       	adiw	r24, 0x04	; 4
     4b6:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <currSp+0x1>
     4ba:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <currSp>
     4be:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <currSp>
     4c2:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <currSp+0x1>
     4c6:	cd 91       	ld	r28, X+
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	dd 91       	ld	r29, X+
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	87 81       	ldd	r24, Z+7	; 0x07
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	59 f4       	brne	.+22     	; 0x4ea <__vector_11+0x9a>
     4d4:	78 94       	sei
     4d6:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <runPt>
     4da:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <runPt+0x1>
     4de:	17 82       	std	Z+7, r1	; 0x07
     4e0:	01 90       	ld	r0, Z+
     4e2:	f0 81       	ld	r31, Z
     4e4:	e0 2d       	mov	r30, r0
     4e6:	09 95       	icall
     4e8:	2b c0       	rjmp	.+86     	; 0x540 <OSwait>
     4ea:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <currSp>
     4ee:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <currSp+0x1>
     4f2:	cd 91       	ld	r28, X+
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	dd 91       	ld	r29, X+
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	7f 90       	pop	r7
     52c:	6f 90       	pop	r6
     52e:	5f 90       	pop	r5
     530:	4f 90       	pop	r4
     532:	3f 90       	pop	r3
     534:	2f 90       	pop	r2
     536:	1f 90       	pop	r1
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	18 95       	reti

00000540 <OSwait>:
}

void OSwait(volatile int *s)
{
     540:	fc 01       	movw	r30, r24
	cli();
     542:	f8 94       	cli
	(*s)--;
     544:	80 81       	ld	r24, Z
     546:	91 81       	ldd	r25, Z+1	; 0x01
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	91 83       	std	Z+1, r25	; 0x01
     54c:	80 83       	st	Z, r24
	if((*s) < 0)
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	99 23       	and	r25, r25
     554:	5c f4       	brge	.+22     	; 0x56c <OSwait+0x2c>
	{
		runPt->blocked = s;
     556:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <runPt>
     55a:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <runPt+0x1>
     55e:	13 96       	adiw	r26, 0x03	; 3
     560:	fc 93       	st	X, r31
     562:	ee 93       	st	-X, r30
     564:	12 97       	sbiw	r26, 0x02	; 2
		sei();
     566:	78 94       	sei
	asm volatile("ret");
}

void OSsuspend(void)
{
	TIMER1_COMPA_vect();
     568:	0e 94 28 02 	call	0x450	; 0x450 <__vector_11>
	{
		runPt->blocked = s;
		sei();
		OSsuspend();
	}
	sei();
     56c:	78 94       	sei
     56e:	08 95       	ret

00000570 <OSsignal>:
}

void OSsignal(volatile int *s)
{
     570:	dc 01       	movw	r26, r24
	taskTCB *temp;
	cli();
     572:	f8 94       	cli
	(*s)++;
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	11 97       	sbiw	r26, 0x01	; 1
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	9c 93       	st	X, r25
     580:	8e 93       	st	-X, r24
	if((*s) < 0)
     582:	8d 91       	ld	r24, X+
     584:	9c 91       	ld	r25, X
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	99 23       	and	r25, r25
     58a:	b4 f4       	brge	.+44     	; 0x5b8 <OSsignal+0x48>
	{
		temp = head->next;
     58c:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <head>
     590:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <head+0x1>
     594:	00 84       	ldd	r0, Z+8	; 0x08
     596:	f1 85       	ldd	r31, Z+9	; 0x09
     598:	e0 2d       	mov	r30, r0
		while(temp->blocked != s)
     59a:	82 81       	ldd	r24, Z+2	; 0x02
     59c:	93 81       	ldd	r25, Z+3	; 0x03
     59e:	a8 17       	cp	r26, r24
     5a0:	b9 07       	cpc	r27, r25
     5a2:	41 f0       	breq	.+16     	; 0x5b4 <OSsignal+0x44>
		{
			temp = temp->next;
     5a4:	00 84       	ldd	r0, Z+8	; 0x08
     5a6:	f1 85       	ldd	r31, Z+9	; 0x09
     5a8:	e0 2d       	mov	r30, r0
	cli();
	(*s)++;
	if((*s) < 0)
	{
		temp = head->next;
		while(temp->blocked != s)
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	93 81       	ldd	r25, Z+3	; 0x03
     5ae:	a8 17       	cp	r26, r24
     5b0:	b9 07       	cpc	r27, r25
     5b2:	c1 f7       	brne	.-16     	; 0x5a4 <OSsignal+0x34>
		{
			temp = temp->next;
		}
		temp->blocked = NULL;
     5b4:	13 82       	std	Z+3, r1	; 0x03
     5b6:	12 82       	std	Z+2, r1	; 0x02
	}
	sei();
     5b8:	78 94       	sei
     5ba:	08 95       	ret

000005bc <FIFOinit>:
}

void FIFOinit()
{

	currentSize = 0;
     5bc:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <currentSize+0x1>
     5c0:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <currentSize>
	currSize = &currentSize;
     5c4:	80 e9       	ldi	r24, 0x90	; 144
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <currSize+0x1>
     5cc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <currSize>
	putI = 0;
     5d0:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <putI>
	getI = 0;
     5d4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <getI>
     5d8:	08 95       	ret

000005da <OSinit>:
	}
}

void OSinit(void)
{
	cli();
     5da:	f8 94       	cli
	timerInit();
     5dc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timerInit>
	head->next = NULL;
     5e0:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <head>
     5e4:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <head+0x1>
     5e8:	11 86       	std	Z+9, r1	; 0x09
     5ea:	10 86       	std	Z+8, r1	; 0x08
	head->status = HEAD;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	84 87       	std	Z+12, r24	; 0x0c
	runPt = head;
     5f0:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <runPt+0x1>
     5f4:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <runPt>
	stackUsed = 0;
     5f8:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <stackUsed+0x1>
     5fc:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <stackUsed>
	tasksCreated = 0;
     600:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tasksCreated>
	FIFOinit();
     604:	0e 94 de 02 	call	0x5bc	; 0x5bc <FIFOinit>
     608:	08 95       	ret

0000060a <FIFOput>:
	getI = 0;
}


int FIFOput(int data)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
	if((*currSize) >= FIFOSIZE)
     60e:	c0 91 64 02 	lds	r28, 0x0264	; 0x800264 <currSize>
     612:	d0 91 65 02 	lds	r29, 0x0265	; 0x800265 <currSize+0x1>
     616:	28 81       	ld	r18, Y
     618:	39 81       	ldd	r19, Y+1	; 0x01
     61a:	24 36       	cpi	r18, 0x64	; 100
     61c:	31 05       	cpc	r19, r1
     61e:	c4 f4       	brge	.+48     	; 0x650 <FIFOput+0x46>
		return -1;
	else
	{
		FIFO[putI] = data;
     620:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <putI>
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	ed 56       	subi	r30, 0x6D	; 109
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	91 83       	std	Z+1, r25	; 0x01
     632:	80 83       	st	Z, r24
		putI = (putI + 1) % FIFOSIZE;
     634:	c9 01       	movw	r24, r18
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	64 e6       	ldi	r22, 0x64	; 100
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divmodhi4>
     640:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <putI>
		OSsignal(currSize);
     644:	ce 01       	movw	r24, r28
     646:	0e 94 b8 02 	call	0x570	; 0x570 <OSsignal>
		return 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	02 c0       	rjmp	.+4      	; 0x654 <FIFOput+0x4a>


int FIFOput(int data)
{
	if((*currSize) >= FIFOSIZE)
		return -1;
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	9f ef       	ldi	r25, 0xFF	; 255
		FIFO[putI] = data;
		putI = (putI + 1) % FIFOSIZE;
		OSsignal(currSize);
		return 0;
	}
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <FIFOget>:

int FIFOget()
{
	int data;
	OSwait(currSize);
     65a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <currSize>
     65e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <currSize+0x1>
     662:	0e 94 a0 02 	call	0x540	; 0x540 <OSwait>
	data = FIFO[getI];
     666:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <getI>
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	fc 01       	movw	r30, r24
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ed 56       	subi	r30, 0x6D	; 109
     674:	fe 4f       	sbci	r31, 0xFE	; 254
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
	getI = (getI + 1) % FIFOSIZE;
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	64 e6       	ldi	r22, 0x64	; 100
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divmodhi4>
     684:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <getI>
	return data;
}
     688:	c9 01       	movw	r24, r18
     68a:	08 95       	ret

0000068c <uart_putch>:
	while (UCSR0A & (1<<RXC0))
	dummy =  UDR0;
}

int uart_putch ( char ch, FILE *stream )
{
     68c:	cf 93       	push	r28
     68e:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     690:	8a 30       	cpi	r24, 0x0A	; 10
     692:	19 f4       	brne	.+6      	; 0x69a <uart_putch+0xe>
	uart_putch('\r', stream);
     694:	8d e0       	ldi	r24, 0x0D	; 13
     696:	0e 94 46 03 	call	0x68c	; 0x68c <uart_putch>
	while(!(UCSR0A & (1<<UDRE0)));
     69a:	e0 ec       	ldi	r30, 0xC0	; 192
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	85 ff       	sbrs	r24, 5
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <uart_putch+0x12>
	UDR0 = ch;
     6a4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <uart_getch>:

int uart_getch(FILE *stream)
{
	unsigned char ch = '\0';
	while (!(UCSR0A & (1<<RXC0)));
     6b0:	e0 ec       	ldi	r30, 0xC0	; 192
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	88 23       	and	r24, r24
     6b8:	ec f7       	brge	.-6      	; 0x6b4 <uart_getch+0x4>
	ch = UDR0;
     6ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	return ch;
}
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	08 95       	ret

000006c2 <uart_init>:

FILE uart_str = FDEV_SETUP_STREAM (uart_putch, uart_getch, _FDEV_SETUP_RW);

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD)/16)-1)>>8;
     6c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (((F_CPU/BAUD)/16)-1);
     6c6:	87 e6       	ldi	r24, 0x67	; 103
     6c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     6cc:	88 e1       	ldi	r24, 0x18	; 24
     6ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     6d2:	86 e0       	ldi	r24, 0x06	; 6
     6d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     6d8:	08 95       	ret

000006da <ansi_clear_screen>:
}

void ansi_clear_screen ( void )
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
	putchar(27);
     6de:	cc e6       	ldi	r28, 0x6C	; 108
     6e0:	d2 e0       	ldi	r29, 0x02	; 2
     6e2:	6a 81       	ldd	r22, Y+2	; 0x02
     6e4:	7b 81       	ldd	r23, Y+3	; 0x03
     6e6:	8b e1       	ldi	r24, 0x1B	; 27
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('[');
     6ee:	6a 81       	ldd	r22, Y+2	; 0x02
     6f0:	7b 81       	ldd	r23, Y+3	; 0x03
     6f2:	8b e5       	ldi	r24, 0x5B	; 91
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('H');
     6fa:	6a 81       	ldd	r22, Y+2	; 0x02
     6fc:	7b 81       	ldd	r23, Y+3	; 0x03
     6fe:	88 e4       	ldi	r24, 0x48	; 72
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar(27);
     706:	6a 81       	ldd	r22, Y+2	; 0x02
     708:	7b 81       	ldd	r23, Y+3	; 0x03
     70a:	8b e1       	ldi	r24, 0x1B	; 27
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('[');
     712:	6a 81       	ldd	r22, Y+2	; 0x02
     714:	7b 81       	ldd	r23, Y+3	; 0x03
     716:	8b e5       	ldi	r24, 0x5B	; 91
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('J');
     71e:	6a 81       	ldd	r22, Y+2	; 0x02
     720:	7b 81       	ldd	r23, Y+3	; 0x03
     722:	8a e4       	ldi	r24, 0x4A	; 74
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <ansi_me>:

void ansi_me(void)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
	putchar(27);
     734:	cc e6       	ldi	r28, 0x6C	; 108
     736:	d2 e0       	ldi	r29, 0x02	; 2
     738:	6a 81       	ldd	r22, Y+2	; 0x02
     73a:	7b 81       	ldd	r23, Y+3	; 0x03
     73c:	8b e1       	ldi	r24, 0x1B	; 27
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('[');
     744:	6a 81       	ldd	r22, Y+2	; 0x02
     746:	7b 81       	ldd	r23, Y+3	; 0x03
     748:	8b e5       	ldi	r24, 0x5B	; 91
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('0');
     750:	6a 81       	ldd	r22, Y+2	; 0x02
     752:	7b 81       	ldd	r23, Y+3	; 0x03
     754:	80 e3       	ldi	r24, 0x30	; 48
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
	putchar('m');
     75c:	6a 81       	ldd	r22, Y+2	; 0x02
     75e:	7b 81       	ldd	r23, Y+3	; 0x03
     760:	8d e6       	ldi	r24, 0x6D	; 109
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <uart_flush>:

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
     76e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     772:	88 23       	and	r24, r24
     774:	44 f4       	brge	.+16     	; 0x786 <uart_flush+0x18>
	dummy =  UDR0;
     776:	a6 ec       	ldi	r26, 0xC6	; 198
     778:	b0 e0       	ldi	r27, 0x00	; 0
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
     77a:	e0 ec       	ldi	r30, 0xC0	; 192
     77c:	f0 e0       	ldi	r31, 0x00	; 0
	dummy =  UDR0;
     77e:	8c 91       	ld	r24, X
}

void uart_flush ( void )
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0))
     780:	80 81       	ld	r24, Z
     782:	88 23       	and	r24, r24
     784:	e4 f3       	brlt	.-8      	; 0x77e <uart_flush+0x10>
     786:	08 95       	ret

00000788 <consoleDisplay>:
	return ch;
}

void consoleDisplay(void)
{
	stdout = stdin = &uart_str;
     788:	ec e6       	ldi	r30, 0x6C	; 108
     78a:	f2 e0       	ldi	r31, 0x02	; 2
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	91 83       	std	Z+1, r25	; 0x01
     792:	80 83       	st	Z, r24
     794:	93 83       	std	Z+3, r25	; 0x03
     796:	82 83       	std	Z+2, r24	; 0x02
	uart_init();
     798:	0e 94 61 03 	call	0x6c2	; 0x6c2 <uart_init>
	ansi_me();
     79c:	0e 94 98 03 	call	0x730	; 0x730 <ansi_me>
	ansi_clear_screen();
     7a0:	0e 94 6d 03 	call	0x6da	; 0x6da <ansi_clear_screen>
	ansi_me();
     7a4:	0e 94 98 03 	call	0x730	; 0x730 <ansi_me>
	ansi_clear_screen();
     7a8:	0e 94 6d 03 	call	0x6da	; 0x6da <ansi_clear_screen>
	uart_flush();
     7ac:	0e 94 b7 03 	call	0x76e	; 0x76e <uart_flush>
     7b0:	08 95       	ret

000007b2 <__divmodhi4>:
     7b2:	97 fb       	bst	r25, 7
     7b4:	07 2e       	mov	r0, r23
     7b6:	16 f4       	brtc	.+4      	; 0x7bc <__divmodhi4+0xa>
     7b8:	00 94       	com	r0
     7ba:	07 d0       	rcall	.+14     	; 0x7ca <__divmodhi4_neg1>
     7bc:	77 fd       	sbrc	r23, 7
     7be:	09 d0       	rcall	.+18     	; 0x7d2 <__divmodhi4_neg2>
     7c0:	0e 94 ed 03 	call	0x7da	; 0x7da <__udivmodhi4>
     7c4:	07 fc       	sbrc	r0, 7
     7c6:	05 d0       	rcall	.+10     	; 0x7d2 <__divmodhi4_neg2>
     7c8:	3e f4       	brtc	.+14     	; 0x7d8 <__divmodhi4_exit>

000007ca <__divmodhi4_neg1>:
     7ca:	90 95       	com	r25
     7cc:	81 95       	neg	r24
     7ce:	9f 4f       	sbci	r25, 0xFF	; 255
     7d0:	08 95       	ret

000007d2 <__divmodhi4_neg2>:
     7d2:	70 95       	com	r23
     7d4:	61 95       	neg	r22
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255

000007d8 <__divmodhi4_exit>:
     7d8:	08 95       	ret

000007da <__udivmodhi4>:
     7da:	aa 1b       	sub	r26, r26
     7dc:	bb 1b       	sub	r27, r27
     7de:	51 e1       	ldi	r21, 0x11	; 17
     7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <__udivmodhi4_ep>

000007e2 <__udivmodhi4_loop>:
     7e2:	aa 1f       	adc	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	a6 17       	cp	r26, r22
     7e8:	b7 07       	cpc	r27, r23
     7ea:	10 f0       	brcs	.+4      	; 0x7f0 <__udivmodhi4_ep>
     7ec:	a6 1b       	sub	r26, r22
     7ee:	b7 0b       	sbc	r27, r23

000007f0 <__udivmodhi4_ep>:
     7f0:	88 1f       	adc	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	5a 95       	dec	r21
     7f6:	a9 f7       	brne	.-22     	; 0x7e2 <__udivmodhi4_loop>
     7f8:	80 95       	com	r24
     7fa:	90 95       	com	r25
     7fc:	bc 01       	movw	r22, r24
     7fe:	cd 01       	movw	r24, r26
     800:	08 95       	ret

00000802 <malloc>:
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	91 05       	cpc	r25, r1
     80e:	10 f4       	brcc	.+4      	; 0x814 <malloc+0x12>
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__flp>
     818:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__flp+0x1>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	30 97       	sbiw	r30, 0x00	; 0
     826:	19 f1       	breq	.+70     	; 0x86e <malloc+0x6c>
     828:	40 81       	ld	r20, Z
     82a:	51 81       	ldd	r21, Z+1	; 0x01
     82c:	02 81       	ldd	r16, Z+2	; 0x02
     82e:	13 81       	ldd	r17, Z+3	; 0x03
     830:	48 17       	cp	r20, r24
     832:	59 07       	cpc	r21, r25
     834:	c8 f0       	brcs	.+50     	; 0x868 <malloc+0x66>
     836:	84 17       	cp	r24, r20
     838:	95 07       	cpc	r25, r21
     83a:	69 f4       	brne	.+26     	; 0x856 <malloc+0x54>
     83c:	10 97       	sbiw	r26, 0x00	; 0
     83e:	31 f0       	breq	.+12     	; 0x84c <malloc+0x4a>
     840:	12 96       	adiw	r26, 0x02	; 2
     842:	0c 93       	st	X, r16
     844:	12 97       	sbiw	r26, 0x02	; 2
     846:	13 96       	adiw	r26, 0x03	; 3
     848:	1c 93       	st	X, r17
     84a:	27 c0       	rjmp	.+78     	; 0x89a <malloc+0x98>
     84c:	00 93 6a 02 	sts	0x026A, r16	; 0x80026a <__flp>
     850:	10 93 6b 02 	sts	0x026B, r17	; 0x80026b <__flp+0x1>
     854:	22 c0       	rjmp	.+68     	; 0x89a <malloc+0x98>
     856:	21 15       	cp	r18, r1
     858:	31 05       	cpc	r19, r1
     85a:	19 f0       	breq	.+6      	; 0x862 <malloc+0x60>
     85c:	42 17       	cp	r20, r18
     85e:	53 07       	cpc	r21, r19
     860:	18 f4       	brcc	.+6      	; 0x868 <malloc+0x66>
     862:	9a 01       	movw	r18, r20
     864:	bd 01       	movw	r22, r26
     866:	ef 01       	movw	r28, r30
     868:	df 01       	movw	r26, r30
     86a:	f8 01       	movw	r30, r16
     86c:	db cf       	rjmp	.-74     	; 0x824 <malloc+0x22>
     86e:	21 15       	cp	r18, r1
     870:	31 05       	cpc	r19, r1
     872:	f9 f0       	breq	.+62     	; 0x8b2 <malloc+0xb0>
     874:	28 1b       	sub	r18, r24
     876:	39 0b       	sbc	r19, r25
     878:	24 30       	cpi	r18, 0x04	; 4
     87a:	31 05       	cpc	r19, r1
     87c:	80 f4       	brcc	.+32     	; 0x89e <malloc+0x9c>
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	9b 81       	ldd	r25, Y+3	; 0x03
     882:	61 15       	cp	r22, r1
     884:	71 05       	cpc	r23, r1
     886:	21 f0       	breq	.+8      	; 0x890 <malloc+0x8e>
     888:	fb 01       	movw	r30, r22
     88a:	93 83       	std	Z+3, r25	; 0x03
     88c:	82 83       	std	Z+2, r24	; 0x02
     88e:	04 c0       	rjmp	.+8      	; 0x898 <malloc+0x96>
     890:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <__flp+0x1>
     894:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <__flp>
     898:	fe 01       	movw	r30, r28
     89a:	32 96       	adiw	r30, 0x02	; 2
     89c:	44 c0       	rjmp	.+136    	; 0x926 <__stack+0x27>
     89e:	fe 01       	movw	r30, r28
     8a0:	e2 0f       	add	r30, r18
     8a2:	f3 1f       	adc	r31, r19
     8a4:	81 93       	st	Z+, r24
     8a6:	91 93       	st	Z+, r25
     8a8:	22 50       	subi	r18, 0x02	; 2
     8aa:	31 09       	sbc	r19, r1
     8ac:	39 83       	std	Y+1, r19	; 0x01
     8ae:	28 83       	st	Y, r18
     8b0:	3a c0       	rjmp	.+116    	; 0x926 <__stack+0x27>
     8b2:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <__brkval>
     8b6:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <__brkval+0x1>
     8ba:	23 2b       	or	r18, r19
     8bc:	41 f4       	brne	.+16     	; 0x8ce <malloc+0xcc>
     8be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     8c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     8c6:	30 93 69 02 	sts	0x0269, r19	; 0x800269 <__brkval+0x1>
     8ca:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <__brkval>
     8ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     8d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     8d6:	21 15       	cp	r18, r1
     8d8:	31 05       	cpc	r19, r1
     8da:	41 f4       	brne	.+16     	; 0x8ec <malloc+0xea>
     8dc:	2d b7       	in	r18, 0x3d	; 61
     8de:	3e b7       	in	r19, 0x3e	; 62
     8e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     8e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     8e8:	24 1b       	sub	r18, r20
     8ea:	35 0b       	sbc	r19, r21
     8ec:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <__brkval>
     8f0:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <__brkval+0x1>
     8f4:	e2 17       	cp	r30, r18
     8f6:	f3 07       	cpc	r31, r19
     8f8:	a0 f4       	brcc	.+40     	; 0x922 <__stack+0x23>
     8fa:	2e 1b       	sub	r18, r30
     8fc:	3f 0b       	sbc	r19, r31
     8fe:	28 17       	cp	r18, r24
     900:	39 07       	cpc	r19, r25
     902:	78 f0       	brcs	.+30     	; 0x922 <__stack+0x23>
     904:	ac 01       	movw	r20, r24
     906:	4e 5f       	subi	r20, 0xFE	; 254
     908:	5f 4f       	sbci	r21, 0xFF	; 255
     90a:	24 17       	cp	r18, r20
     90c:	35 07       	cpc	r19, r21
     90e:	48 f0       	brcs	.+18     	; 0x922 <__stack+0x23>
     910:	4e 0f       	add	r20, r30
     912:	5f 1f       	adc	r21, r31
     914:	50 93 69 02 	sts	0x0269, r21	; 0x800269 <__brkval+0x1>
     918:	40 93 68 02 	sts	0x0268, r20	; 0x800268 <__brkval>
     91c:	81 93       	st	Z+, r24
     91e:	91 93       	st	Z+, r25
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
     922:	e0 e0       	ldi	r30, 0x00	; 0
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	cf 01       	movw	r24, r30
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <free>:
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	09 f4       	brne	.+2      	; 0x93c <free+0xa>
     93a:	81 c0       	rjmp	.+258    	; 0xa3e <free+0x10c>
     93c:	fc 01       	movw	r30, r24
     93e:	32 97       	sbiw	r30, 0x02	; 2
     940:	13 82       	std	Z+3, r1	; 0x03
     942:	12 82       	std	Z+2, r1	; 0x02
     944:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <__flp>
     948:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <__flp+0x1>
     94c:	10 97       	sbiw	r26, 0x00	; 0
     94e:	81 f4       	brne	.+32     	; 0x970 <free+0x3e>
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <__brkval>
     95c:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <__brkval+0x1>
     960:	28 17       	cp	r18, r24
     962:	39 07       	cpc	r19, r25
     964:	51 f5       	brne	.+84     	; 0x9ba <free+0x88>
     966:	f0 93 69 02 	sts	0x0269, r31	; 0x800269 <__brkval+0x1>
     96a:	e0 93 68 02 	sts	0x0268, r30	; 0x800268 <__brkval>
     96e:	67 c0       	rjmp	.+206    	; 0xa3e <free+0x10c>
     970:	ed 01       	movw	r28, r26
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	ce 17       	cp	r28, r30
     978:	df 07       	cpc	r29, r31
     97a:	40 f4       	brcc	.+16     	; 0x98c <free+0x5a>
     97c:	4a 81       	ldd	r20, Y+2	; 0x02
     97e:	5b 81       	ldd	r21, Y+3	; 0x03
     980:	9e 01       	movw	r18, r28
     982:	41 15       	cp	r20, r1
     984:	51 05       	cpc	r21, r1
     986:	f1 f0       	breq	.+60     	; 0x9c4 <free+0x92>
     988:	ea 01       	movw	r28, r20
     98a:	f5 cf       	rjmp	.-22     	; 0x976 <free+0x44>
     98c:	d3 83       	std	Z+3, r29	; 0x03
     98e:	c2 83       	std	Z+2, r28	; 0x02
     990:	40 81       	ld	r20, Z
     992:	51 81       	ldd	r21, Z+1	; 0x01
     994:	84 0f       	add	r24, r20
     996:	95 1f       	adc	r25, r21
     998:	c8 17       	cp	r28, r24
     99a:	d9 07       	cpc	r29, r25
     99c:	59 f4       	brne	.+22     	; 0x9b4 <free+0x82>
     99e:	88 81       	ld	r24, Y
     9a0:	99 81       	ldd	r25, Y+1	; 0x01
     9a2:	84 0f       	add	r24, r20
     9a4:	95 1f       	adc	r25, r21
     9a6:	02 96       	adiw	r24, 0x02	; 2
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
     9ac:	8a 81       	ldd	r24, Y+2	; 0x02
     9ae:	9b 81       	ldd	r25, Y+3	; 0x03
     9b0:	93 83       	std	Z+3, r25	; 0x03
     9b2:	82 83       	std	Z+2, r24	; 0x02
     9b4:	21 15       	cp	r18, r1
     9b6:	31 05       	cpc	r19, r1
     9b8:	29 f4       	brne	.+10     	; 0x9c4 <free+0x92>
     9ba:	f0 93 6b 02 	sts	0x026B, r31	; 0x80026b <__flp+0x1>
     9be:	e0 93 6a 02 	sts	0x026A, r30	; 0x80026a <__flp>
     9c2:	3d c0       	rjmp	.+122    	; 0xa3e <free+0x10c>
     9c4:	e9 01       	movw	r28, r18
     9c6:	fb 83       	std	Y+3, r31	; 0x03
     9c8:	ea 83       	std	Y+2, r30	; 0x02
     9ca:	49 91       	ld	r20, Y+
     9cc:	59 91       	ld	r21, Y+
     9ce:	c4 0f       	add	r28, r20
     9d0:	d5 1f       	adc	r29, r21
     9d2:	ec 17       	cp	r30, r28
     9d4:	fd 07       	cpc	r31, r29
     9d6:	61 f4       	brne	.+24     	; 0x9f0 <free+0xbe>
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	84 0f       	add	r24, r20
     9de:	95 1f       	adc	r25, r21
     9e0:	02 96       	adiw	r24, 0x02	; 2
     9e2:	e9 01       	movw	r28, r18
     9e4:	99 83       	std	Y+1, r25	; 0x01
     9e6:	88 83       	st	Y, r24
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	93 81       	ldd	r25, Z+3	; 0x03
     9ec:	9b 83       	std	Y+3, r25	; 0x03
     9ee:	8a 83       	std	Y+2, r24	; 0x02
     9f0:	e0 e0       	ldi	r30, 0x00	; 0
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	8d 91       	ld	r24, X+
     9f8:	9c 91       	ld	r25, X
     9fa:	13 97       	sbiw	r26, 0x03	; 3
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	19 f0       	breq	.+6      	; 0xa06 <free+0xd4>
     a00:	fd 01       	movw	r30, r26
     a02:	dc 01       	movw	r26, r24
     a04:	f7 cf       	rjmp	.-18     	; 0x9f4 <free+0xc2>
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	9d 01       	movw	r18, r26
     a0e:	2e 5f       	subi	r18, 0xFE	; 254
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <__brkval>
     a1a:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <__brkval+0x1>
     a1e:	28 17       	cp	r18, r24
     a20:	39 07       	cpc	r19, r25
     a22:	69 f4       	brne	.+26     	; 0xa3e <free+0x10c>
     a24:	30 97       	sbiw	r30, 0x00	; 0
     a26:	29 f4       	brne	.+10     	; 0xa32 <free+0x100>
     a28:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <__flp+0x1>
     a2c:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__flp>
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <free+0x104>
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	12 82       	std	Z+2, r1	; 0x02
     a36:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <__brkval+0x1>
     a3a:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <__brkval>
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <fputc>:
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	fb 01       	movw	r30, r22
     a4e:	23 81       	ldd	r18, Z+3	; 0x03
     a50:	21 fd       	sbrc	r18, 1
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <fputc+0x16>
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	9f ef       	ldi	r25, 0xFF	; 255
     a58:	2c c0       	rjmp	.+88     	; 0xab2 <fputc+0x6e>
     a5a:	22 ff       	sbrs	r18, 2
     a5c:	16 c0       	rjmp	.+44     	; 0xa8a <fputc+0x46>
     a5e:	46 81       	ldd	r20, Z+6	; 0x06
     a60:	57 81       	ldd	r21, Z+7	; 0x07
     a62:	24 81       	ldd	r18, Z+4	; 0x04
     a64:	35 81       	ldd	r19, Z+5	; 0x05
     a66:	42 17       	cp	r20, r18
     a68:	53 07       	cpc	r21, r19
     a6a:	44 f4       	brge	.+16     	; 0xa7c <fputc+0x38>
     a6c:	a0 81       	ld	r26, Z
     a6e:	b1 81       	ldd	r27, Z+1	; 0x01
     a70:	9d 01       	movw	r18, r26
     a72:	2f 5f       	subi	r18, 0xFF	; 255
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
     a76:	31 83       	std	Z+1, r19	; 0x01
     a78:	20 83       	st	Z, r18
     a7a:	8c 93       	st	X, r24
     a7c:	26 81       	ldd	r18, Z+6	; 0x06
     a7e:	37 81       	ldd	r19, Z+7	; 0x07
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	37 83       	std	Z+7, r19	; 0x07
     a86:	26 83       	std	Z+6, r18	; 0x06
     a88:	14 c0       	rjmp	.+40     	; 0xab2 <fputc+0x6e>
     a8a:	8b 01       	movw	r16, r22
     a8c:	ec 01       	movw	r28, r24
     a8e:	fb 01       	movw	r30, r22
     a90:	00 84       	ldd	r0, Z+8	; 0x08
     a92:	f1 85       	ldd	r31, Z+9	; 0x09
     a94:	e0 2d       	mov	r30, r0
     a96:	09 95       	icall
     a98:	89 2b       	or	r24, r25
     a9a:	e1 f6       	brne	.-72     	; 0xa54 <fputc+0x10>
     a9c:	d8 01       	movw	r26, r16
     a9e:	16 96       	adiw	r26, 0x06	; 6
     aa0:	8d 91       	ld	r24, X+
     aa2:	9c 91       	ld	r25, X
     aa4:	17 97       	sbiw	r26, 0x07	; 7
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	17 96       	adiw	r26, 0x07	; 7
     aaa:	9c 93       	st	X, r25
     aac:	8e 93       	st	-X, r24
     aae:	16 97       	sbiw	r26, 0x06	; 6
     ab0:	ce 01       	movw	r24, r28
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <printf>:
     abc:	a0 e0       	ldi	r26, 0x00	; 0
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e4 e6       	ldi	r30, 0x64	; 100
     ac2:	f5 e0       	ldi	r31, 0x05	; 5
     ac4:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__prologue_saves__+0x20>
     ac8:	ae 01       	movw	r20, r28
     aca:	4b 5f       	subi	r20, 0xFB	; 251
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	fa 01       	movw	r30, r20
     ad0:	61 91       	ld	r22, Z+
     ad2:	71 91       	ld	r23, Z+
     ad4:	af 01       	movw	r20, r30
     ad6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__iob+0x2>
     ada:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__iob+0x3>
     ade:	0e 94 a4 05 	call	0xb48	; 0xb48 <vfprintf>
     ae2:	e2 e0       	ldi	r30, 0x02	; 2
     ae4:	0c 94 25 08 	jmp	0x104a	; 0x104a <__epilogue_restores__+0x20>

00000ae8 <puts>:
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <__iob+0x2>
     af4:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <__iob+0x3>
     af8:	23 81       	ldd	r18, Z+3	; 0x03
     afa:	21 ff       	sbrs	r18, 1
     afc:	1b c0       	rjmp	.+54     	; 0xb34 <puts+0x4c>
     afe:	8c 01       	movw	r16, r24
     b00:	d0 e0       	ldi	r29, 0x00	; 0
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	f8 01       	movw	r30, r16
     b06:	81 91       	ld	r24, Z+
     b08:	8f 01       	movw	r16, r30
     b0a:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <__iob+0x2>
     b0e:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <__iob+0x3>
     b12:	db 01       	movw	r26, r22
     b14:	18 96       	adiw	r26, 0x08	; 8
     b16:	ed 91       	ld	r30, X+
     b18:	fc 91       	ld	r31, X
     b1a:	19 97       	sbiw	r26, 0x09	; 9
     b1c:	88 23       	and	r24, r24
     b1e:	31 f0       	breq	.+12     	; 0xb2c <puts+0x44>
     b20:	09 95       	icall
     b22:	89 2b       	or	r24, r25
     b24:	79 f3       	breq	.-34     	; 0xb04 <puts+0x1c>
     b26:	df ef       	ldi	r29, 0xFF	; 255
     b28:	cf ef       	ldi	r28, 0xFF	; 255
     b2a:	ec cf       	rjmp	.-40     	; 0xb04 <puts+0x1c>
     b2c:	8a e0       	ldi	r24, 0x0A	; 10
     b2e:	09 95       	icall
     b30:	89 2b       	or	r24, r25
     b32:	19 f0       	breq	.+6      	; 0xb3a <puts+0x52>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <puts+0x56>
     b3a:	8d 2f       	mov	r24, r29
     b3c:	9c 2f       	mov	r25, r28
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <vfprintf>:
     b48:	ab e0       	ldi	r26, 0x0B	; 11
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	ea ea       	ldi	r30, 0xAA	; 170
     b4e:	f5 e0       	ldi	r31, 0x05	; 5
     b50:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__prologue_saves__>
     b54:	6c 01       	movw	r12, r24
     b56:	7b 01       	movw	r14, r22
     b58:	8a 01       	movw	r16, r20
     b5a:	fc 01       	movw	r30, r24
     b5c:	17 82       	std	Z+7, r1	; 0x07
     b5e:	16 82       	std	Z+6, r1	; 0x06
     b60:	83 81       	ldd	r24, Z+3	; 0x03
     b62:	81 ff       	sbrs	r24, 1
     b64:	cc c1       	rjmp	.+920    	; 0xefe <vfprintf+0x3b6>
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	3c 01       	movw	r6, r24
     b6c:	f6 01       	movw	r30, r12
     b6e:	93 81       	ldd	r25, Z+3	; 0x03
     b70:	f7 01       	movw	r30, r14
     b72:	93 fd       	sbrc	r25, 3
     b74:	85 91       	lpm	r24, Z+
     b76:	93 ff       	sbrs	r25, 3
     b78:	81 91       	ld	r24, Z+
     b7a:	7f 01       	movw	r14, r30
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <vfprintf+0x3a>
     b80:	ba c1       	rjmp	.+884    	; 0xef6 <vfprintf+0x3ae>
     b82:	85 32       	cpi	r24, 0x25	; 37
     b84:	39 f4       	brne	.+14     	; 0xb94 <vfprintf+0x4c>
     b86:	93 fd       	sbrc	r25, 3
     b88:	85 91       	lpm	r24, Z+
     b8a:	93 ff       	sbrs	r25, 3
     b8c:	81 91       	ld	r24, Z+
     b8e:	7f 01       	movw	r14, r30
     b90:	85 32       	cpi	r24, 0x25	; 37
     b92:	29 f4       	brne	.+10     	; 0xb9e <vfprintf+0x56>
     b94:	b6 01       	movw	r22, r12
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     b9c:	e7 cf       	rjmp	.-50     	; 0xb6c <vfprintf+0x24>
     b9e:	91 2c       	mov	r9, r1
     ba0:	21 2c       	mov	r2, r1
     ba2:	31 2c       	mov	r3, r1
     ba4:	ff e1       	ldi	r31, 0x1F	; 31
     ba6:	f3 15       	cp	r31, r3
     ba8:	d8 f0       	brcs	.+54     	; 0xbe0 <vfprintf+0x98>
     baa:	8b 32       	cpi	r24, 0x2B	; 43
     bac:	79 f0       	breq	.+30     	; 0xbcc <vfprintf+0x84>
     bae:	38 f4       	brcc	.+14     	; 0xbbe <vfprintf+0x76>
     bb0:	80 32       	cpi	r24, 0x20	; 32
     bb2:	79 f0       	breq	.+30     	; 0xbd2 <vfprintf+0x8a>
     bb4:	83 32       	cpi	r24, 0x23	; 35
     bb6:	a1 f4       	brne	.+40     	; 0xbe0 <vfprintf+0x98>
     bb8:	23 2d       	mov	r18, r3
     bba:	20 61       	ori	r18, 0x10	; 16
     bbc:	1d c0       	rjmp	.+58     	; 0xbf8 <vfprintf+0xb0>
     bbe:	8d 32       	cpi	r24, 0x2D	; 45
     bc0:	61 f0       	breq	.+24     	; 0xbda <vfprintf+0x92>
     bc2:	80 33       	cpi	r24, 0x30	; 48
     bc4:	69 f4       	brne	.+26     	; 0xbe0 <vfprintf+0x98>
     bc6:	23 2d       	mov	r18, r3
     bc8:	21 60       	ori	r18, 0x01	; 1
     bca:	16 c0       	rjmp	.+44     	; 0xbf8 <vfprintf+0xb0>
     bcc:	83 2d       	mov	r24, r3
     bce:	82 60       	ori	r24, 0x02	; 2
     bd0:	38 2e       	mov	r3, r24
     bd2:	e3 2d       	mov	r30, r3
     bd4:	e4 60       	ori	r30, 0x04	; 4
     bd6:	3e 2e       	mov	r3, r30
     bd8:	2a c0       	rjmp	.+84     	; 0xc2e <vfprintf+0xe6>
     bda:	f3 2d       	mov	r31, r3
     bdc:	f8 60       	ori	r31, 0x08	; 8
     bde:	1d c0       	rjmp	.+58     	; 0xc1a <vfprintf+0xd2>
     be0:	37 fc       	sbrc	r3, 7
     be2:	2d c0       	rjmp	.+90     	; 0xc3e <vfprintf+0xf6>
     be4:	20 ed       	ldi	r18, 0xD0	; 208
     be6:	28 0f       	add	r18, r24
     be8:	2a 30       	cpi	r18, 0x0A	; 10
     bea:	40 f0       	brcs	.+16     	; 0xbfc <vfprintf+0xb4>
     bec:	8e 32       	cpi	r24, 0x2E	; 46
     bee:	b9 f4       	brne	.+46     	; 0xc1e <vfprintf+0xd6>
     bf0:	36 fc       	sbrc	r3, 6
     bf2:	81 c1       	rjmp	.+770    	; 0xef6 <vfprintf+0x3ae>
     bf4:	23 2d       	mov	r18, r3
     bf6:	20 64       	ori	r18, 0x40	; 64
     bf8:	32 2e       	mov	r3, r18
     bfa:	19 c0       	rjmp	.+50     	; 0xc2e <vfprintf+0xe6>
     bfc:	36 fe       	sbrs	r3, 6
     bfe:	06 c0       	rjmp	.+12     	; 0xc0c <vfprintf+0xc4>
     c00:	8a e0       	ldi	r24, 0x0A	; 10
     c02:	98 9e       	mul	r9, r24
     c04:	20 0d       	add	r18, r0
     c06:	11 24       	eor	r1, r1
     c08:	92 2e       	mov	r9, r18
     c0a:	11 c0       	rjmp	.+34     	; 0xc2e <vfprintf+0xe6>
     c0c:	ea e0       	ldi	r30, 0x0A	; 10
     c0e:	2e 9e       	mul	r2, r30
     c10:	20 0d       	add	r18, r0
     c12:	11 24       	eor	r1, r1
     c14:	22 2e       	mov	r2, r18
     c16:	f3 2d       	mov	r31, r3
     c18:	f0 62       	ori	r31, 0x20	; 32
     c1a:	3f 2e       	mov	r3, r31
     c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0xe6>
     c1e:	8c 36       	cpi	r24, 0x6C	; 108
     c20:	21 f4       	brne	.+8      	; 0xc2a <vfprintf+0xe2>
     c22:	83 2d       	mov	r24, r3
     c24:	80 68       	ori	r24, 0x80	; 128
     c26:	38 2e       	mov	r3, r24
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <vfprintf+0xe6>
     c2a:	88 36       	cpi	r24, 0x68	; 104
     c2c:	41 f4       	brne	.+16     	; 0xc3e <vfprintf+0xf6>
     c2e:	f7 01       	movw	r30, r14
     c30:	93 fd       	sbrc	r25, 3
     c32:	85 91       	lpm	r24, Z+
     c34:	93 ff       	sbrs	r25, 3
     c36:	81 91       	ld	r24, Z+
     c38:	7f 01       	movw	r14, r30
     c3a:	81 11       	cpse	r24, r1
     c3c:	b3 cf       	rjmp	.-154    	; 0xba4 <vfprintf+0x5c>
     c3e:	98 2f       	mov	r25, r24
     c40:	9f 7d       	andi	r25, 0xDF	; 223
     c42:	95 54       	subi	r25, 0x45	; 69
     c44:	93 30       	cpi	r25, 0x03	; 3
     c46:	28 f4       	brcc	.+10     	; 0xc52 <vfprintf+0x10a>
     c48:	0c 5f       	subi	r16, 0xFC	; 252
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	9f e3       	ldi	r25, 0x3F	; 63
     c4e:	99 83       	std	Y+1, r25	; 0x01
     c50:	0d c0       	rjmp	.+26     	; 0xc6c <vfprintf+0x124>
     c52:	83 36       	cpi	r24, 0x63	; 99
     c54:	31 f0       	breq	.+12     	; 0xc62 <vfprintf+0x11a>
     c56:	83 37       	cpi	r24, 0x73	; 115
     c58:	71 f0       	breq	.+28     	; 0xc76 <vfprintf+0x12e>
     c5a:	83 35       	cpi	r24, 0x53	; 83
     c5c:	09 f0       	breq	.+2      	; 0xc60 <vfprintf+0x118>
     c5e:	59 c0       	rjmp	.+178    	; 0xd12 <vfprintf+0x1ca>
     c60:	21 c0       	rjmp	.+66     	; 0xca4 <vfprintf+0x15c>
     c62:	f8 01       	movw	r30, r16
     c64:	80 81       	ld	r24, Z
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	0e 5f       	subi	r16, 0xFE	; 254
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	88 24       	eor	r8, r8
     c6e:	83 94       	inc	r8
     c70:	91 2c       	mov	r9, r1
     c72:	53 01       	movw	r10, r6
     c74:	13 c0       	rjmp	.+38     	; 0xc9c <vfprintf+0x154>
     c76:	28 01       	movw	r4, r16
     c78:	f2 e0       	ldi	r31, 0x02	; 2
     c7a:	4f 0e       	add	r4, r31
     c7c:	51 1c       	adc	r5, r1
     c7e:	f8 01       	movw	r30, r16
     c80:	a0 80       	ld	r10, Z
     c82:	b1 80       	ldd	r11, Z+1	; 0x01
     c84:	36 fe       	sbrs	r3, 6
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <vfprintf+0x146>
     c88:	69 2d       	mov	r22, r9
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0x14a>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	c5 01       	movw	r24, r10
     c94:	0e 94 90 07 	call	0xf20	; 0xf20 <strnlen>
     c98:	4c 01       	movw	r8, r24
     c9a:	82 01       	movw	r16, r4
     c9c:	f3 2d       	mov	r31, r3
     c9e:	ff 77       	andi	r31, 0x7F	; 127
     ca0:	3f 2e       	mov	r3, r31
     ca2:	16 c0       	rjmp	.+44     	; 0xcd0 <vfprintf+0x188>
     ca4:	28 01       	movw	r4, r16
     ca6:	22 e0       	ldi	r18, 0x02	; 2
     ca8:	42 0e       	add	r4, r18
     caa:	51 1c       	adc	r5, r1
     cac:	f8 01       	movw	r30, r16
     cae:	a0 80       	ld	r10, Z
     cb0:	b1 80       	ldd	r11, Z+1	; 0x01
     cb2:	36 fe       	sbrs	r3, 6
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <vfprintf+0x174>
     cb6:	69 2d       	mov	r22, r9
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x178>
     cbc:	6f ef       	ldi	r22, 0xFF	; 255
     cbe:	7f ef       	ldi	r23, 0xFF	; 255
     cc0:	c5 01       	movw	r24, r10
     cc2:	0e 94 85 07 	call	0xf0a	; 0xf0a <strnlen_P>
     cc6:	4c 01       	movw	r8, r24
     cc8:	f3 2d       	mov	r31, r3
     cca:	f0 68       	ori	r31, 0x80	; 128
     ccc:	3f 2e       	mov	r3, r31
     cce:	82 01       	movw	r16, r4
     cd0:	33 fc       	sbrc	r3, 3
     cd2:	1b c0       	rjmp	.+54     	; 0xd0a <vfprintf+0x1c2>
     cd4:	82 2d       	mov	r24, r2
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	88 16       	cp	r8, r24
     cda:	99 06       	cpc	r9, r25
     cdc:	b0 f4       	brcc	.+44     	; 0xd0a <vfprintf+0x1c2>
     cde:	b6 01       	movw	r22, r12
     ce0:	80 e2       	ldi	r24, 0x20	; 32
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     ce8:	2a 94       	dec	r2
     cea:	f4 cf       	rjmp	.-24     	; 0xcd4 <vfprintf+0x18c>
     cec:	f5 01       	movw	r30, r10
     cee:	37 fc       	sbrc	r3, 7
     cf0:	85 91       	lpm	r24, Z+
     cf2:	37 fe       	sbrs	r3, 7
     cf4:	81 91       	ld	r24, Z+
     cf6:	5f 01       	movw	r10, r30
     cf8:	b6 01       	movw	r22, r12
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     d00:	21 10       	cpse	r2, r1
     d02:	2a 94       	dec	r2
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	82 1a       	sub	r8, r18
     d08:	91 08       	sbc	r9, r1
     d0a:	81 14       	cp	r8, r1
     d0c:	91 04       	cpc	r9, r1
     d0e:	71 f7       	brne	.-36     	; 0xcec <vfprintf+0x1a4>
     d10:	e8 c0       	rjmp	.+464    	; 0xee2 <vfprintf+0x39a>
     d12:	84 36       	cpi	r24, 0x64	; 100
     d14:	11 f0       	breq	.+4      	; 0xd1a <vfprintf+0x1d2>
     d16:	89 36       	cpi	r24, 0x69	; 105
     d18:	41 f5       	brne	.+80     	; 0xd6a <vfprintf+0x222>
     d1a:	f8 01       	movw	r30, r16
     d1c:	37 fe       	sbrs	r3, 7
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <vfprintf+0x1e6>
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	0c 5f       	subi	r16, 0xFC	; 252
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <vfprintf+0x1f6>
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	07 2e       	mov	r0, r23
     d34:	00 0c       	add	r0, r0
     d36:	88 0b       	sbc	r24, r24
     d38:	99 0b       	sbc	r25, r25
     d3a:	0e 5f       	subi	r16, 0xFE	; 254
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	f3 2d       	mov	r31, r3
     d40:	ff 76       	andi	r31, 0x6F	; 111
     d42:	3f 2e       	mov	r3, r31
     d44:	97 ff       	sbrs	r25, 7
     d46:	09 c0       	rjmp	.+18     	; 0xd5a <vfprintf+0x212>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	f0 68       	ori	r31, 0x80	; 128
     d58:	3f 2e       	mov	r3, r31
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	a3 01       	movw	r20, r6
     d60:	0e 94 9b 07 	call	0xf36	; 0xf36 <__ultoa_invert>
     d64:	88 2e       	mov	r8, r24
     d66:	86 18       	sub	r8, r6
     d68:	45 c0       	rjmp	.+138    	; 0xdf4 <vfprintf+0x2ac>
     d6a:	85 37       	cpi	r24, 0x75	; 117
     d6c:	31 f4       	brne	.+12     	; 0xd7a <vfprintf+0x232>
     d6e:	23 2d       	mov	r18, r3
     d70:	2f 7e       	andi	r18, 0xEF	; 239
     d72:	b2 2e       	mov	r11, r18
     d74:	2a e0       	ldi	r18, 0x0A	; 10
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	25 c0       	rjmp	.+74     	; 0xdc4 <vfprintf+0x27c>
     d7a:	93 2d       	mov	r25, r3
     d7c:	99 7f       	andi	r25, 0xF9	; 249
     d7e:	b9 2e       	mov	r11, r25
     d80:	8f 36       	cpi	r24, 0x6F	; 111
     d82:	c1 f0       	breq	.+48     	; 0xdb4 <vfprintf+0x26c>
     d84:	18 f4       	brcc	.+6      	; 0xd8c <vfprintf+0x244>
     d86:	88 35       	cpi	r24, 0x58	; 88
     d88:	79 f0       	breq	.+30     	; 0xda8 <vfprintf+0x260>
     d8a:	b5 c0       	rjmp	.+362    	; 0xef6 <vfprintf+0x3ae>
     d8c:	80 37       	cpi	r24, 0x70	; 112
     d8e:	19 f0       	breq	.+6      	; 0xd96 <vfprintf+0x24e>
     d90:	88 37       	cpi	r24, 0x78	; 120
     d92:	21 f0       	breq	.+8      	; 0xd9c <vfprintf+0x254>
     d94:	b0 c0       	rjmp	.+352    	; 0xef6 <vfprintf+0x3ae>
     d96:	e9 2f       	mov	r30, r25
     d98:	e0 61       	ori	r30, 0x10	; 16
     d9a:	be 2e       	mov	r11, r30
     d9c:	b4 fe       	sbrs	r11, 4
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <vfprintf+0x272>
     da0:	fb 2d       	mov	r31, r11
     da2:	f4 60       	ori	r31, 0x04	; 4
     da4:	bf 2e       	mov	r11, r31
     da6:	09 c0       	rjmp	.+18     	; 0xdba <vfprintf+0x272>
     da8:	34 fe       	sbrs	r3, 4
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <vfprintf+0x278>
     dac:	29 2f       	mov	r18, r25
     dae:	26 60       	ori	r18, 0x06	; 6
     db0:	b2 2e       	mov	r11, r18
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <vfprintf+0x278>
     db4:	28 e0       	ldi	r18, 0x08	; 8
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <vfprintf+0x27c>
     dba:	20 e1       	ldi	r18, 0x10	; 16
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <vfprintf+0x27c>
     dc0:	20 e1       	ldi	r18, 0x10	; 16
     dc2:	32 e0       	ldi	r19, 0x02	; 2
     dc4:	f8 01       	movw	r30, r16
     dc6:	b7 fe       	sbrs	r11, 7
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <vfprintf+0x290>
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	0c 5f       	subi	r16, 0xFC	; 252
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <vfprintf+0x29c>
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 5f       	subi	r16, 0xFE	; 254
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	a3 01       	movw	r20, r6
     de6:	0e 94 9b 07 	call	0xf36	; 0xf36 <__ultoa_invert>
     dea:	88 2e       	mov	r8, r24
     dec:	86 18       	sub	r8, r6
     dee:	fb 2d       	mov	r31, r11
     df0:	ff 77       	andi	r31, 0x7F	; 127
     df2:	3f 2e       	mov	r3, r31
     df4:	36 fe       	sbrs	r3, 6
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <vfprintf+0x2ca>
     df8:	23 2d       	mov	r18, r3
     dfa:	2e 7f       	andi	r18, 0xFE	; 254
     dfc:	a2 2e       	mov	r10, r18
     dfe:	89 14       	cp	r8, r9
     e00:	58 f4       	brcc	.+22     	; 0xe18 <vfprintf+0x2d0>
     e02:	34 fe       	sbrs	r3, 4
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <vfprintf+0x2d4>
     e06:	32 fc       	sbrc	r3, 2
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <vfprintf+0x2d4>
     e0a:	83 2d       	mov	r24, r3
     e0c:	8e 7e       	andi	r24, 0xEE	; 238
     e0e:	a8 2e       	mov	r10, r24
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <vfprintf+0x2d4>
     e12:	b8 2c       	mov	r11, r8
     e14:	a3 2c       	mov	r10, r3
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <vfprintf+0x2d6>
     e18:	b8 2c       	mov	r11, r8
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <vfprintf+0x2d6>
     e1c:	b9 2c       	mov	r11, r9
     e1e:	a4 fe       	sbrs	r10, 4
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <vfprintf+0x2f8>
     e22:	fe 01       	movw	r30, r28
     e24:	e8 0d       	add	r30, r8
     e26:	f1 1d       	adc	r31, r1
     e28:	80 81       	ld	r24, Z
     e2a:	80 33       	cpi	r24, 0x30	; 48
     e2c:	21 f4       	brne	.+8      	; 0xe36 <vfprintf+0x2ee>
     e2e:	9a 2d       	mov	r25, r10
     e30:	99 7e       	andi	r25, 0xE9	; 233
     e32:	a9 2e       	mov	r10, r25
     e34:	09 c0       	rjmp	.+18     	; 0xe48 <vfprintf+0x300>
     e36:	a2 fe       	sbrs	r10, 2
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <vfprintf+0x2fe>
     e3a:	b3 94       	inc	r11
     e3c:	b3 94       	inc	r11
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <vfprintf+0x300>
     e40:	8a 2d       	mov	r24, r10
     e42:	86 78       	andi	r24, 0x86	; 134
     e44:	09 f0       	breq	.+2      	; 0xe48 <vfprintf+0x300>
     e46:	b3 94       	inc	r11
     e48:	a3 fc       	sbrc	r10, 3
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <vfprintf+0x326>
     e4c:	a0 fe       	sbrs	r10, 0
     e4e:	06 c0       	rjmp	.+12     	; 0xe5c <vfprintf+0x314>
     e50:	b2 14       	cp	r11, r2
     e52:	88 f4       	brcc	.+34     	; 0xe76 <vfprintf+0x32e>
     e54:	28 0c       	add	r2, r8
     e56:	92 2c       	mov	r9, r2
     e58:	9b 18       	sub	r9, r11
     e5a:	0e c0       	rjmp	.+28     	; 0xe78 <vfprintf+0x330>
     e5c:	b2 14       	cp	r11, r2
     e5e:	60 f4       	brcc	.+24     	; 0xe78 <vfprintf+0x330>
     e60:	b6 01       	movw	r22, r12
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     e6a:	b3 94       	inc	r11
     e6c:	f7 cf       	rjmp	.-18     	; 0xe5c <vfprintf+0x314>
     e6e:	b2 14       	cp	r11, r2
     e70:	18 f4       	brcc	.+6      	; 0xe78 <vfprintf+0x330>
     e72:	2b 18       	sub	r2, r11
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x332>
     e76:	98 2c       	mov	r9, r8
     e78:	21 2c       	mov	r2, r1
     e7a:	a4 fe       	sbrs	r10, 4
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <vfprintf+0x356>
     e7e:	b6 01       	movw	r22, r12
     e80:	80 e3       	ldi	r24, 0x30	; 48
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     e88:	a2 fe       	sbrs	r10, 2
     e8a:	17 c0       	rjmp	.+46     	; 0xeba <vfprintf+0x372>
     e8c:	a1 fc       	sbrc	r10, 1
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <vfprintf+0x34e>
     e90:	88 e7       	ldi	r24, 0x78	; 120
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x352>
     e96:	88 e5       	ldi	r24, 0x58	; 88
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	b6 01       	movw	r22, r12
     e9c:	0c c0       	rjmp	.+24     	; 0xeb6 <vfprintf+0x36e>
     e9e:	8a 2d       	mov	r24, r10
     ea0:	86 78       	andi	r24, 0x86	; 134
     ea2:	59 f0       	breq	.+22     	; 0xeba <vfprintf+0x372>
     ea4:	a1 fe       	sbrs	r10, 1
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x364>
     ea8:	8b e2       	ldi	r24, 0x2B	; 43
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <vfprintf+0x366>
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	a7 fc       	sbrc	r10, 7
     eb0:	8d e2       	ldi	r24, 0x2D	; 45
     eb2:	b6 01       	movw	r22, r12
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     eba:	89 14       	cp	r8, r9
     ebc:	38 f4       	brcc	.+14     	; 0xecc <vfprintf+0x384>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     ec8:	9a 94       	dec	r9
     eca:	f7 cf       	rjmp	.-18     	; 0xeba <vfprintf+0x372>
     ecc:	8a 94       	dec	r8
     ece:	f3 01       	movw	r30, r6
     ed0:	e8 0d       	add	r30, r8
     ed2:	f1 1d       	adc	r31, r1
     ed4:	80 81       	ld	r24, Z
     ed6:	b6 01       	movw	r22, r12
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     ede:	81 10       	cpse	r8, r1
     ee0:	f5 cf       	rjmp	.-22     	; 0xecc <vfprintf+0x384>
     ee2:	22 20       	and	r2, r2
     ee4:	09 f4       	brne	.+2      	; 0xee8 <vfprintf+0x3a0>
     ee6:	42 ce       	rjmp	.-892    	; 0xb6c <vfprintf+0x24>
     ee8:	b6 01       	movw	r22, r12
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
     ef2:	2a 94       	dec	r2
     ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <vfprintf+0x39a>
     ef6:	f6 01       	movw	r30, r12
     ef8:	86 81       	ldd	r24, Z+6	; 0x06
     efa:	97 81       	ldd	r25, Z+7	; 0x07
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x3ba>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	2b 96       	adiw	r28, 0x0b	; 11
     f04:	e2 e1       	ldi	r30, 0x12	; 18
     f06:	0c 94 15 08 	jmp	0x102a	; 0x102a <__epilogue_restores__>

00000f0a <strnlen_P>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	05 90       	lpm	r0, Z+
     f0e:	61 50       	subi	r22, 0x01	; 1
     f10:	70 40       	sbci	r23, 0x00	; 0
     f12:	01 10       	cpse	r0, r1
     f14:	d8 f7       	brcc	.-10     	; 0xf0c <strnlen_P+0x2>
     f16:	80 95       	com	r24
     f18:	90 95       	com	r25
     f1a:	8e 0f       	add	r24, r30
     f1c:	9f 1f       	adc	r25, r31
     f1e:	08 95       	ret

00000f20 <strnlen>:
     f20:	fc 01       	movw	r30, r24
     f22:	61 50       	subi	r22, 0x01	; 1
     f24:	70 40       	sbci	r23, 0x00	; 0
     f26:	01 90       	ld	r0, Z+
     f28:	01 10       	cpse	r0, r1
     f2a:	d8 f7       	brcc	.-10     	; 0xf22 <strnlen+0x2>
     f2c:	80 95       	com	r24
     f2e:	90 95       	com	r25
     f30:	8e 0f       	add	r24, r30
     f32:	9f 1f       	adc	r25, r31
     f34:	08 95       	ret

00000f36 <__ultoa_invert>:
     f36:	fa 01       	movw	r30, r20
     f38:	aa 27       	eor	r26, r26
     f3a:	28 30       	cpi	r18, 0x08	; 8
     f3c:	51 f1       	breq	.+84     	; 0xf92 <__ultoa_invert+0x5c>
     f3e:	20 31       	cpi	r18, 0x10	; 16
     f40:	81 f1       	breq	.+96     	; 0xfa2 <__ultoa_invert+0x6c>
     f42:	e8 94       	clt
     f44:	6f 93       	push	r22
     f46:	6e 7f       	andi	r22, 0xFE	; 254
     f48:	6e 5f       	subi	r22, 0xFE	; 254
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	af 4f       	sbci	r26, 0xFF	; 255
     f52:	b1 e0       	ldi	r27, 0x01	; 1
     f54:	3e d0       	rcall	.+124    	; 0xfd2 <__ultoa_invert+0x9c>
     f56:	b4 e0       	ldi	r27, 0x04	; 4
     f58:	3c d0       	rcall	.+120    	; 0xfd2 <__ultoa_invert+0x9c>
     f5a:	67 0f       	add	r22, r23
     f5c:	78 1f       	adc	r23, r24
     f5e:	89 1f       	adc	r24, r25
     f60:	9a 1f       	adc	r25, r26
     f62:	a1 1d       	adc	r26, r1
     f64:	68 0f       	add	r22, r24
     f66:	79 1f       	adc	r23, r25
     f68:	8a 1f       	adc	r24, r26
     f6a:	91 1d       	adc	r25, r1
     f6c:	a1 1d       	adc	r26, r1
     f6e:	6a 0f       	add	r22, r26
     f70:	71 1d       	adc	r23, r1
     f72:	81 1d       	adc	r24, r1
     f74:	91 1d       	adc	r25, r1
     f76:	a1 1d       	adc	r26, r1
     f78:	20 d0       	rcall	.+64     	; 0xfba <__ultoa_invert+0x84>
     f7a:	09 f4       	brne	.+2      	; 0xf7e <__ultoa_invert+0x48>
     f7c:	68 94       	set
     f7e:	3f 91       	pop	r19
     f80:	2a e0       	ldi	r18, 0x0A	; 10
     f82:	26 9f       	mul	r18, r22
     f84:	11 24       	eor	r1, r1
     f86:	30 19       	sub	r19, r0
     f88:	30 5d       	subi	r19, 0xD0	; 208
     f8a:	31 93       	st	Z+, r19
     f8c:	de f6       	brtc	.-74     	; 0xf44 <__ultoa_invert+0xe>
     f8e:	cf 01       	movw	r24, r30
     f90:	08 95       	ret
     f92:	46 2f       	mov	r20, r22
     f94:	47 70       	andi	r20, 0x07	; 7
     f96:	40 5d       	subi	r20, 0xD0	; 208
     f98:	41 93       	st	Z+, r20
     f9a:	b3 e0       	ldi	r27, 0x03	; 3
     f9c:	0f d0       	rcall	.+30     	; 0xfbc <__ultoa_invert+0x86>
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__ultoa_invert+0x5c>
     fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <__ultoa_invert+0x58>
     fa2:	46 2f       	mov	r20, r22
     fa4:	4f 70       	andi	r20, 0x0F	; 15
     fa6:	40 5d       	subi	r20, 0xD0	; 208
     fa8:	4a 33       	cpi	r20, 0x3A	; 58
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <__ultoa_invert+0x7c>
     fac:	49 5d       	subi	r20, 0xD9	; 217
     fae:	31 fd       	sbrc	r19, 1
     fb0:	40 52       	subi	r20, 0x20	; 32
     fb2:	41 93       	st	Z+, r20
     fb4:	02 d0       	rcall	.+4      	; 0xfba <__ultoa_invert+0x84>
     fb6:	a9 f7       	brne	.-22     	; 0xfa2 <__ultoa_invert+0x6c>
     fb8:	ea cf       	rjmp	.-44     	; 0xf8e <__ultoa_invert+0x58>
     fba:	b4 e0       	ldi	r27, 0x04	; 4
     fbc:	a6 95       	lsr	r26
     fbe:	97 95       	ror	r25
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	ba 95       	dec	r27
     fc8:	c9 f7       	brne	.-14     	; 0xfbc <__ultoa_invert+0x86>
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	61 05       	cpc	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	08 95       	ret
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	0a 2e       	mov	r0, r26
     fd8:	06 94       	lsr	r0
     fda:	57 95       	ror	r21
     fdc:	47 95       	ror	r20
     fde:	37 95       	ror	r19
     fe0:	27 95       	ror	r18
     fe2:	ba 95       	dec	r27
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__ultoa_invert+0xa2>
     fe6:	62 0f       	add	r22, r18
     fe8:	73 1f       	adc	r23, r19
     fea:	84 1f       	adc	r24, r20
     fec:	95 1f       	adc	r25, r21
     fee:	a0 1d       	adc	r26, r0
     ff0:	08 95       	ret

00000ff2 <__prologue_saves__>:
     ff2:	2f 92       	push	r2
     ff4:	3f 92       	push	r3
     ff6:	4f 92       	push	r4
     ff8:	5f 92       	push	r5
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	ca 1b       	sub	r28, r26
    101c:	db 0b       	sbc	r29, r27
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	09 94       	ijmp

0000102a <__epilogue_restores__>:
    102a:	2a 88       	ldd	r2, Y+18	; 0x12
    102c:	39 88       	ldd	r3, Y+17	; 0x11
    102e:	48 88       	ldd	r4, Y+16	; 0x10
    1030:	5f 84       	ldd	r5, Y+15	; 0x0f
    1032:	6e 84       	ldd	r6, Y+14	; 0x0e
    1034:	7d 84       	ldd	r7, Y+13	; 0x0d
    1036:	8c 84       	ldd	r8, Y+12	; 0x0c
    1038:	9b 84       	ldd	r9, Y+11	; 0x0b
    103a:	aa 84       	ldd	r10, Y+10	; 0x0a
    103c:	b9 84       	ldd	r11, Y+9	; 0x09
    103e:	c8 84       	ldd	r12, Y+8	; 0x08
    1040:	df 80       	ldd	r13, Y+7	; 0x07
    1042:	ee 80       	ldd	r14, Y+6	; 0x06
    1044:	fd 80       	ldd	r15, Y+5	; 0x05
    1046:	0c 81       	ldd	r16, Y+4	; 0x04
    1048:	1b 81       	ldd	r17, Y+3	; 0x03
    104a:	aa 81       	ldd	r26, Y+2	; 0x02
    104c:	b9 81       	ldd	r27, Y+1	; 0x01
    104e:	ce 0f       	add	r28, r30
    1050:	d1 1d       	adc	r29, r1
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	ed 01       	movw	r28, r26
    105e:	08 95       	ret

00001060 <_exit>:
    1060:	f8 94       	cli

00001062 <__stop_program>:
    1062:	ff cf       	rjmp	.-2      	; 0x1062 <__stop_program>
