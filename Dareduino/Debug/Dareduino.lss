
Dareduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fb  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000788  00000000  00000000  00000cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000327  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
}
*/

int main(void)
{
	pinConfig(13,OUTPUT);
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 49 00 	call	0x92	; 0x92 <pinConfig>
	timerInit();
  8c:	0e 94 12 01 	call	0x224	; 0x224 <timerInit>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x10>

00000092 <pinConfig>:
#include <gpio.h>
#include <macros.h>

void pinConfig(int pin, int io)
{
	if((pin>=0)&&(pin<=7))
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	91 05       	cpc	r25, r1
  96:	00 f5       	brcc	.+64     	; 0xd8 <pinConfig+0x46>
	{
		if(io == OUTPUT)
  98:	61 30       	cpi	r22, 0x01	; 1
  9a:	71 05       	cpc	r23, r1
  9c:	69 f4       	brne	.+26     	; 0xb8 <pinConfig+0x26>
		{
			DDRD |= (1<<pin);
  9e:	4a b1       	in	r20, 0x0a	; 10
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <pinConfig+0x1a>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <pinConfig+0x16>
  b0:	cb 01       	movw	r24, r22
  b2:	84 2b       	or	r24, r20
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	08 95       	ret
		}
		
		if(io == INPUT)
  b8:	67 2b       	or	r22, r23
  ba:	a9 f5       	brne	.+106    	; 0x126 <pinConfig+0x94>
		{
			DDRD &=~ (1<<pin);
  bc:	4a b1       	in	r20, 0x0a	; 10
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <pinConfig+0x38>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <pinConfig+0x34>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	08 95       	ret
		}
	}	
	
	else if ((pin>=8)&&(pin<=13))
  d8:	9c 01       	movw	r18, r24
  da:	28 50       	subi	r18, 0x08	; 8
  dc:	31 09       	sbc	r19, r1
  de:	26 30       	cpi	r18, 0x06	; 6
  e0:	31 05       	cpc	r19, r1
  e2:	08 f5       	brcc	.+66     	; 0x126 <pinConfig+0x94>
	{
		if(io == OUTPUT)
  e4:	61 30       	cpi	r22, 0x01	; 1
  e6:	71 05       	cpc	r23, r1
  e8:	71 f4       	brne	.+28     	; 0x106 <pinConfig+0x74>
		{
			DDRB |= (1<<(pin-8));
  ea:	44 b1       	in	r20, 0x04	; 4
  ec:	c9 01       	movw	r24, r18
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <pinConfig+0x68>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <pinConfig+0x64>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	84 b9       	out	0x04, r24	; 4
 104:	08 95       	ret
		}
		
		if(io == INPUT)
 106:	67 2b       	or	r22, r23
 108:	71 f4       	brne	.+28     	; 0x126 <pinConfig+0x94>
		{
			DDRB &=~ (1<<(pin-8));
 10a:	44 b1       	in	r20, 0x04	; 4
 10c:	08 97       	sbiw	r24, 0x08	; 8
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <pinConfig+0x88>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <pinConfig+0x84>
 11e:	cb 01       	movw	r24, r22
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	84 b9       	out	0x04, r24	; 4
 126:	08 95       	ret

00000128 <pinWrite>:
	}
}

void pinWrite(int pin, int val)
{
	if((pin>=0)&&(pin<=7))
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	91 05       	cpc	r25, r1
 12c:	20 f5       	brcc	.+72     	; 0x176 <pinWrite+0x4e>
	{
		if (val > 0)
 12e:	16 16       	cp	r1, r22
 130:	17 06       	cpc	r1, r23
 132:	5c f4       	brge	.+22     	; 0x14a <pinWrite+0x22>
		{
			PORTD |= (1<<pin);
 134:	4b b1       	in	r20, 0x0b	; 11
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	08 2e       	mov	r0, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <pinWrite+0x1a>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <pinWrite+0x16>
 146:	24 2b       	or	r18, r20
 148:	2b b9       	out	0x0b, r18	; 11
		}
		
		if (val == 0)
 14a:	61 15       	cp	r22, r1
 14c:	71 05       	cpc	r23, r1
 14e:	99 f4       	brne	.+38     	; 0x176 <pinWrite+0x4e>
		{
			PORTD &=~ (1<<pin);
 150:	4b b1       	in	r20, 0x0b	; 11
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	08 2e       	mov	r0, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <pinWrite+0x36>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <pinWrite+0x32>
 162:	20 95       	com	r18
 164:	24 23       	and	r18, r20
 166:	2b b9       	out	0x0b, r18	; 11
		}
	}
	
	if ((pin>=8)&&(pin<=13))
 168:	9c 01       	movw	r18, r24
 16a:	28 50       	subi	r18, 0x08	; 8
 16c:	31 09       	sbc	r19, r1
 16e:	26 30       	cpi	r18, 0x06	; 6
 170:	31 05       	cpc	r19, r1
 172:	b8 f0       	brcs	.+46     	; 0x1a2 <pinWrite+0x7a>
 174:	08 95       	ret
 176:	9c 01       	movw	r18, r24
 178:	28 50       	subi	r18, 0x08	; 8
 17a:	31 09       	sbc	r19, r1
 17c:	26 30       	cpi	r18, 0x06	; 6
 17e:	31 05       	cpc	r19, r1
 180:	f0 f4       	brcc	.+60     	; 0x1be <pinWrite+0x96>
	{
		if (val > 0)
 182:	16 16       	cp	r1, r22
 184:	17 06       	cpc	r1, r23
 186:	5c f4       	brge	.+22     	; 0x19e <pinWrite+0x76>
		{
			PORTB |= (1<<(pin-8));
 188:	45 b1       	in	r20, 0x05	; 5
 18a:	f9 01       	movw	r30, r18
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <pinWrite+0x6e>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	ea 95       	dec	r30
 198:	e2 f7       	brpl	.-8      	; 0x192 <pinWrite+0x6a>
 19a:	24 2b       	or	r18, r20
 19c:	25 b9       	out	0x05, r18	; 5
		}
		
		if (val == 0)
 19e:	67 2b       	or	r22, r23
 1a0:	71 f4       	brne	.+28     	; 0x1be <pinWrite+0x96>
		{
			PORTB &=~ (1<<(pin-8));
 1a2:	45 b1       	in	r20, 0x05	; 5
 1a4:	08 97       	sbiw	r24, 0x08	; 8
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <pinWrite+0x8a>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <pinWrite+0x86>
 1b6:	cb 01       	movw	r24, r22
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <pinRead>:
	}
}

int pinRead(int pin)
{
	if((pin>=0)&&(pin<=7))
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	91 05       	cpc	r25, r1
 1c4:	88 f4       	brcc	.+34     	; 0x1e8 <pinRead+0x28>
	{
		return (PIND && (1<<(pin-8)));
 1c6:	29 b1       	in	r18, 0x09	; 9
 1c8:	22 23       	and	r18, r18
 1ca:	31 f1       	breq	.+76     	; 0x218 <pinRead+0x58>
 1cc:	08 97       	sbiw	r24, 0x08	; 8
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <pinRead+0x18>
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <pinRead+0x14>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	23 2b       	or	r18, r19
 1e2:	f9 f4       	brne	.+62     	; 0x222 <pinRead+0x62>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
	}
	
	if((pin>=8)&&(pin<=13))
 1e8:	9c 01       	movw	r18, r24
 1ea:	28 50       	subi	r18, 0x08	; 8
 1ec:	31 09       	sbc	r19, r1
 1ee:	26 30       	cpi	r18, 0x06	; 6
 1f0:	31 05       	cpc	r19, r1
 1f2:	88 f4       	brcc	.+34     	; 0x216 <pinRead+0x56>
	{
		return (PINB && (1<<(pin-8)));
 1f4:	23 b1       	in	r18, 0x03	; 3
 1f6:	22 23       	and	r18, r18
 1f8:	91 f0       	breq	.+36     	; 0x21e <pinRead+0x5e>

int pinRead(int pin)
{
	if((pin>=0)&&(pin<=7))
	{
		return (PIND && (1<<(pin-8)));
 1fa:	08 97       	sbiw	r24, 0x08	; 8
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <pinRead+0x46>
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <pinRead+0x42>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	23 2b       	or	r18, r19
 210:	41 f4       	brne	.+16     	; 0x222 <pinRead+0x62>
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret
	
	if((pin>=8)&&(pin<=13))
	{
		return (PINB && (1<<(pin-8)));
	}
 216:	08 95       	ret

int pinRead(int pin)
{
	if((pin>=0)&&(pin<=7))
	{
		return (PIND && (1<<(pin-8)));
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
	}
	
	if((pin>=8)&&(pin<=13))
	{
		return (PINB && (1<<(pin-8)));
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
	}
 222:	08 95       	ret

00000224 <timerInit>:
void TIMER1_COMPA_vect(void) __attribute__((signal));

void timerInit()
{
	//Enable CTC mode by setting WGM12 bit. Set pre-scaler to 256 by setting CS12 bit
	TCCR1B |= (1<<CS12) | (1<<WGM12);
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	80 83       	st	Z, r24
	
	//Start TCNT1 from 0
	TCNT1 = 0;
 22e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 232:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	//It will overflow when it reaches this compare value
	OCR1A = 31250; 
 236:	82 e1       	ldi	r24, 0x12	; 18
 238:	9a e7       	ldi	r25, 0x7A	; 122
 23a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 23e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	//Enable interrupt on match
	TIMSK1 |= (1<<OCIE1A);
 242:	ef e6       	ldi	r30, 0x6F	; 111
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	80 83       	st	Z, r24
	
	//Enable interrupts
	sei();
 24c:	78 94       	sei
 24e:	08 95       	ret

00000250 <taskScheduler>:
	
}

void taskScheduler()
{
	int a = pinRead(13);
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <pinRead>
	pinWrite(13,!a);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	89 2b       	or	r24, r25
 25e:	11 f0       	breq	.+4      	; 0x264 <taskScheduler+0x14>
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	8d e0       	ldi	r24, 0x0D	; 13
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 94 00 	call	0x128	; 0x128 <pinWrite>
 26c:	08 95       	ret

0000026e <__vector_11>:
}

void TIMER1_COMPA_vect()
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	taskScheduler();
 290:	0e 94 28 01 	call	0x250	; 0x250 <taskScheduler>
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
